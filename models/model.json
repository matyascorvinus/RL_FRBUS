{
  "model": {
    "name": "stdver",
    "xml_version": 1,
    "state_space": "yes",
    "variable": [
      {
        "name": "dmptmax",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Monetary policy indicator for both thresholds",
        "description": "DMPTMAX equals one when either the unemployment threshold or\nthe inflation threshold is breached.",
        "standard_equation": {
          "eviews_equation": "dmptmax - dmptmax_aerr = (@recode((dmptlur)&gt;(dmptpi),dmptlur,dmptpi))",
          "python_equation": "dmptmax - dmptmax_aerr = (max((dmptlur),(dmptpi)))",
          "rhs_eq_var": [
            "dmptlur",
            "dmptpi"
          ]
        }
      },
      {
        "name": "adjlegrt",
        "equation_type": "Exogenous",
        "definition": "Potential government employment ratio (relative to business)",
        "exogenous_projection": 2
      },
      {
        "name": "d79a",
        "equation_type": "Exogenous",
        "definition": "Dummy, post-1979 indicator",
        "exogenous_projection": 2
      },
      {
        "name": "d8095",
        "equation_type": "Exogenous",
        "definition": "Dummy, 1980-1995 indicator",
        "exogenous_projection": 2
      },
      {
        "name": "d83",
        "equation_type": "Exogenous",
        "definition": "Dummy, post-1983 indicator",
        "exogenous_projection": 2
      },
      {
        "name": "d87",
        "equation_type": "Exogenous",
        "definition": "Dummy, post-1986 indicator",
        "exogenous_projection": 2
      },
      {
        "name": "ddockm",
        "equation_type": "Exogenous",
        "definition": "Dock strike dummy, import equation",
        "exogenous_projection": 2
      },
      {
        "name": "ddockx",
        "equation_type": "Exogenous",
        "definition": "Dock strike dummy, export equation",
        "exogenous_projection": 7
      },
      {
        "name": "delrff",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Federal funds rate, first diff",
        "standard_equation": {
          "eviews_equation": "delrff - delrff_aerr = rff - rff(-1)",
          "python_equation": "delrff - delrff_aerr = rff - rff(-1)",
          "rhs_eq_var": "rff"
        }
      },
      {
        "name": "deuc",
        "equation_type": "Exogenous",
        "definition": "EUC switch:  1 for including EUC, 0 for not including",
        "exogenous_projection": 2
      },
      {
        "name": "dfmprr",
        "equation_type": "Exogenous",
        "definition": "Dummy, Foreign monetary policy switch:  Exogenous real interest rate",
        "exogenous_projection": 2
      },
      {
        "name": "dfpdbt",
        "equation_type": "Exogenous",
        "definition": "Fiscal policy switch:  1 for debt ratio stabilization",
        "exogenous_projection": 2
      },
      {
        "name": "dfpex",
        "equation_type": "Exogenous",
        "definition": "Fiscal policy switch:  1 for exogenous personal income trend tax rates",
        "exogenous_projection": 2
      },
      {
        "name": "dfpsrp",
        "equation_type": "Exogenous",
        "definition": "Fiscal policy switch:  1 for surplus ratio stabilization",
        "exogenous_projection": 2
      },
      {
        "name": "dglprd",
        "equation_type": "Exogenous",
        "definition": "Switch to control for long-run productivity growth in the government sector",
        "exogenous_projection": 2
      },
      {
        "name": "dmpalt",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch: MA rule",
        "exogenous_projection": 2
      },
      {
        "name": "dmpex",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  exogenous federal funds rate",
        "exogenous_projection": 2
      },
      {
        "name": "dmpgen",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  Generalized reaction function",
        "exogenous_projection": 2
      },
      {
        "name": "dmpintay",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  inertial taylor rule",
        "exogenous_projection": 2
      },
      {
        "name": "dmprr",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  exogenous real federal funds rate",
        "exogenous_projection": 2
      },
      {
        "name": "dmptay",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  Taylor's reaction function",
        "exogenous_projection": 2
      },
      {
        "name": "dmptlr",
        "equation_type": "Exogenous",
        "definition": "Monetary policy switch:  Taylor's reaction function with unemployment gap",
        "exogenous_projection": 2
      },
      {
        "name": "dmptlur",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Monetary policy indicator for unemployment threshold",
        "description": "DMPTLUR equals zero when the unemployment rate is above its\nthreshold (LURTRSH) one when it is below.  A logistic function\nsmoothes the transition, improving solution convergence properties.",
        "standard_equation": {
          "eviews_equation": "dmptlur - dmptlur_aerr = 1/(1+exp(y_dmptlur(1)*(lur-lurtrsh)))",
          "python_equation": "dmptlur - dmptlur_aerr = 1/(1+exp(y_dmptlur_1*(lur-lurtrsh)))",
          "coeff": {
            "cf_name": "y_dmptlur(1)",
            "cf_value": 25
          },
          "rhs_eq_var": [
            "lur",
            "lurtrsh"
          ]
        }
      },
      {
        "name": "dmptpi",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Monetary policy indicator for inflation threshold",
        "description": "DMPTPI equals zero when expected inflation is below its threshold\nand one when it is above.  A logistic function smoothes the\ntransition, improving solution convergence properties.",
        "standard_equation": {
          "eviews_equation": "dmptpi - dmptpi_aerr = 1/(1+exp(y_dmptpi(1)*(zpic58-pitrsh)))",
          "python_equation": "dmptpi - dmptpi_aerr = 1/(1+exp(y_dmptpi_1*(zpic58-pitrsh)))",
          "coeff": {
            "cf_name": "y_dmptpi(1)",
            "cf_value": -25
          },
          "rhs_eq_var": [
            "pitrsh",
            "zpic58"
          ]
        }
      },
      {
        "name": "dmptr",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Monetary policy indicator for policy rule thresholds",
        "description": "DMPTR is initially zero.  It remains at that value until\neither the unemployment threshold or the inflation threshold\nis breached, after which it equals one.",
        "standard_equation": {
          "eviews_equation": "dmptr - dmptr_aerr = (@recode((dmptmax)&gt;(dmptr(-1)),dmptmax,dmptr(-1)))",
          "python_equation": "dmptr - dmptr_aerr = (max(dmptmax,(dmptr(-1))))",
          "rhs_eq_var": [
            "dmptmax",
            "dmptr"
          ]
        }
      },
      {
        "name": "dmptrsh",
        "equation_type": "Exogenous",
        "definition": "Monetary policy threshold switch:  0 for no threshold,  1 for threshold",
        "exogenous_projection": 2
      },
      {
        "name": "dpadj",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price inflation aggregation adjustment",
        "description": "The adjustment factor for non-consumption prices equals the\nvalue in the prior quarter plus the price aggregation discrepancy\nin the prior quarter.  Thus, component prices are adjusted to\noffset any aggregation discrepancy with only a one-quarter lag.",
        "standard_equation": {
          "eviews_equation": "dpadj - dpadj_aerr - dpadj(-1) = y_dpadj(1) * dpgap(-1)",
          "python_equation": "dpadj - dpadj_aerr - dpadj(-1) = y_dpadj_1 * dpgap(-1)",
          "coeff": {
            "cf_name": "y_dpadj(1)",
            "cf_value": 1
          },
          "rhs_eq_var": "dpgap"
        }
      },
      {
        "name": "dpgap",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price inflation aggregation discrepancy",
        "description": "The price inflation aggregation discrepancy (DPGAP) equals the rate\nof increase of the price for adjusted final sales excluding\nconsumption less the weighted sum of rates of price increase for the\nnon-consumption components of adjusted final sales.",
        "standard_equation": {
          "eviews_equation": "dpgap - dpgap_aerr =  pipxnc/400 - (\n        y_dpgap(1) * d( log( phr * pxp), 0, 1)\n      + y_dpgap(2) * d( log( pbfir * pxp), 0, 1)\n      + (y_dpgap(3)+y_dpgap(4)) * d( log( pegfr * pxp), 0, 1)\n      + (y_dpgap(5)+y_dpgap(6)) * d( log( pegsr * pxp), 0, 1)\n      + y_dpgap(7) * d( log( pxr * pxp), 0, 1))",
          "python_equation": "dpgap - dpgap_aerr =  pipxnc/400 - (\n        y_dpgap_1 * ( log( phr * pxp) - ( log( phr(-1) * pxp(-1))))\n      + y_dpgap_2 * ( log( pbfir * pxp) - ( log( pbfir(-1) * pxp(-1))))\n      + (y_dpgap_3+y_dpgap_4) * ( log( pegfr * pxp) - ( log( pegfr(-1) * pxp(-1))))\n      + (y_dpgap_5+y_dpgap_6) * ( log( pegsr * pxp) - ( log( pegsr(-1) * pxp(-1))))\n      + y_dpgap_7 * ( log( pxr * pxp) - ( log( pxr(-1) * pxp(-1)))))",
          "coeff": [
            {
              "cf_name": "y_dpgap(1)",
              "cf_value": 0.1036498839384806
            },
            {
              "cf_name": "y_dpgap(2)",
              "cf_value": 0.3410415470273469
            },
            {
              "cf_name": "y_dpgap(3)",
              "cf_value": 0.08204590812944115
            },
            {
              "cf_name": "y_dpgap(4)",
              "cf_value": 0.03932014681002743
            },
            {
              "cf_name": "y_dpgap(5)",
              "cf_value": 0.05247494124140634
            },
            {
              "cf_name": "y_dpgap(6)",
              "cf_value": 0.05248394123132865
            },
            {
              "cf_name": "y_dpgap(7)",
              "cf_value": 0.328983631621969
            }
          ],
          "rhs_eq_var": [
            "pbfir",
            "pegfr",
            "pegsr",
            "phr",
            "pipxnc",
            "pxp",
            "pxr"
          ]
        }
      },
      {
        "name": "drstar",
        "equation_type": "Exogenous",
        "definition": "RSTAR updating switch: 1 is on, 0 is off",
        "exogenous_projection": 2
      },
      {
        "name": "ebfi",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Business Fixed Investment, cw 2012$",
        "description": "Business Fixed Investment is a weighted average of the investment spending\nof optimizing firms and an ad hoc term in lagged output growth adjusted for the trend growth\nrate of the relative price of investment.",
        "standard_equation": {
          "eviews_equation": "dlog(ebfi)  - ebfi_aerr =\n          (y_ebfi(1)*(log(qebfi(-1)/ebfi(-1)))\n          + y_ebfi(2)*dlog(ebfi(-1))\n          + y_ebfi(3)*dlog(ebfi(-2))\n          + y_ebfi(4)*zebfi)*(1\n          -y_ebfi(5))\n          + y_ebfi(5)*(dlog(xb(-1)) - hgpbfir(-1)/400)",
          "python_equation": "(log(ebfi) - log(ebfi(-1)))  - ebfi_aerr =\n          (y_ebfi_1*(log(qebfi(-1)/ebfi(-1)))\n          + y_ebfi_2*(log(ebfi(-1)) - log(ebfi(-2)))\n          + y_ebfi_3*(log(ebfi(-2)) - log(ebfi(-3)))\n          + y_ebfi_4*zebfi)*(1\n          -y_ebfi_5)\n          + y_ebfi_5*((log(xb(-1)) - log(xb(-2))) - hgpbfir(-1)/400)",
          "coeff": [
            {
              "cf_name": "y_ebfi(1)",
              "cf_value": 0.0735815097920017,
              "t_stat": 2.592163375459443
            },
            {
              "cf_name": "y_ebfi(2)",
              "cf_value": 0.5222641043182303,
              "t_stat": 4.287699440392147
            },
            {
              "cf_name": "y_ebfi(3)",
              "cf_value": 0.3022170849291267,
              "t_stat": 2.174719454590632
            },
            {
              "cf_name": "y_ebfi(4)",
              "cf_value": 1
            },
            {
              "cf_name": "y_ebfi(5)",
              "cf_value": 0.3835146156808873,
              "t_stat": 2.411491893124986
            }
          ],
          "rhs_eq_var": [
            "ebfi",
            "hgpbfir",
            "qebfi",
            "xb",
            "zebfi"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.4270846843719483,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 2.032083749771118,
            "method": "Least Squares",
            "r_squared": 0.4360833466053009,
            "sample_end": "2017Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.01577474921941757
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "ebfin",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "Investment in equipment, current $",
        "standard_equation": {
          "eviews_equation": "ebfin - ebfin_aerr = 0.01*ebfi*pbfir*pxp",
          "python_equation": "ebfin - ebfin_aerr = 0.01*ebfi*pbfir*pxp",
          "rhs_eq_var": [
            "ebfi",
            "pbfir",
            "pxp"
          ]
        }
      },
      {
        "name": "ec",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Consumption, cw 2012$ (FRB/US definition)",
        "description": "The FRB/US concept of total consumer spending is approximated by\na fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(ec) - ec_aerr = log(ec(-1)) + y_ec(1)*log(eco/eco(-1)) + y_ec(2)*log(ech/ech(-1))\n                         +y_ec(3)*log((yhpcd+jkcd)/(yhpcd(-1)+jkcd(-1)))",
          "python_equation": "log(ec) - ec_aerr = log(ec(-1)) + y_ec_1*log(eco/eco(-1)) + y_ec_2*log(ech/ech(-1))\n                         +y_ec_3*log((yhpcd+jkcd)/(yhpcd(-1)+jkcd(-1)))",
          "coeff": [
            {
              "cf_name": "y_ec(1)",
              "cf_value": 0.7310605131
            },
            {
              "cf_name": "y_ec(2)",
              "cf_value": 0.157421136
            },
            {
              "cf_name": "y_ec(3)",
              "cf_value": 0.1115183509
            }
          ],
          "rhs_eq_var": [
            "ec",
            "ech",
            "eco",
            "jkcd",
            "yhpcd"
          ]
        }
      },
      {
        "name": "ecd",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Consumer expenditures on durable goods, cw 2012$",
        "description": "Household investment in consumer durables is modeled using the\npolynomial adjustment cost (PAC) framework, whose general structure is\nshown below in the PAC Overview section.  To translate the general PAC\nspecification into the form in which it appears in the ECD equation,\nassociate log(ECD) with y, log(QECD) with y&lt;sup&gt;1*&lt;/sup&gt;, ZECO with\nthe expected weighted sum of future &amp;Delta;y&lt;sup&gt;1*&lt;/sup&gt;, and\n8.02*ZGAPC2/400 with the expected weighed sum of future\ny&lt;sup&gt;0*&lt;/sup&gt;.  The order of adjustment costs (m) is 2.\n\nPAC Overview: Let y denote the decision variable, and y&lt;sup&gt;1*&lt;/sup&gt;\nand y&lt;sup&gt;0*&lt;/sup&gt; be the nonstationary and stationary components of its\ndesired level in the absence of adjustment frictions.  The decision\nrule derived from the PAC Euler equation has the following form.\n\n(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt; =\n      a&lt;sub&gt;0&lt;/sub&gt;(y&lt;sup&gt;1*&lt;/sup&gt;&lt;sub&gt;t-1&lt;/sub&gt; - y&lt;sub&gt;t-1&lt;/sub&gt;) +\n      &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt; a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sup&gt;1*&lt;/sup&gt;&lt;sub&gt;t+i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;h&lt;sub&gt;i&lt;/sub&gt;y&lt;sup&gt;0*&lt;/sup&gt;&lt;sub&gt;t+i&lt;/sub&gt;\n\n The order of adjustment costs is given by parameter m.  The\nforward weights, d&lt;sub&gt;i&lt;/sub&gt; and h&lt;sub&gt;i&lt;/sub&gt;, {i=0,&amp;infin;}, are\nfunctions of the estimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a\nfixed discount factor (0.98).  Estimation imposes the growth\nneutrality restriction &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +\n&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,\nsee &lt;a href=\"pac_basics.pdf\"&gt;Pac Basics&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "dlog(ecd)  - ecd_aerr =\n            y_ecd(1) * log(qecd(-1)/ecd(-1))\n          + y_ecd(2) * dlog(ecd(-1))\n          + y_ecd(3) * zecd\n          + y_ecd(4) * zgapc2 / 400",
          "python_equation": "(log(ecd) - log(ecd(-1)))  - ecd_aerr =\n            y_ecd_1 * log(qecd(-1)/ecd(-1))\n          + y_ecd_2 * (log(ecd(-1)) - log(ecd(-2)))\n          + y_ecd_3 * zecd\n          + y_ecd_4 * zgapc2 / 400",
          "coeff": [
            {
              "cf_name": "y_ecd(1)",
              "cf_value": 0.1561499403562654,
              "t_stat": 3.822149702375726
            },
            {
              "cf_name": "y_ecd(2)",
              "cf_value": -0.05999277989382532,
              "t_stat": -0.8810639821989592
            },
            {
              "cf_name": "y_ecd(3)",
              "cf_value": 1
            },
            {
              "cf_name": "y_ecd(4)",
              "cf_value": 11.87185840275941,
              "t_stat": 3.108553110276274
            }
          ],
          "rhs_eq_var": [
            "ecd",
            "qecd",
            "zecd",
            "zgapc2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.1428955644369125,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 2.026607751846313,
            "method": "Least Squares",
            "r_squared": 0.1517316997051239,
            "sample_end": "2017Q4",
            "sample_start": "1969Q2",
            "se_of_regression": 0.02697205170989037
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "ech",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Consumer expenditures on housing services, cw 2012$",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d(ech/kh(-1))  - ech_aerr =\n           y_ech(1)\n          + y_ech(2)*ech(-1)/kh(-2)\n          + y_ech(3)*d(ech(-1)/kh(-2))",
          "python_equation": "(ech/kh(-1) - (ech(-1)/kh(-2)))  - ech_aerr =\n           y_ech_1\n          + y_ech_2*ech(-1)/kh(-2)\n          + y_ech_3*(ech(-1)/kh(-2) - (ech(-2)/kh(-3)))",
          "coeff": [
            {
              "cf_name": "y_ech(1)",
              "cf_value": 0.0005280507960180215,
              "t_stat": 1.98089239418462
            },
            {
              "cf_name": "y_ech(2)",
              "cf_value": -0.005044873655834186,
              "t_stat": -1.871635939368791
            },
            {
              "cf_name": "y_ech(3)",
              "cf_value": 0.7183359768373699,
              "t_stat": 14.421159738464
            }
          ],
          "rhs_eq_var": [
            "ech",
            "kh"
          ],
          "estimation_statistics": {
            "F_statistic": 108.2744659817186,
            "adjusted_r_squared": 0.5303411157758982,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 1.714500863198455,
            "method": "Least Squares",
            "prob_F_statistic": 5.194673906820202e-32,
            "r_squared": 0.5352848935045729,
            "sample_end": "2017Q4",
            "sample_start": "1970Q2",
            "se_of_regression": 0.0001922129610830469
          }
        },
        "stochastic_type": "IS"
      },
      {
        "name": "ecnia",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Personal consumption expenditures, cw 2012$ (NIPA definition)",
        "description": "NIPA total consumer spending is approximated by a fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(ecnia)  - ecnia_aerr = log(ecnia(-1))\n          + y_ecnia(1)*log(eco/eco(-1))\n          + y_ecnia(2)*log(ecd/ecd(-1))\n          + y_ecnia(3)*log(ech/ech(-1))",
          "python_equation": "log(ecnia)  - ecnia_aerr = log(ecnia(-1))\n          + y_ecnia_1*log(eco/eco(-1))\n          + y_ecnia_2*log(ecd/ecd(-1))\n          + y_ecnia_3*log(ech/ech(-1))",
          "coeff": [
            {
              "cf_name": "y_ecnia(1)",
              "cf_value": 0.735
            },
            {
              "cf_name": "y_ecnia(2)",
              "cf_value": 0.1055
            },
            {
              "cf_name": "y_ecnia(3)",
              "cf_value": 0.1595
            }
          ],
          "rhs_eq_var": [
            "ecd",
            "ech",
            "ecnia",
            "eco"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999984153897256,
            "date": "08/30/18   Time: 09:58",
            "durbin_watson": 1.63471562254246,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.999999207694863,
            "sample_end": "2017Q4",
            "sample_start": "2016Q4",
            "se_of_regression": 0.00001320212168321809
          }
        }
      },
      {
        "name": "ecnian",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Personal consumption expenditures, current $ (NIPA definition)",
        "standard_equation": {
          "eviews_equation": "ecnian - ecnian_aerr = .01*pcnia*ecnia",
          "python_equation": "ecnian - ecnian_aerr = .01*pcnia*ecnia",
          "rhs_eq_var": [
            "ecnia",
            "pcnia"
          ]
        }
      },
      {
        "name": "eco",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Consumer expenditures on non-durable goods and non-housing services, cw 2012$",
        "description": "Consumer spending on nondurables goods and non-housing services is\na weighted average of the spending of optimizing households and\nrule-of-thumb (ROT) households.  The consumption decisions of the\nformer are modeled using the polynomial adjustment cost (PAC)\nframework.  ROT consumption moves in proportion with the sum of labor\nand transfer income (YHL+YHT).  The estimated fraction of ROT\nconsumption is 0.18.  The structure of the PAC component of the\nequation is based on equation (1) shown below in the PAC Overview\nsection.  To translate the general PAC specification into the form in\nwhich it appears in the ECO equation, associate log(ECO) with y,\nlog(QECO) with y*, and ZECO with the expected weighted sum of future\n&amp;Delta;y*.  The order of adjustment costs (m) is 2.\n\nPAC Overview: Let y denote the decision variable and y* its desired\nlevel in the absence of adjustment frictions.  The decision rule\nderived from the PAC Euler equation has the following form.\n\n(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -\n      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;\n      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;\n\n The order of adjustment costs is given by parameter m.  The\nforward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the\nestimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount\nfactor (0.98).  Estimation imposes the growth neutrality restriction\n&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +\n&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,\nsee &lt;a href=\"pac_basics.pdf\"&gt;PAC Basics&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "dlog(eco)  - eco_aerr =\n          ( y_eco(1) * log(qeco(-1)/eco(-1))\n          + y_eco(2) * dlog(eco(-1))\n          + y_eco(3) * zeco) * (1\n          -y_eco(4))\n          + y_eco(4) * dlog(yhl+yht)",
          "python_equation": "(log(eco) - log(eco(-1)))  - eco_aerr =\n          ( y_eco_1 * log(qeco(-1)/eco(-1))\n          + y_eco_2 * (log(eco(-1)) - log(eco(-2)))\n          + y_eco_3 * zeco) * (1\n          -y_eco_4)\n          + y_eco_4 * (log(yhl+yht) - log(yhl(-1)+yht(-1)))",
          "coeff": [
            {
              "cf_name": "y_eco(1)",
              "cf_value": 0.1584215605793791,
              "t_stat": 4.069430324069695
            },
            {
              "cf_name": "y_eco(2)",
              "cf_value": 0.4118129978512995,
              "t_stat": 4.334631712151889
            },
            {
              "cf_name": "y_eco(3)",
              "cf_value": 1
            },
            {
              "cf_name": "y_eco(4)",
              "cf_value": 0.3075237404993435,
              "t_stat": 2.861084995194625
            }
          ],
          "rhs_eq_var": [
            "eco",
            "qeco",
            "yhl",
            "yht",
            "zeco"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.3596963882446289,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 2.00827169418335,
            "method": "Iterative Least Squares",
            "r_squared": 0.3661969304084778,
            "sample_end": "2017Q4",
            "sample_start": "1968Q3",
            "se_of_regression": 0.004007072653621435
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "egfe",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal Government expenditures, CW 2012$",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d( log(egfe), 0, 1 )  - egfe_aerr =\n           y_egfe(1)\n          + y_egfe(2) * log(egfe(-1)/egfet(-1))\n          + y_egfe(3) *  d( log(egfe(-1)), 0, 1 )\n          + y_egfe(4) *  d( log(egfe(-2)), 0, 1 )\n          + y_egfe(5) * d( log(egfet), 0, 1 )\n          + y_egfe(6) *  xgap2\n          + y_egfe(7) *  xgap2(-1)",
          "python_equation": "( log(egfe) - ( log(egfe(-1))))  - egfe_aerr =\n           y_egfe_1\n          + y_egfe_2 * log(egfe(-1)/egfet(-1))\n          + y_egfe_3 *  ( log(egfe(-1)) - ( log(egfe(-2))))\n          + y_egfe_4 *  ( log(egfe(-2)) - ( log(egfe(-3))))\n          + y_egfe_5 * ( log(egfet) - ( log(egfet(-1))))\n          + y_egfe_6 *  xgap2\n          + y_egfe_7 *  xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_egfe(1)",
              "cf_value": -0.0008045327442607825,
              "t_stat": -0.4943819857950891
            },
            {
              "cf_name": "y_egfe(2)",
              "cf_value": -0.1204156945139518,
              "t_stat": -3.000598283182305
            },
            {
              "cf_name": "y_egfe(3)",
              "cf_value": -0.153308131863314,
              "t_stat": -2.126972083749647
            },
            {
              "cf_name": "y_egfe(4)",
              "cf_value": -0.1035937599294917,
              "t_stat": -1.486591329749078
            },
            {
              "cf_name": "y_egfe(5)",
              "cf_value": 1.50381543495264,
              "t_stat": 6.261724581077439
            },
            {
              "cf_name": "y_egfe(6)",
              "cf_value": -0.0009835524480447813,
              "t_stat": -0.4481415573034953
            },
            {
              "cf_name": "y_egfe(7)",
              "cf_value": 0.0007256812123007961,
              "t_stat": 0.3302663605113349
            }
          ],
          "rhs_eq_var": [
            "egfe",
            "egfet",
            "xgap2"
          ],
          "estimation_statistics": {
            "F_statistic": 11.12218670733286,
            "adjusted_r_squared": 0.2235028258221269,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.991593778588748,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 9.870517608437913e-11,
            "r_squared": 0.2455833141873744,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.02004202666080826
          }
        },
        "stochastic_type": "GV"
      },
      {
        "name": "egfen",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal Government expenditures, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "egfen - egfen_aerr = pegfr*pxp*egfe*.01",
          "python_equation": "egfen - egfen_aerr = pegfr*pxp*egfe*.01",
          "rhs_eq_var": [
            "egfe",
            "pegfr",
            "pxp"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "egfet",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal Government expenditures, CW 2012$, Trend",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d( log(egfet), 0, 1 ) - egfet_aerr  = y_egfet(1)\n                    + y_egfet(2) * log(.01*pegfr(-1)*pxp(-1)*egfet(-1)/xgdptn(-1))\n                    + y_egfet(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "python_equation": "( log(egfet) - ( log(egfet(-1)))) - egfet_aerr  = y_egfet_1\n                    + y_egfet_2 * log(.01*pegfr(-1)*pxp(-1)*egfet(-1)/xgdptn(-1))\n                    + y_egfet_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "coeff": [
            {
              "cf_name": "y_egfet(1)",
              "cf_value": -0.3101,
              "t_stat": 0
            },
            {
              "cf_name": "y_egfet(2)",
              "cf_value": -0.1,
              "t_stat": 0
            },
            {
              "cf_name": "y_egfet(3)",
              "cf_value": 1,
              "t_stat": 0
            }
          ],
          "rhs_eq_var": [
            "egfet",
            "hggdpt",
            "pegfr",
            "pxp",
            "xgdptn"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "egfl",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal government employee compensation, cw 2012$",
        "standard_equation": {
          "eviews_equation": "d( log(egfl), 0, 1 )   - egfl_aerr =\n           y_egfl(1)\n          + y_egfl(2) * log(egfl(-1)/egflt(-1))\n          + y_egfl(3) *  d( log(egfl(-1)), 0, 1 )\n          + y_egfl(4) *  d( log(egfl(-2)), 0, 1 )\n          + y_egfl(5) * d( log(egflt), 0, 1 )\n          + y_egfl(6) *  xgap2\n          + y_egfl(7) *  xgap2(-1)",
          "python_equation": "( log(egfl) - ( log(egfl(-1))))   - egfl_aerr =\n           y_egfl_1\n          + y_egfl_2 * log(egfl(-1)/egflt(-1))\n          + y_egfl_3 *  ( log(egfl(-1)) - ( log(egfl(-2))))\n          + y_egfl_4 *  ( log(egfl(-2)) - ( log(egfl(-3))))\n          + y_egfl_5 * ( log(egflt) - ( log(egflt(-1))))\n          + y_egfl_6 *  xgap2\n          + y_egfl_7 *  xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_egfl(1)",
              "cf_value": 0.0002417378554669395,
              "t_stat": 0.409467413904429
            },
            {
              "cf_name": "y_egfl(2)",
              "cf_value": -0.0795584254267964,
              "t_stat": -3.315961228955266
            },
            {
              "cf_name": "y_egfl(3)",
              "cf_value": 0.2415347480637823,
              "t_stat": 3.578173376936391
            },
            {
              "cf_name": "y_egfl(4)",
              "cf_value": -0.06133379374138964,
              "t_stat": -0.8876135076407102
            },
            {
              "cf_name": "y_egfl(5)",
              "cf_value": 1.206872311101357,
              "t_stat": 6.146547668815872
            },
            {
              "cf_name": "y_egfl(6)",
              "cf_value": -0.002507254010777311,
              "t_stat": -2.654081880679804
            },
            {
              "cf_name": "y_egfl(7)",
              "cf_value": 0.002350674896424264,
              "t_stat": 2.482710744609933
            }
          ],
          "rhs_eq_var": [
            "egfl",
            "egflt",
            "xgap2"
          ],
          "estimation_statistics": {
            "F_statistic": 20.48035499006137,
            "adjusted_r_squared": 0.3608786009956402,
            "date": "11/20/17   Time: 17:06",
            "durbin_watson": 2.002279366858446,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 1.163236924672889e-18,
            "r_squared": 0.3794038589377955,
            "sample_end": "2016Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.008461686294687649
          }
        },
        "kfcalc": 1,
        "stochastic_type": "GV"
      },
      {
        "name": "egfln",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal government employee compensation, current $",
        "standard_equation": {
          "eviews_equation": "egfln - egfln_aerr = .01 * pgfl * egfl",
          "python_equation": "egfln - egfln_aerr = .01 * pgfl * egfl",
          "rhs_eq_var": [
            "egfl",
            "pgfl"
          ]
        }
      },
      {
        "name": "egflt",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal government employee compensation, cw 2012$, trend",
        "standard_equation": {
          "eviews_equation": "d( log(egflt), 0, 1 ) - egflt_aerr\n                    = y_egflt(1)\n                    + y_egflt(2) * log(.01*pgfl(-1)*egflt(-1)/xgdptn(-1))\n                    + y_egflt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "python_equation": "( log(egflt) - ( log(egflt(-1)))) - egflt_aerr\n                    = y_egflt_1\n                    + y_egflt_2 * log(.01*pgfl(-1)*egflt(-1)/xgdptn(-1))\n                    + y_egflt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "coeff": [
            {
              "cf_name": "y_egflt(1)",
              "cf_value": -0.375978
            },
            {
              "cf_name": "y_egflt(2)",
              "cf_value": -0.1
            },
            {
              "cf_name": "y_egflt(3)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "egflt",
            "hggdpt",
            "pgfl",
            "xgdptn"
          ]
        }
      },
      {
        "name": "egse",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "S&amp;L Government expenditures, CW 2012$",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d( log(egse), 0, 1 )   - egse_aerr =\n           y_egse(1)\n          + y_egse(2) * log(egse(-1)/egset(-1))\n          + y_egse(3) *  d( log(egse(-1)), 0, 1 )\n          + y_egse(4) *  d( log(egse(-2)), 0, 1 )\n          + y_egse(5) * d( log(egset), 0, 1 )\n          + y_egse(6) *  xgap2\n          + y_egse(7) *  xgap2(-1)",
          "python_equation": "( log(egse) - ( log(egse(-1))))   - egse_aerr =\n           y_egse_1\n          + y_egse_2 * log(egse(-1)/egset(-1))\n          + y_egse_3 *  ( log(egse(-1)) - ( log(egse(-2))))\n          + y_egse_4 *  ( log(egse(-2)) - ( log(egse(-3))))\n          + y_egse_5 * ( log(egset) - ( log(egset(-1))))\n          + y_egse_6 *  xgap2\n          + y_egse_7 *  xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_egse(1)",
              "cf_value": -0.0003205558585065158,
              "t_stat": -0.1847579368823805
            },
            {
              "cf_name": "y_egse(2)",
              "cf_value": -0.1310861864392932,
              "t_stat": -3.758279614354262
            },
            {
              "cf_name": "y_egse(3)",
              "cf_value": 0.1315799717205844,
              "t_stat": 1.91004234973597
            },
            {
              "cf_name": "y_egse(4)",
              "cf_value": 0.002629649907733779,
              "t_stat": 0.03764592773526881
            },
            {
              "cf_name": "y_egse(5)",
              "cf_value": 0.9287008343314473,
              "t_stat": 4.020615258371604
            },
            {
              "cf_name": "y_egse(6)",
              "cf_value": 0.001580665878764003,
              "t_stat": 0.9137023166458276
            },
            {
              "cf_name": "y_egse(7)",
              "cf_value": -0.0008537660921935765,
              "t_stat": -0.4929943706873416
            }
          ],
          "rhs_eq_var": [
            "egse",
            "egset",
            "xgap2"
          ],
          "estimation_statistics": {
            "F_statistic": 10.30187508030517,
            "adjusted_r_squared": 0.2091787748119398,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.9980010028473,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 5.746545674068954e-10,
            "r_squared": 0.2316665821632591,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.01565192082089247
          }
        },
        "stochastic_type": "GV"
      },
      {
        "name": "egsen",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "S&amp;L Government expenditures, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "egsen - egsen_aerr = pegsr*pxp*egse*.01",
          "python_equation": "egsen - egsen_aerr = pegsr*pxp*egse*.01",
          "rhs_eq_var": [
            "egse",
            "pegsr",
            "pxp"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "egset",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "S&amp;L Government expenditures, CW 2012$, Trend",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d( log(egset), 0, 1 ) - egset_aerr  = y_egset(1)\n                    + y_egset(2) * log(.01*pegsr(-1)*pxp(-1)*egset(-1)/xgdptn(-1))\n                    + y_egset(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "python_equation": "( log(egset) - ( log(egset(-1)))) - egset_aerr  = y_egset_1\n                    + y_egset_2 * log(.01*pegsr(-1)*pxp(-1)*egset(-1)/xgdptn(-1))\n                    + y_egset_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "coeff": [
            {
              "cf_name": "y_egset(1)",
              "cf_value": -0.32,
              "t_stat": 0
            },
            {
              "cf_name": "y_egset(2)",
              "cf_value": -0.1,
              "t_stat": 0
            },
            {
              "cf_name": "y_egset(3)",
              "cf_value": 1,
              "t_stat": 0
            }
          ],
          "rhs_eq_var": [
            "egset",
            "hggdpt",
            "pegsr",
            "pxp",
            "xgdptn"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "egsl",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "S&amp;L government employee compensation, cw 2012$",
        "standard_equation": {
          "eviews_equation": "d( log(egsl), 0, 1 )   - egsl_aerr =\n           y_egsl(1)\n          + y_egsl(2) * log(egsl(-1)/egslt(-1))\n          + y_egsl(3) *  d( log(egsl(-1)), 0, 1 )\n          + y_egsl(4) *  d( log(egsl(-2)), 0, 1 )\n          + y_egsl(5) * d( log(egslt), 0, 1 )\n          + y_egsl(6) *  xgap2\n          + y_egsl(7) *  xgap2(-1)",
          "python_equation": "( log(egsl) - ( log(egsl(-1))))   - egsl_aerr =\n           y_egsl_1\n          + y_egsl_2 * log(egsl(-1)/egslt(-1))\n          + y_egsl_3 *  ( log(egsl(-1)) - ( log(egsl(-2))))\n          + y_egsl_4 *  ( log(egsl(-2)) - ( log(egsl(-3))))\n          + y_egsl_5 * ( log(egslt) - ( log(egslt(-1))))\n          + y_egsl_6 *  xgap2\n          + y_egsl_7 *  xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_egsl(1)",
              "cf_value": 0.0003682770277494773,
              "t_stat": 1.08194946630109
            },
            {
              "cf_name": "y_egsl(2)",
              "cf_value": -0.1114151303946257,
              "t_stat": -4.177603739023518
            },
            {
              "cf_name": "y_egsl(3)",
              "cf_value": 0.1562467669415557,
              "t_stat": 2.36234805920394
            },
            {
              "cf_name": "y_egsl(4)",
              "cf_value": 0.02155815410956755,
              "t_stat": 0.3233094126515908
            },
            {
              "cf_name": "y_egsl(5)",
              "cf_value": 0.7449614274122569,
              "t_stat": 7.035416145308151
            },
            {
              "cf_name": "y_egsl(6)",
              "cf_value": -0.001432565493088224,
              "t_stat": -4.064970298959088
            },
            {
              "cf_name": "y_egsl(7)",
              "cf_value": 0.001765173794440745,
              "t_stat": 5.015780127968173
            }
          ],
          "rhs_eq_var": [
            "egsl",
            "egslt",
            "xgap2"
          ],
          "estimation_statistics": {
            "F_statistic": 69.9384552423935,
            "adjusted_r_squared": 0.6622004179834101,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 2.017204232337447,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 6.23722918965985e-47,
            "r_squared": 0.6718060933014174,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.002988434914740815
          }
        },
        "kfcalc": 1,
        "stochastic_type": "GV"
      },
      {
        "name": "egsln",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "S&amp;L government employee compensation, current $",
        "standard_equation": {
          "eviews_equation": "egsln - egsln_aerr = .01 * pgsl * egsl",
          "python_equation": "egsln - egsln_aerr = .01 * pgsl * egsl",
          "rhs_eq_var": [
            "egsl",
            "pgsl"
          ]
        }
      },
      {
        "name": "egslt",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "S&amp;L government employee compensation, cw 2012$, trend",
        "standard_equation": {
          "eviews_equation": "d( log(egslt), 0, 1 ) - egslt_aerr\n                    = y_egslt(1)\n                    + y_egslt(2) * log(.01*pgsl(-1)*egslt(-1)/xgdptn(-1))\n                    + y_egslt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "python_equation": "( log(egslt) - ( log(egslt(-1)))) - egslt_aerr\n                    = y_egslt_1\n                    + y_egslt_2 * log(.01*pgsl(-1)*egslt(-1)/xgdptn(-1))\n                    + y_egslt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "coeff": [
            {
              "cf_name": "y_egslt(1)",
              "cf_value": -0.259779
            },
            {
              "cf_name": "y_egslt(2)",
              "cf_value": -0.1
            },
            {
              "cf_name": "y_egslt(3)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "egslt",
            "hggdpt",
            "pgsl",
            "xgdptn"
          ]
        }
      },
      {
        "name": "eh",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Residential investment expenditures, cw 2012$",
        "description": "Household investment in residential structures is modeled using the\npolynomial adjustment cost (PAC) framework, whose general structure is\nshown below in the PAC Overview section.  To translate the general PAC\nspecification into the form in which it appears in the EH equation,\nassociate log(EH) with y, log(QEH) with y*, and ZEH with the expected\nweighted sum of future &amp;Delta;y*.  The order of adjustment costs (m)\nis 3.\n\nBesides the standard PAC terms, the equation also includes the\nfirst lag of the change in the nominal mortgage rate.  This term is\nincluded to capture (approximately) the temporary effects of\ndownpayment requirements and other borrowing constraints on housing\ninvestment when nominal interest rates change.  A shift in the\ncoefficient on this term is allowed between 1982:Q4 and 1983:Q1,\nbecause the final repeal of Reg. Q in the early 1980s changed the\nsensitivity of residential construction to interest rates.\n\nPAC Overview: Let y denote the decision variable and y* its desired\nlevel in the absence of adjustment frictions.  The decision rule\nderived from the PAC Euler equation has the following form.\n\n(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -\n      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;\n      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;\n\nThe order of adjustment costs is given by parameter m.  The\nforward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the\nestimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount\nfactor (0.98).  Estimation imposes the growth neutrality restriction\n&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +\n&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,\nsee &lt;a href=\"pac_basics.pdf\"&gt;Pac Basics&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "dlog(eh)  - eh_aerr =\n           y_eh(1) * log(qeh(-1)/eh(-1))\n          + y_eh(2) * dlog(eh(-1))\n          + y_eh(3) * dlog(eh(-2))\n          + y_eh(4) * zeh\n          + y_eh(5) * d(rme(-1))\n          + y_eh(6) * d83 * d(rme(-1))",
          "python_equation": "(log(eh) - log(eh(-1)))  - eh_aerr =\n           y_eh_1 * log(qeh(-1)/eh(-1))\n          + y_eh_2 * (log(eh(-1)) - log(eh(-2)))\n          + y_eh_3 * (log(eh(-2)) - log(eh(-3)))\n          + y_eh_4 * zeh\n          + y_eh_5 * (rme(-1) - (rme(-2)))\n          + y_eh_6 * d83 * (rme(-1) - (rme(-2)))",
          "coeff": [
            {
              "cf_name": "y_eh(1)",
              "cf_value": 0.01309931436163227,
              "t_stat": 1.021925590223822
            },
            {
              "cf_name": "y_eh(2)",
              "cf_value": 0.370727139760127,
              "t_stat": 5.613456654699126
            },
            {
              "cf_name": "y_eh(3)",
              "cf_value": 0.206060944066708,
              "t_stat": 3.188713674802293
            },
            {
              "cf_name": "y_eh(4)",
              "cf_value": 1
            },
            {
              "cf_name": "y_eh(5)",
              "cf_value": -0.05620618046332654,
              "t_stat": -6.560182290174185
            },
            {
              "cf_name": "y_eh(6)",
              "cf_value": 0.02793327971442171,
              "t_stat": 2.64825780259417
            }
          ],
          "rhs_eq_var": [
            "d83",
            "eh",
            "qeh",
            "rme",
            "zeh"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.4860523343086243,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 2.134915590286255,
            "method": "Least Squares",
            "r_squared": 0.4968722760677338,
            "sample_end": "2017Q4",
            "sample_start": "1970Q2",
            "se_of_regression": 0.03285151347517968
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "ehn",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Residential investment expenditures",
        "standard_equation": {
          "eviews_equation": "ehn - ehn_aerr = .01 * phr * pxp * eh",
          "python_equation": "ehn - ehn_aerr = .01 * phr * pxp * eh",
          "rhs_eq_var": [
            "eh",
            "phr",
            "pxp"
          ]
        }
      },
      {
        "name": "ei",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "Change in private inventories, cw 2012$",
        "standard_equation": {
          "eviews_equation": "ei - ei_aerr = 4*d( ki, 0, 1 )",
          "python_equation": "ei - ei_aerr = 4*( ki - ( ki(-1)))",
          "rhs_eq_var": "ki"
        }
      },
      {
        "name": "ein",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Change in business inventories, current $",
        "standard_equation": {
          "eviews_equation": "ein - ein_aerr = .01*pxp*pkir*ei",
          "python_equation": "ein - ein_aerr = .01*pxp*pkir*ei",
          "rhs_eq_var": [
            "ei",
            "pkir",
            "pxp"
          ]
        }
      },
      {
        "name": "em",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Imports of goods and services, cw 2012$",
        "description": "The volume of total imports is approximated by the Divisia aggregate of\noil and non-oil imports.",
        "standard_equation": {
          "eviews_equation": "log(em) - em_aerr = log(em(-1))\n                  + .5 * (emon/emn + emon(-1)/emn(-1)) * d(log(emo), 0, 1)\n                  + .5 * (empn/emn + empn(-1)/emn(-1)) * d(log(emp), 0, 1)",
          "python_equation": "log(em) - em_aerr = log(em(-1))\n                  + .5 * (emon/emn + emon(-1)/emn(-1)) * (log(emo) - (log(emo(-1))))\n                  + .5 * (empn/emn + empn(-1)/emn(-1)) * (log(emp) - (log(emp(-1))))",
          "rhs_eq_var": [
            "em",
            "emn",
            "emo",
            "emon",
            "emp",
            "empn"
          ]
        }
      },
      {
        "name": "emn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Imports of goods and services, current $",
        "standard_equation": {
          "eviews_equation": "emn - emn_aerr = emon + empn",
          "python_equation": "emn - emn_aerr = emon + empn",
          "rhs_eq_var": [
            "emon",
            "empn"
          ]
        }
      },
      {
        "name": "emo",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Imports of goods and services ex. petroleum, cw 2012$",
        "description": "The equation for non-petroleum imports has an error-correction\nformat.  In the long run, the volume of imports depends on the level\nof real domestic absorption with an elasticity of one, the relative\nprice of non-oil imports with an elasticity of minus one, and an\nexogenous trend.  Historical values of the trend (UEMOT) are measured\nby applying the HP filter to the ratio of nominal imports to nominal\nabsorption.  In the short-run, imports respond strongly to the first\ndifference of the output gap.  The effect of large dock strikes in the\n1960s and 1970s is removed by including a dummy constructed by Peter\nIsard (IFDP No. 60, 1975).",
        "standard_equation": {
          "eviews_equation": "dlog(emo)  - emo_aerr =\n           y_emo(1)\n          + y_emo(2) * log(emo(-1)*(pmo(-1)/100)/(uemot(-1)*xgdpn(-1)))\n          + y_emo(3) * (xgap2-xgap2(-1))/100\n          + y_emo(4) * (xgap2(-1)-xgap2(-2))/100\n          + y_emo(5)* log(ddockm)\n          + y_emo(6) * dlog(ddockm)",
          "python_equation": "(log(emo) - log(emo(-1)))  - emo_aerr =\n           y_emo_1\n          + y_emo_2 * log(emo(-1)*(pmo(-1)/100)/(uemot(-1)*xgdpn(-1)))\n          + y_emo_3 * (xgap2-xgap2(-1))/100\n          + y_emo_4 * (xgap2(-1)-xgap2(-2))/100\n          + y_emo_5* log(ddockm)\n          + y_emo_6 * (log(ddockm) - log(ddockm(-1)))",
          "coeff": [
            {
              "cf_name": "y_emo(1)",
              "cf_value": 0.01620546980581163,
              "t_stat": 12.00577790916384
            },
            {
              "cf_name": "y_emo(2)",
              "cf_value": -0.1807104996815989,
              "t_stat": -6.263913586210242
            },
            {
              "cf_name": "y_emo(3)",
              "cf_value": 1.358186927724613,
              "t_stat": 5.04013727029909
            },
            {
              "cf_name": "y_emo(4)",
              "cf_value": 1.637077186962015,
              "t_stat": 6.297372607318618
            },
            {
              "cf_name": "y_emo(5)",
              "cf_value": 0.3188307105827468,
              "t_stat": 2.587561167107604
            },
            {
              "cf_name": "y_emo(6)",
              "cf_value": 0.4046942138546456,
              "t_stat": 5.221652020980673
            }
          ],
          "rhs_eq_var": [
            "ddockm",
            "emo",
            "pmo",
            "uemot",
            "xgap2",
            "xgdpn"
          ],
          "estimation_statistics": {
            "F_statistic": 86.92032917224401,
            "adjusted_r_squared": 0.6706221387921456,
            "date": "08/30/18   Time: 10:00",
            "durbin_watson": 1.758803164770481,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 8.006632123968194e-49,
            "r_squared": 0.6784273013800095,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.01950879624852766
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "emon",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Imports of goods and services ex. petroleum",
        "standard_equation": {
          "eviews_equation": "emon - emon_aerr = .01 * pmo * emo",
          "python_equation": "emon - emon_aerr = .01 * pmo * emo",
          "rhs_eq_var": [
            "emo",
            "pmo"
          ]
        }
      },
      {
        "name": "emp",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Petroleum imports, cw 2012$",
        "description": "The deviation of the ratio of EMP to GDP from a long-run component\n(EMPTRT) is a linear function of its price relative to the business output deflator and\nreal activity (as captured by XGAP2).",
        "standard_equation": {
          "eviews_equation": "log(emp/xgdp) - emp_aerr = log(emptrt)\n                           + y_emp(1)*d(log(pmp/pxb))\n                           + y_emp(2)*xgap2(-1)",
          "python_equation": "log(emp/xgdp) - emp_aerr = log(emptrt)\n                           + y_emp_1*(log(pmp/pxb) - (log(pmp(-1)/pxb(-1))))\n                           + y_emp_2*xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_emp(1)",
              "cf_value": 0.048026,
              "t_stat": 0.670182
            },
            {
              "cf_name": "y_emp(2)",
              "cf_value": 0.022115,
              "t_stat": 6.39253
            }
          ],
          "rhs_eq_var": [
            "emptrt",
            "pmp",
            "pxb",
            "xgap2"
          ]
        },
        "stochastic_type": "OT"
      },
      {
        "name": "empn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Petroleum imports, current $",
        "standard_equation": {
          "eviews_equation": "empn - empn_aerr = .01*pmp*emp",
          "python_equation": "empn - empn_aerr = .01*pmp*emp",
          "rhs_eq_var": [
            "emp",
            "pmp"
          ]
        }
      },
      {
        "name": "emptrt",
        "equation_type": "Exogenous",
        "definition": "Oil imports to GDP ratio (Trend)",
        "description": "This variable is assumed to be exogenous.",
        "exogenous_projection": 2
      },
      {
        "name": "ex",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Exports of goods and services, cw 2012$",
        "description": "Exports is modeled in an error-correction format.  In the long run,\nthe volume of exports depends on foreign real GDP (FGDP) with an\nelasticity of one and the price of exports relative to foreign prices\n(PXR*PXP*FPX/FPC) with an elasticity of minus one.  A high short-run\nincome elasticity is captured by the positive estimated coefficients\non the first difference of the foreign output gap (FXGAP).  The effect\nof large dock strikes in the 1960s and 1970s is removed by dummying\nout affected quarters.",
        "standard_equation": {
          "eviews_equation": "dlog(ex)  - ex_aerr =\n           y_ex(1)\n          + y_ex(2) * log(ex(-1)*(pxr(-1)*pxp(-1)*fpx(-1))/(fgdp(-1)*fpc(-1)))\n          + y_ex(3) * (fxgap - fxgap(-1))/100\n          + y_ex(4) * (fxgap(-1) - fxgap(-2))/100\n          + y_ex(5) * ddockx",
          "python_equation": "(log(ex) - log(ex(-1)))  - ex_aerr =\n           y_ex_1\n          + y_ex_2 * log(ex(-1)*(pxr(-1)*pxp(-1)*fpx(-1))/(fgdp(-1)*fpc(-1)))\n          + y_ex_3 * (fxgap - fxgap(-1))/100\n          + y_ex_4 * (fxgap(-1) - fxgap(-2))/100\n          + y_ex_5 * ddockx",
          "coeff": [
            {
              "cf_name": "y_ex(1)",
              "cf_value": 0.8398526775741691,
              "t_stat": 5.756781111929966
            },
            {
              "cf_name": "y_ex(2)",
              "cf_value": -0.1077278728634364,
              "t_stat": -5.667761332461509
            },
            {
              "cf_name": "y_ex(3)",
              "cf_value": 1.481642245331822,
              "t_stat": 5.45635384730917
            },
            {
              "cf_name": "y_ex(4)",
              "cf_value": 1.027448537481708,
              "t_stat": 3.879387000765371
            },
            {
              "cf_name": "y_ex(5)",
              "cf_value": 1.015857050459678,
              "t_stat": 5.391491115569122
            }
          ],
          "rhs_eq_var": [
            "ddockx",
            "ex",
            "fgdp",
            "fpc",
            "fpx",
            "fxgap",
            "pxp",
            "pxr"
          ],
          "estimation_statistics": {
            "F_statistic": 48.11935837837932,
            "adjusted_r_squared": 0.5128952592039486,
            "date": "08/30/18   Time: 10:00",
            "durbin_watson": 2.170896629285285,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 3.010763042352271e-27,
            "r_squared": 0.5237802813446426,
            "sample_end": "2017Q4",
            "sample_start": "1973Q1",
            "se_of_regression": 0.01646626290013223
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "exn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Exports of goods and services, current $",
        "standard_equation": {
          "eviews_equation": "exn - exn_aerr = .01*pxp*pxr*ex",
          "python_equation": "exn - exn_aerr = .01*pxp*pxr*ex",
          "rhs_eq_var": [
            "ex",
            "pxp",
            "pxr"
          ]
        }
      },
      {
        "name": "fcbn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "US current account balance, current $",
        "description": "The current account balance is equal to net exports (EXN - EMN) plus\nnet foreign investment income (FYNIN) and a discrepancy term (FCBRN).",
        "standard_equation": {
          "eviews_equation": "fcbn - fcbn_aerr = exn - emn + fynin + fcbrn",
          "python_equation": "fcbn - fcbn_aerr = exn - emn + fynin + fcbrn",
          "rhs_eq_var": [
            "emn",
            "exn",
            "fcbrn",
            "fynin"
          ]
        }
      },
      {
        "name": "fcbrn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "US current account balance residual, current $",
        "description": "The discrepancy in the current account balance is assumed to\nbe proportional to nominal potential output.",
        "standard_equation": {
          "eviews_equation": "fcbrn - fcbrn_aerr = ufcbr*pxb*xbt/100",
          "python_equation": "fcbrn - fcbrn_aerr = ufcbr*pxb*xbt/100",
          "rhs_eq_var": [
            "pxb",
            "ufcbr",
            "xbt"
          ]
        }
      },
      {
        "name": "fgdp",
        "equation_type": "Identity",
        "sector": "Foreign Activity",
        "definition": "Foreign aggregate GDP (world, bilateral export weights)",
        "description": "The level of foreign GDP is determined via the identity that\nlinks it to the level of potential foreign output (FGDPT) and\nthe foreign output gap (FXGAP).",
        "standard_equation": {
          "eviews_equation": "fgdp - fgdp_aerr = fgdpt*exp(fxgap/100)",
          "python_equation": "fgdp - fgdp_aerr = fgdpt*exp(fxgap/100)",
          "rhs_eq_var": [
            "fgdpt",
            "fxgap"
          ]
        }
      },
      {
        "name": "fgdpt",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign aggregate GDP (world, bilateral export weights), trend",
        "description": "In simulations, the level of trend foreign GDP moves in proportion with\nlevel of U.S potential GDP in the long run.  In the short run, the\nrate of growth of the foreign trend varies one-for-one with the rate of growth\nof U.S. potential output.",
        "standard_equation": {
          "eviews_equation": "d( log(fgdpt), 0, 1 ) - fgdpt_aerr\n                    = y_fgdpt(1)\n                    + y_fgdpt(2) * log(fgdpt(-1)/xgdpt(-1))\n                    + y_fgdpt(3) * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "python_equation": "( log(fgdpt) - ( log(fgdpt(-1)))) - fgdpt_aerr\n                    = y_fgdpt_1\n                    + y_fgdpt_2 * log(fgdpt(-1)/xgdpt(-1))\n                    + y_fgdpt_3 * (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)) / 1600",
          "coeff": [
            {
              "cf_name": "y_fgdpt(1)",
              "cf_value": -0.458264
            },
            {
              "cf_name": "y_fgdpt(2)",
              "cf_value": -0.1
            },
            {
              "cf_name": "y_fgdpt(3)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "fgdpt",
            "hggdpt",
            "xgdpt"
          ]
        }
      },
      {
        "name": "fnicn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Gross stock of claims of US residents on the rest of the world, current $",
        "standard_equation": {
          "eviews_equation": "d(fnicn, 0, 1)/xgdptn - fnicn_aerr = .54 * d( log(fpc), 0, 1)*fnicn(-1)/xgdptn\n                                 - .67 * d( log(fpx), 0, 1)*fnicn(-1)/xgdptn\n                                 + rfnict",
          "python_equation": "(fnicn - (fnicn(-1)))/xgdptn - fnicn_aerr = .54 * ( log(fpc) - ( log(fpc(-1))))*fnicn(-1)/xgdptn\n                                 - .67 * ( log(fpx) - ( log(fpx(-1))))*fnicn(-1)/xgdptn\n                                 + rfnict",
          "rhs_eq_var": [
            "fnicn",
            "fpc",
            "fpx",
            "rfnict",
            "xgdptn"
          ]
        }
      },
      {
        "name": "fniln",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Gross stock of liabilities of US residents to the rest of the world, current $",
        "standard_equation": {
          "eviews_equation": "fniln - fniln_aerr = fnicn - fnin",
          "python_equation": "fniln - fniln_aerr = fnicn - fnin",
          "rhs_eq_var": [
            "fnicn",
            "fnin"
          ]
        }
      },
      {
        "name": "fnin",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Net stock of claims of US residents on the rest of the world, current $",
        "description": "The change in the net foreign investment position is equal to the\nthe sum of the current account balance expressed at a quarterly rate,\nestimates of capital gains and losses on the gross investment\npositions due to price and exchange rate changes, and a residual term.",
        "standard_equation": {
          "eviews_equation": "d( fnin, 0, 1 ) - fnin_aerr = .25*fcbn\n                         + .54 * (d( log(fpc), 0, 1) * fnicn(-1))\n                         - .32 * (d( log(pgdp), 0, 1) * fniln(-1))\n                         - .67 * (d( log(fpx), 0, 1) * fnicn(-1))\n                         + .06 * (d( log(fpx), 0, 1) * fniln(-1))\n                         + fnirn",
          "python_equation": "( fnin - ( fnin(-1))) - fnin_aerr = .25*fcbn\n                         + .54 * (( log(fpc) - ( log(fpc(-1)))) * fnicn(-1))\n                         - .32 * (( log(pgdp) - ( log(pgdp(-1)))) * fniln(-1))\n                         - .67 * (( log(fpx) - ( log(fpx(-1)))) * fnicn(-1))\n                         + .06 * (( log(fpx) - ( log(fpx(-1)))) * fniln(-1))\n                         + fnirn",
          "rhs_eq_var": [
            "fcbn",
            "fnicn",
            "fniln",
            "fnirn",
            "fpc",
            "fpx",
            "pgdp"
          ]
        }
      },
      {
        "name": "fnirn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Net stock of claims of US residents on the rest of the world, residual",
        "standard_equation": {
          "eviews_equation": "fnirn - fnirn_aerr = ufnir * xgdpn",
          "python_equation": "fnirn - fnirn_aerr = ufnir * xgdpn",
          "rhs_eq_var": [
            "ufnir",
            "xgdpn"
          ]
        }
      },
      {
        "name": "fpc",
        "equation_type": "Identity",
        "sector": "Foreign Activity",
        "definition": "Foreign aggregate consumer price (G39, import/export trade weights)",
        "standard_equation": {
          "eviews_equation": "fpc - fpc_aerr = fpc(-1)*exp(fpic/400)",
          "python_equation": "fpc - fpc_aerr = fpc(-1)*exp(fpic/400)",
          "rhs_eq_var": [
            "fpc",
            "fpic"
          ]
        }
      },
      {
        "name": "fpi10",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign consumer price inflation (G10)",
        "description": "Foreign CPI inflation is a function of a weighted average of past\nand trend foreign inflation, the foreign output gap, and current and\nlagged changes in the relative price of oil.  Historical values of\ntrend inflation (FPITRG) are measured as a step function whose value\nsince 1991 is 2.1 percent.",
        "standard_equation": {
          "eviews_equation": "fpi10  - fpi10_aerr =\n           y_fpi10(1) * ( ( fpi10(-1) +  fpi10(-2) +  fpi10(-3) +  fpi10(-4))  / 4 )\n          + y_fpi10(2) * fpitrg\n          + y_fpi10(3) * fxgap(-1)",
          "python_equation": "fpi10  - fpi10_aerr =\n           y_fpi10_1 * ( ( fpi10(-1) +  fpi10(-2) +  fpi10(-3) +  fpi10(-4))  / 4 )\n          + y_fpi10_2 * fpitrg\n          + y_fpi10_3 * fxgap(-1)",
          "coeff": [
            {
              "cf_name": "y_fpi10(1)",
              "cf_value": 0.6279749057317539,
              "t_stat": 10.47566394155453
            },
            {
              "cf_name": "y_fpi10(2)",
              "cf_value": 0.3720250942682461
            },
            {
              "cf_name": "y_fpi10(3)",
              "cf_value": 0.3221458278398038,
              "t_stat": 4.279968134267354
            }
          ],
          "rhs_eq_var": [
            "fpi10",
            "fpitrg",
            "fxgap"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.8488272427000629,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.236559159898099,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.8495719360857767,
            "sample_end": "2017Q4",
            "sample_start": "1967Q1",
            "se_of_regression": 1.30442200872555
          }
        }
      },
      {
        "name": "fpi10t",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign consumer price inflation, trend (G10)",
        "description": "The trend component of foreign inflation adjusts at 5 percent\nper quarter to movements in actual foreign inflation.",
        "standard_equation": {
          "eviews_equation": "fpi10t-fpi10t_aerr = y_fpi10t(1) * fpi10t(-1)\n                   + y_fpi10t(2) * fpi10",
          "python_equation": "fpi10t-fpi10t_aerr = y_fpi10t_1 * fpi10t(-1)\n                   + y_fpi10t_2 * fpi10",
          "coeff": [
            {
              "cf_name": "y_fpi10t(1)",
              "cf_value": 0.95
            },
            {
              "cf_name": "y_fpi10t(2)",
              "cf_value": 0.05
            }
          ],
          "rhs_eq_var": [
            "fpi10",
            "fpi10t"
          ]
        }
      },
      {
        "name": "fpic",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign consumer price inflation (G39, bilateral export trade weights)",
        "description": "In the long run, foreign consumer price inflation as measured\non a G39 basis moves one for one with foreign inflation as\nmeasured on a G10 basis.",
        "standard_equation": {
          "eviews_equation": "fpic  - fpic_aerr =\n           y_fpic(1)\n          + y_fpic(2) * fpi10\n          + y_fpic(3) * fpic(-1)",
          "python_equation": "fpic  - fpic_aerr =\n           y_fpic_1\n          + y_fpic_2 * fpi10\n          + y_fpic_3 * fpic(-1)",
          "coeff": [
            {
              "cf_name": "y_fpic(1)",
              "cf_value": 2.027196898567632,
              "t_stat": 5.889710300303862
            },
            {
              "cf_name": "y_fpic(2)",
              "cf_value": 0.6788298801616212,
              "t_stat": 10.63176207479252
            },
            {
              "cf_name": "y_fpic(3)",
              "cf_value": 0.3211701198383788
            }
          ],
          "rhs_eq_var": [
            "fpi10",
            "fpic"
          ],
          "estimation_statistics": {
            "F_statistic": 170.7908887475116,
            "adjusted_r_squared": 0.4458901033740165,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 2.125180754345748,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 5.927601166027004e-29,
            "r_squared": 0.4485162166281681,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 4.173824408173405
          }
        }
      },
      {
        "name": "fpitrg",
        "equation_type": "Exogenous",
        "definition": "Foreign target consumer price inflation (G10)",
        "exogenous_projection": 2
      },
      {
        "name": "fpx",
        "equation_type": "Identity",
        "sector": "Foreign Activity",
        "definition": "Nominal exchange rate (G39, import/export trade weights)",
        "standard_equation": {
          "eviews_equation": "fpx - fpx_aerr = fpxr*fpc/pcpi",
          "python_equation": "fpx - fpx_aerr = fpxr*fpc/pcpi",
          "rhs_eq_var": [
            "fpc",
            "fpxr",
            "pcpi"
          ]
        }
      },
      {
        "name": "fpxr",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Real exchange rate (G39, import/export trade weights)",
        "description": "The real exchange rate is determined via an open interest parity\ncondition based on real bond rates, augmented with a term in the ratio\nof the net stock of U.S. claims on the rest of the world to U.S. GDP\nthat captures country risk.  The equation is written as an identity\nthrough the inclusion of a multiplicative residual, FPXRR.",
        "standard_equation": {
          "eviews_equation": "log(fpxr) - fpxr_aerr - log(fpxrr) =\n                         y_fpxr(1)*(rg10-zpi10f-frl10+fpi10t)\n                       + y_fpxr(2)*(fnin/xgdpn)",
          "python_equation": "log(fpxr) - fpxr_aerr - log(fpxrr) =\n                         y_fpxr_1*(rg10-zpi10f-frl10+fpi10t)\n                       + y_fpxr_2*(fnin/xgdpn)",
          "coeff": [
            {
              "cf_name": "y_fpxr(1)",
              "cf_value": 0.048
            },
            {
              "cf_name": "y_fpxr(2)",
              "cf_value": 0.5
            }
          ],
          "rhs_eq_var": [
            "fnin",
            "fpi10t",
            "frl10",
            "rg10",
            "xgdpn",
            "zpi10f"
          ]
        }
      },
      {
        "name": "fpxrr",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Real exchange rate residual",
        "description": "The unexplained component of the exchange rate error-corrects\nto its long-run exogenous trend (FPXRRT).",
        "standard_equation": {
          "eviews_equation": "d( log(fpxrr), 0, 1 )   - fpxrr_aerr =\n           y_fpxrr(1) * log(fpxrrt(-1)/fpxrr(-1))\n          + y_fpxrr(2) * d( log(fpxrr(-1)), 0, 1 ) + (1\n          -y_fpxrr(2)) * d( log(fpxrrt), 0, 1 )",
          "python_equation": "( log(fpxrr) - ( log(fpxrr(-1))))   - fpxrr_aerr =\n           y_fpxrr_1 * log(fpxrrt(-1)/fpxrr(-1))\n          + y_fpxrr_2 * ( log(fpxrr(-1)) - ( log(fpxrr(-2)))) + (1\n          -y_fpxrr_2) * ( log(fpxrrt) - ( log(fpxrrt(-1))))",
          "coeff": [
            {
              "cf_name": "y_fpxrr(1)",
              "cf_value": 0.02744058231523356,
              "t_stat": 2.115111736109819
            },
            {
              "cf_name": "y_fpxrr(2)",
              "cf_value": 0.2110896761767876,
              "t_stat": 3.14854653066831
            }
          ],
          "rhs_eq_var": [
            "fpxrr",
            "fpxrrt"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.05575684888656729,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.996306086764864,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.06023193491080159,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.02843071520746695
          }
        },
        "kfcalc": 1,
        "stochastic_type": "RW"
      },
      {
        "name": "fpxrrt",
        "equation_type": "Exogenous",
        "definition": "Real exchange rate residual, trend",
        "exogenous_projection": 2
      },
      {
        "name": "frl10",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign long-term interest rate (G10)",
        "description": "The foreign long-term interest rate (FRL10) is modeled using\na reduced-form error-correction specification in which the long rate\nconverges to the foreign short-term interest rate plus a constant\npremium.",
        "standard_equation": {
          "eviews_equation": "frl10 - frl10(-1)  - frl10_aerr =\n           y_frl10(1)\n          + y_frl10(2) * (frl10(-1) - frs10(-1))\n          + y_frl10(3) * (frl10(-1) - frl10(-2))\n          + y_frl10(4) * (frs10 - frs10(-1))\n          + y_frl10(5) * (fxgap - fxgap(-1))",
          "python_equation": "frl10 - frl10(-1)  - frl10_aerr =\n           y_frl10_1\n          + y_frl10_2 * (frl10(-1) - frs10(-1))\n          + y_frl10_3 * (frl10(-1) - frl10(-2))\n          + y_frl10_4 * (frs10 - frs10(-1))\n          + y_frl10_5 * (fxgap - fxgap(-1))",
          "coeff": [
            {
              "cf_name": "y_frl10(1)",
              "cf_value": 0.03753227212139513,
              "t_stat": 1.198193651482558
            },
            {
              "cf_name": "y_frl10(2)",
              "cf_value": -0.07704648128878298,
              "t_stat": -3.317417577767598
            },
            {
              "cf_name": "y_frl10(3)",
              "cf_value": 0.06550476702266197,
              "t_stat": 0.9542000140233379
            },
            {
              "cf_name": "y_frl10(4)",
              "cf_value": 0.369056454239088,
              "t_stat": 7.04367628207961
            },
            {
              "cf_name": "y_frl10(5)",
              "cf_value": 0.1245511812496244,
              "t_stat": 2.260499826314461
            }
          ],
          "rhs_eq_var": [
            "frl10",
            "frs10",
            "fxgap"
          ],
          "estimation_statistics": {
            "F_statistic": 23.10908881710404,
            "adjusted_r_squared": 0.3693522446467081,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.725859508488353,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 7.858401075972499e-15,
            "r_squared": 0.3860581454507688,
            "sample_end": "2017Q4",
            "sample_start": "1980Q1",
            "se_of_regression": 0.2955556050574863
          }
        }
      },
      {
        "name": "frs10",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign short-term interest rate (G10)",
        "description": "The foreign short-term interest rate (FRS10) is set either\naccording to a version of the Taylor rule (DFMPRR = 0), or as the sum\nof an exogenous real interest rate (RFRS10) and a four-quarter moving\naverage of foreign CPI inflation (DFMPRR = 1).",
        "standard_equation": {
          "eviews_equation": "frs10 - frs10_aerr = dfmprr * (y_frs10(1)\n                   + y_frs10(2) * frstar(-1)\n                   + y_frs10(3) * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)\n                   + y_frs10(4) * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4 - fpitrg)\n                   + y_frs10(5) * fxgap)\n                   + (1-dfmprr) * (rfrs10 +  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)",
          "python_equation": "frs10 - frs10_aerr = dfmprr * (y_frs10_1\n                   + y_frs10_2 * frstar(-1)\n                   + y_frs10_3 * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)\n                   + y_frs10_4 * ( ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4 - fpitrg)\n                   + y_frs10_5 * fxgap)\n                   + (1-dfmprr) * (rfrs10 +  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)",
          "coeff": [
            {
              "cf_name": "y_frs10(1)",
              "cf_value": 0
            },
            {
              "cf_name": "y_frs10(2)",
              "cf_value": 1
            },
            {
              "cf_name": "y_frs10(3)",
              "cf_value": 1
            },
            {
              "cf_name": "y_frs10(4)",
              "cf_value": 0.5
            },
            {
              "cf_name": "y_frs10(5)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "dfmprr",
            "fpi10",
            "fpitrg",
            "frstar",
            "fxgap",
            "rfrs10"
          ]
        }
      },
      {
        "name": "frstar",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Equilibrium real short-term interest rate used in foreign Taylor rule",
        "description": "The estimate of the foreign equilibrium real short-term interest\nrate used in the foreign Taylor rule is updated each period by\n5 percent of the gap between the ex post real short rate and the\nprior estimate.",
        "standard_equation": {
          "eviews_equation": "frstar - frstar_aerr = y_frstar(1) * frstar(-1)\n                     + y_frstar(2) * (frs10 -  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)",
          "python_equation": "frstar - frstar_aerr = y_frstar_1 * frstar(-1)\n                     + y_frstar_2 * (frs10 -  ( fpi10 +  fpi10(-1) +  fpi10(-2) +  fpi10(-3))  / 4)",
          "coeff": [
            {
              "cf_name": "y_frstar(1)",
              "cf_value": 0.95
            },
            {
              "cf_name": "y_frstar(2)",
              "cf_value": 0.05
            }
          ],
          "rhs_eq_var": [
            "fpi10",
            "frs10",
            "frstar"
          ]
        }
      },
      {
        "name": "ftcin",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Corporate taxes paid to rest of world, current $",
        "standard_equation": {
          "eviews_equation": "ftcin - ftcin_aerr = uftcin * ynicpn",
          "python_equation": "ftcin - ftcin_aerr = uftcin * ynicpn",
          "rhs_eq_var": [
            "uftcin",
            "ynicpn"
          ]
        }
      },
      {
        "name": "fxgap",
        "equation_type": "Behavioral",
        "sector": "Foreign Activity",
        "definition": "Foreign output gap (world, bilateral export weights)",
        "description": "The equation for the foreign output gap is a reduced-form IS\ncurve.  The gap depends on lags of the foreign output gap, the real\nshort-term foreign interest rate (FRS10 less a moving average of\nFPI10), and the U.S. output gap (XGAP2).  The coefficient on the\nreal short-term interest rate is set equal to the estimate from a\nsimilar equation estimated on U.S. data.",
        "standard_equation": {
          "eviews_equation": "fxgap   - fxgap_aerr =\n          + y_fxgap(1) *  fxgap(-1)\n          + y_fxgap(2) *  fxgap(-2)\n          + y_fxgap(3) * ((frs10(-1)-(fpi10(-1)+fpi10(-2)+fpi10(-3)+fpi10(-4))/4\n          + frs10(-2)-(fpi10(-2)+fpi10(-3)+fpi10(-4)+fpi10(-5))/4\n          + frs10(-3)-(fpi10(-3)+fpi10(-4)+fpi10(-5)+fpi10(-6))/4)/3 - frstar)\n          + y_fxgap(4) * xgap2(-1)",
          "python_equation": "fxgap   - fxgap_aerr =\n          + y_fxgap_1 *  fxgap(-1)\n          + y_fxgap_2 *  fxgap(-2)\n          + y_fxgap_3 * ((frs10(-1)-(fpi10(-1)+fpi10(-2)+fpi10(-3)+fpi10(-4))/4\n          + frs10(-2)-(fpi10(-2)+fpi10(-3)+fpi10(-4)+fpi10(-5))/4\n          + frs10(-3)-(fpi10(-3)+fpi10(-4)+fpi10(-5)+fpi10(-6))/4)/3 - frstar)\n          + y_fxgap_4 * xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_fxgap(1)",
              "cf_value": 1.290723676327916,
              "t_stat": 20.36464485848048
            },
            {
              "cf_name": "y_fxgap(2)",
              "cf_value": -0.4680091148746248,
              "t_stat": -7.759169476155495
            },
            {
              "cf_name": "y_fxgap(3)",
              "cf_value": -0.05
            },
            {
              "cf_name": "y_fxgap(4)",
              "cf_value": 0.03734559019022718,
              "t_stat": 2.646397225669924
            }
          ],
          "rhs_eq_var": [
            "fpi10",
            "frs10",
            "frstar",
            "fxgap",
            "xgap2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.8534372788148259,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.884952507051783,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.8548264989208465,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.4603926918414598
          }
        },
        "kfcalc": 1,
        "stochastic_type": "RW"
      },
      {
        "name": "fynicn",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Gross investment income received from the rest of the world, current $",
        "standard_equation": {
          "eviews_equation": "fynicn - fynicn_aerr = .01*rfynic*fnicn(-1)",
          "python_equation": "fynicn - fynicn_aerr = .01*rfynic*fnicn(-1)",
          "rhs_eq_var": [
            "fnicn",
            "rfynic"
          ]
        }
      },
      {
        "name": "fyniln",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Gross investment income paid to the rest of the world, current $",
        "standard_equation": {
          "eviews_equation": "fyniln - fyniln_aerr = .01*rfynil*fniln(-1)",
          "python_equation": "fyniln - fyniln_aerr = .01*rfynil*fniln(-1)",
          "rhs_eq_var": [
            "fniln",
            "rfynil"
          ]
        }
      },
      {
        "name": "fynin",
        "equation_type": "Identity",
        "sector": "Foreign Trade",
        "definition": "Net investment income received from the rest of the world, current $",
        "standard_equation": {
          "eviews_equation": "fynin - fynin_aerr = fynicn - fyniln",
          "python_equation": "fynin - fynin_aerr = fynicn - fyniln",
          "rhs_eq_var": [
            "fynicn",
            "fyniln"
          ]
        }
      },
      {
        "name": "gfdbtnp",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal government debt stock held by the public, current $",
        "standard_equation": {
          "eviews_equation": "gfdbtnp - gfdbtnp_aerr = ugfdbtp*(gfdbtnp(-1) - .25*gfsrpn)",
          "python_equation": "gfdbtnp - gfdbtnp_aerr = ugfdbtp*(gfdbtnp(-1) - .25*gfsrpn)",
          "rhs_eq_var": [
            "gfdbtnp",
            "ugfdbtp",
            "gfsrpn"
          ]
        }
      },
      {
        "name": "gfdbtn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal government debt stock, current $",
        "standard_equation": {
          "eviews_equation": "gfdbtn - gfdbtn_aerr = ugfdbt*gfdbtnp",
          "python_equation": "gfdbtn - gfdbtn_aerr = ugfdbt*gfdbtnp",
          "rhs_eq_var": [
            "gfdbtnp",
            "ugfdbt"
          ]
        }
      },
      {
        "name": "ugfdbtp",
        "equation_type": "Exogenous",
        "definition": "Federal government debt ratio",
        "exogenous_projection": 2
      },
      {
        "name": "ugfsrp",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal Government budget surplus, residual",
        "description": "",
        "standard_equation": {
          "eviews_equation": "ugfsrp - ugfsrp_aerr = y_ugfsrp(1)*(1-y_ugfsrp(2)) + y_ugfsrp(2)*ugfsrp(-1)",
          "python_equation": "ugfsrp - ugfsrp_aerr = y_ugfsrp_1*(1-y_ugfsrp_2) + y_ugfsrp_2*ugfsrp(-1)",
          "coeff": [
            {
              "cf_name": "y_ugfsrp(1)",
              "cf_value": 0.065666
            },
            {
              "cf_name": "y_ugfsrp(2)",
              "cf_value": 0.947688
            }
          ],
          "rhs_eq_var": "ugfsrp"
        },
        "stochastic_type": "NO"
      },
      {
        "name": "uleg",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Multiplicative factor for government civilian employment",
        "standard_equation": {
          "eviews_equation": "log(uleg) - uleg_aerr = log(uleg(-1)) - .1*(leg(-1)/lep(-1)-adjlegrt)",
          "python_equation": "log(uleg) - uleg_aerr = log(uleg(-1)) - .1*(leg(-1)/lep(-1)-adjlegrt)",
          "rhs_eq_var": [
            "adjlegrt",
            "uleg",
            "leg",
            "lep"
          ]
        }
      },
      {
        "name": "gfdrt",
        "equation_type": "Exogenous",
        "definition": "Federal government target debt-to-GDP ratio",
        "exogenous_projection": 2
      },
      {
        "name": "gfexpn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Government payments",
        "standard_equation": {
          "eviews_equation": "gfexpn - gfexpn_aerr = egfln + egfen + gtn + gfintn",
          "python_equation": "gfexpn - gfexpn_aerr = egfln + egfen + gtn + gfintn",
          "rhs_eq_var": [
            "egfen",
            "egfln",
            "gfintn",
            "gtn"
          ]
        }
      },
      {
        "name": "gfintn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal government net interest payments, current $",
        "standard_equation": {
          "eviews_equation": "gfintn - gfintn_aerr = rgfint*gfdbtn(-1)",
          "python_equation": "gfintn - gfintn_aerr = rgfint*gfdbtn(-1)",
          "rhs_eq_var": [
            "gfdbtn",
            "rgfint"
          ]
        }
      },
      {
        "name": "gfrecn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Government receipts and residual",
        "standard_equation": {
          "eviews_equation": "gfrecn - gfrecn_aerr = tpn + tcin + ugfsrp*xgdpn",
          "python_equation": "gfrecn - gfrecn_aerr = tpn + tcin + ugfsrp*xgdpn",
          "rhs_eq_var": [
            "ugfsrp",
            "tcin",
            "tpn",
            "xgdpn"
          ]
        }
      },
      {
        "name": "gfsrpn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Federal government budget surplus, current $",
        "standard_equation": {
          "eviews_equation": "gfsrpn - gfsrpn_aerr = tpn + tcin\n                   - egfln - egfen - gtn - gfintn\n                   + ugfsrp*xgdpn",
          "python_equation": "gfsrpn - gfsrpn_aerr = tpn + tcin\n                   - egfln - egfen - gtn - gfintn\n                   + ugfsrp*xgdpn",
          "rhs_eq_var": [
            "egfen",
            "egfln",
            "ugfsrp",
            "gfintn",
            "gtn",
            "tcin",
            "tpn",
            "xgdpn"
          ]
        }
      },
      {
        "name": "gfsrt",
        "equation_type": "Exogenous",
        "definition": "Federal government target surplus-to-GDP ratio",
        "exogenous_projection": 2
      },
      {
        "name": "gtn",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Federal government net transfer payments, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "gtn - gtn_aerr = .01*pgdp*gtr",
          "python_equation": "gtn - gtn_aerr = .01*pgdp*gtr",
          "rhs_eq_var": [
            "gtr",
            "pgdp"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "gtr",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Government net transfer payments, deflated by PGDP",
        "description": "",
        "standard_equation": {
          "eviews_equation": "gtr - gtr_aerr = (gtrd+gtrt)*xgdpt",
          "python_equation": "gtr - gtr_aerr = (gtrd+gtrt)*xgdpt",
          "rhs_eq_var": [
            "gtrd",
            "gtrt",
            "xgdpt"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "gtrd",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Deviation of ratio of government transfers to GDP from trend ratio",
        "description": "",
        "standard_equation": {
          "eviews_equation": "gtrd - gtrd_aerr = y_gtrd(2)*xgap2\n           + y_gtrd(3)* (xgap2(-1) +xgap2(-2) +xgap2(-3) +xgap2(-4))/4  + y_gtrd(1)*(gtrd(-1)\n           - y_gtrd(2)*xgap2(-1) - y_gtrd(3)* (xgap2(-2) +xgap2(-3) +xgap2(-4) +xgap2(-5))/4 )",
          "python_equation": "gtrd - gtrd_aerr = y_gtrd_2*xgap2\n           + y_gtrd_3* (xgap2(-1) +xgap2(-2) +xgap2(-3) +xgap2(-4))/4 + y_gtrd_1*(gtrd(-1)\n           - y_gtrd_2*xgap2(-1) - y_gtrd_3*(xgap2(-2) +xgap2(-3) +xgap2(-4) +xgap2(-5))/4 )",
          "coeff": [
            {
              "cf_name": "y_gtrd(1)",
              "cf_value": 0.862481931486,
              "t_stat": 23.94559
            },
            {
              "cf_name": "y_gtrd(2)",
              "cf_value": -0.000176387604876,
              "t_stat": -0.506846
            },
            {
              "cf_name": "y_gtrd(3)",
              "cf_value": -0.00143470943,
              "t_stat": -3.325702
            }
          ],
          "rhs_eq_var": [
            "gtrd",
            "xgap2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.811344,
            "date": "03/09/21   Time: 11:11",
            "durbin_watson": 2.415937,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.81324,
            "sample_end": "2019Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.002897
          }
        },
        "stochastic_type": "GV"
      },
      {
        "name": "gtrt",
        "equation_type": "Exogenous",
        "definition": "Government, trend ratio of transfer payments to GDP",
        "exogenous_projection": 2
      },
      {
        "name": "hgemp",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Petroleum imports, cw 2012$, trend growth rate",
        "standard_equation": {
          "eviews_equation": "hgemp - hgemp_aerr = y_hgemp(1) * hgemp(-1)\n                   + y_hgemp(2) * 400*log(emp/emp(-1))",
          "python_equation": "hgemp - hgemp_aerr = y_hgemp_1 * hgemp(-1)\n                   + y_hgemp_2 * 400*log(emp/emp(-1))",
          "coeff": [
            {
              "cf_name": "y_hgemp(1)",
              "cf_value": 0.9
            },
            {
              "cf_name": "y_hgemp(2)",
              "cf_value": 0.1
            }
          ],
          "rhs_eq_var": [
            "emp",
            "hgemp"
          ]
        }
      },
      {
        "name": "hggdp",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Growth rate of GDP, cw 2012$ (annual rate)",
        "standard_equation": {
          "eviews_equation": "hggdp - hggdp_aerr = 400*d( log(xgdp), 0, 1 )",
          "python_equation": "hggdp - hggdp_aerr = 400*( log(xgdp) - ( log(xgdp(-1))))",
          "rhs_eq_var": "xgdp"
        }
      },
      {
        "name": "hggdpt",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Trend growth rate of XGDP, cw 2012$ (annual rate)",
        "description": "The trend growth rate of GDP is the sum of the trend growth rates\nof business output and the stochastic trend component of potential GDP.\nBecause FRB/US permits separate log level and growth rate shocks, the\ntrend growth rate of GDP (HGGDPT) is different (and smoother) than the\ngrowth rate of potential GDP (400*del(log(XGDPT)).",
        "standard_equation": {
          "eviews_equation": "hggdpt - hggdpt_aerr = hxbt + huxb",
          "python_equation": "hggdpt - hggdpt_aerr = hxbt + huxb",
          "rhs_eq_var": [
            "huxb",
            "hxbt"
          ]
        }
      },
      {
        "name": "hgpbfir",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Trend growth rate of price of business investment (relative to PXB)",
        "standard_equation": {
          "eviews_equation": "hgpbfir - hgpbfir_aerr = .975*hgpbfir(-1)\n                       + .025*400*(log(pbfir*pxp/pxb / (pbfir(-1)*pxp(-1)/pxb(-1))))",
          "python_equation": "hgpbfir - hgpbfir_aerr = .975*hgpbfir(-1)\n                       + .025*400*(log(pbfir*pxp/pxb / (pbfir(-1)*pxp(-1)/pxb(-1))))",
          "rhs_eq_var": [
            "hgpbfir",
            "pbfir",
            "pxb",
            "pxp"
          ]
        }
      },
      {
        "name": "hgpcdr",
        "equation_type": "Exogenous",
        "definition": "Trend growth rate of price of consumer durable goods (relative to PCNIA)",
        "exogenous_projection": 2
      },
      {
        "name": "hgpkir",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Trend growth rate of PKIR",
        "standard_equation": {
          "eviews_equation": "hgpkir - hgpkir_aerr = y_hgpkir(1) * hgpkir(-1)\n                     + y_hgpkir(2) * 400*log(pkir/pkir(-1))",
          "python_equation": "hgpkir - hgpkir_aerr = y_hgpkir_1 * hgpkir(-1)\n                     + y_hgpkir_2 * 400*log(pkir/pkir(-1))",
          "coeff": [
            {
              "cf_name": "y_hgpkir(1)",
              "cf_value": 0.9
            },
            {
              "cf_name": "y_hgpkir(2)",
              "cf_value": 0.1
            }
          ],
          "rhs_eq_var": [
            "hgpkir",
            "pkir"
          ]
        }
      },
      {
        "name": "hgynid",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Growth rate of real after-tax corporate profits",
        "standard_equation": {
          "eviews_equation": "hgynid - hgynid_aerr = 400*d( log((ynicpn-tcin)*.5/pxb), 0, 1 )",
          "python_equation": "hgynid - hgynid_aerr = 400*( log((ynicpn-tcin)*.5/pxb) - ( log((ynicpn(-1)-tcin(-1))*.5/pxb(-1))))",
          "rhs_eq_var": [
            "pxb",
            "tcin",
            "ynicpn"
          ]
        }
      },
      {
        "name": "hks",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Growth rate of KS, cw 2012$ (compound annual rate)",
        "description": "The growth rate of capital services is modeled as a weighted\naverage of the growth rates of three capital stocks.  The weights are\nmeasures of income shares earned by each type of capital.  A residual\ncomponent, which makes the equation an identity, accounts for the use\nof partially aggregated capital stocks rather than disaggregated\ncapital stocks, omission of several types of capital (owner-occupied\nhousing, land), and approximation error in the constructed income\nshare weights.",
        "standard_equation": {
          "eviews_equation": "hks - hks_aerr = 400 * (ykbfin * d( log(kbfi), 0, 1 )\n                     +  ykin * d( log(ki), 0, 1 )) /\n                     (ykbfin + ykin) + hksr",
          "python_equation": "hks - hks_aerr = 400 * (ykbfin * ( log(kbfi) - ( log(kbfi(-1))))\n                     +  ykin * ( log(ki) - ( log(ki(-1))))) /\n                     (ykbfin + ykin) + hksr",
          "coeff": [
            {
              "cf_name": "y_hks(1)",
              "cf_value": 0.4543136031
            },
            {
              "cf_name": "y_hks(2)",
              "cf_value": 0.4847950762
            },
            {
              "cf_name": "y_hks(3)",
              "cf_value": 0.0608913208
            }
          ],
          "rhs_eq_var": [
            "hksr",
            "kbfi",
            "ki",
            "ykbfin",
            "ykin"
          ]
        }
      },
      {
        "name": "hksr",
        "equation_type": "Exogenous",
        "definition": "Residual growth of capital services",
        "exogenous_projection": 10
      },
      {
        "name": "hlept",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Trend growth rate of LEP (annual rate)",
        "description": "",
        "standard_equation": {
          "eviews_equation": "hlept - hlept_aerr = 400*hqlfpr + 400*d( log(n16), 0, 1)",
          "python_equation": "hlept - hlept_aerr = 400*hqlfpr + 400*( log(n16) - ( log(n16(-1))))",
          "rhs_eq_var": [
            "hqlfpr",
            "n16"
          ]
        }
      },
      {
        "name": "hlprdt",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Trend growth rate of output per hour",
        "standard_equation": {
          "eviews_equation": "hlprdt - hlprdt_aerr = hxbt - hlept - hqlww",
          "python_equation": "hlprdt - hlprdt_aerr = hxbt - hlept - hqlww",
          "rhs_eq_var": [
            "hlept",
            "hqlww",
            "hxbt"
          ]
        }
      },
      {
        "name": "hmfpt",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Trend growth rate of multifactor productivity",
        "description": "Trend multi-factor productivity follows a random walk with drift.\nThe drift term, HMFPT, is an AR(1) process.  As with all drift terms\nin FRB/US supply-side stochastic trends, HMFPT is assumed to be\nmean-reverting at a five percent quarterly rate.",
        "standard_equation": {
          "eviews_equation": "hmfpt - hmfpt_aerr = y_hmfpt(1) + y_hmfpt(2)*hmfpt(-1)",
          "python_equation": "hmfpt - hmfpt_aerr = y_hmfpt_1 + y_hmfpt_2*hmfpt(-1)",
          "coeff": [
            {
              "cf_name": "y_hmfpt(1)",
              "cf_value": 0.055
            },
            {
              "cf_name": "y_hmfpt(2)",
              "cf_value": 0.95
            }
          ],
          "rhs_eq_var": "hmfpt"
        },
        "stochastic_type": "ST"
      },
      {
        "name": "hqlfpr",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Drift component of change in QLFPR",
        "description": "The trend first difference of the workweek follows an AR(1)\nprocess.  HQLFPR is assumed to revert to a mean of zero at a five percent\nquarterly rate.",
        "standard_equation": {
          "eviews_equation": "hqlfpr - hqlfpr_aerr = y_hqlfpr(1) + y_hqlfpr(2)*hqlfpr(-1)",
          "python_equation": "hqlfpr - hqlfpr_aerr = y_hqlfpr_1 + y_hqlfpr_2*hqlfpr(-1)",
          "coeff": [
            {
              "cf_name": "y_hqlfpr(1)",
              "cf_value": 0
            },
            {
              "cf_name": "y_hqlfpr(2)",
              "cf_value": 0.95
            }
          ],
          "rhs_eq_var": "hqlfpr"
        },
        "stochastic_type": "LB"
      },
      {
        "name": "hqlww",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Trend growth rate of workweek",
        "description": "The trend growth rate of the workweek follows an AR(1) process.  As\nwith all drift terms in FRB/US supply-side stochastic trends, HQLWW is\nassumed to be mean-reverting at a five percent quarterly rate.",
        "standard_equation": {
          "eviews_equation": "hqlww - hqlww_aerr = y_hqlww(1) * hqlww(-1) + (1-y_hqlww(1)) * y_hqlww(2)",
          "python_equation": "hqlww - hqlww_aerr = y_hqlww_1 * hqlww(-1) + (1-y_hqlww_1) * y_hqlww_2",
          "coeff": [
            {
              "cf_name": "y_hqlww(1)",
              "cf_value": 0.95
            },
            {
              "cf_name": "y_hqlww(2)",
              "cf_value": -0.3129029344874886,
              "t_stat": 2.434482758761471
            }
          ],
          "rhs_eq_var": "hqlww"
        },
        "stochastic_type": "LB"
      },
      {
        "name": "huqpct",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Drift term in stochastic component of trend ratio of PCNIA to PXP",
        "standard_equation": {
          "eviews_equation": "huqpct - huqpct_aerr = y_huqpct(1) + y_huqpct(2)*huqpct(-1)",
          "python_equation": "huqpct - huqpct_aerr = y_huqpct_1 + y_huqpct_2*huqpct(-1)",
          "coeff": [
            {
              "cf_name": "y_huqpct(1)",
              "cf_value": 0
            },
            {
              "cf_name": "y_huqpct(2)",
              "cf_value": 0.95
            }
          ],
          "rhs_eq_var": "huqpct",
          "estimation_statistics": {
            "estimation_date": "August 2010",
            "sample_end": "-",
            "sample_start": "1962Q1"
          }
        }
      },
      {
        "name": "huxb",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Drift term in UXBT",
        "description": "The stochastic trend component of potential GDP, UXBT, follows a\nrandom walk with drift.  The drift term, HUXB, is an AR(1) process.\nAs with all drift terms in FRB/US supply-side stochastic trends,\nHUXB is assumed to be mean-reverting at a five percent quarterly\nrate.  In long-run simulations, the dummy variable DGLPRD can be set\nto 1.0 to ensure that potential GDP and potential business sector grow at the same\nrate.",
        "standard_equation": {
          "eviews_equation": "huxb  - huxb_aerr = (1-dglprd)*\n          (y_huxb(1)\n          + y_huxb(2)*huxb(-1))",
          "python_equation": "huxb  - huxb_aerr = (1-dglprd)*\n          (y_huxb_1\n          + y_huxb_2*huxb(-1))",
          "coeff": [
            {
              "cf_name": "y_huxb(1)",
              "cf_value": -0.01613974358626877,
              "t_stat": -440.0882498790051
            },
            {
              "cf_name": "y_huxb(2)",
              "cf_value": 0.95
            }
          ],
          "rhs_eq_var": [
            "dglprd",
            "huxb"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9998637240881884,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 0.06548263033956848,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9998637240881884,
            "sample_end": "2017Q4",
            "sample_start": "1966Q1",
            "se_of_regression": 0.0005289182166452496
          }
        }
      },
      {
        "name": "hxbt",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Trend rate of growth of XB  , cw 2012$ (annual rate)",
        "description": "Some of the components of potential output are modeled as stochastic\ntrends wth stochastic drift terms. Because both log level shocks and growth rate shocks\noccur in this framework, the trend rate of growth of such a component differs from the\ngrowth rate of its trend level. The trend rate of growth of business output is calculated\nusing the distinct trend rates of growth, rather than on the growth rate of trends, of\nmultifactor productivity (HMFPT) and those factor inputs that have trend growth rates\n(HLEPT, HQLWW). The imposed coefficients are the same as those in the production function\nfor the level of XBT. The trend growth rate of business sector output (HXBT) is smoother\nthan the growth rate of the level of potential adjusted business sector output\n(400*del(log(XBT))). As for the level equation, there is an explicit residual term (HXBTR)\nin the equation for potential growth.",
        "standard_equation": {
          "eviews_equation": "hxbt - hxbt_aerr =  .725*(hlept + hqlww + 400*d( log(lqualt), 0, 1 ))\n                  + .275*hks + hmfpt +hxbtr",
          "python_equation": "hxbt - hxbt_aerr =  .725*(hlept + hqlww + 400*( log(lqualt) - ( log(lqualt(-1)))))\n                  + .275*hks + hmfpt +hxbtr",
          "rhs_eq_var": [
            "hks",
            "hlept",
            "hmfpt",
            "hqlww",
            "hxbtr",
            "lqualt"
          ]
        }
      },
      {
        "name": "hxbtr",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Residual Factor (Trend rate of growth of XB)",
        "standard_equation": {
          "eviews_equation": "hxbtr - hxbtr_aerr = 0",
          "python_equation": "hxbtr - hxbtr_aerr = 0"
        }
      },
      {
        "name": "jccan",
        "equation_type": "Behavioral",
        "sector": "Nominal Income",
        "definition": "Consumption of fixed capital, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "jccan/xgdpn - jccan_aerr = y_jccan(1)*(1-y_jccan(2))\n\t + y_jccan(2)*jccan(-1)/xgdpn(-1)\n\t + (1-y_jccan(2))*pkbfir(-1)*kbfi(-1)*jrbfi*pxp(-1)*.01/xgdpn(-1)",
          "python_equation": "jccan/xgdpn - jccan_aerr = y_jccan_1*(1-y_jccan_2)\n\t + y_jccan_2*jccan(-1)/xgdpn(-1)\n\t + (1-y_jccan_2)*pkbfir(-1)*kbfi(-1)*jrbfi*pxp(-1)*.01/xgdpn(-1)",
          "coeff": [
            {
              "cf_name": "y_jccan(1)",
              "cf_value": 0.053902
            },
            {
              "cf_name": "y_jccan(2)",
              "cf_value": 0.821408
            }
          ],
          "rhs_eq_var": [
            "jccan",
            "jrbfi",
            "kbfi",
            "pkbfir",
            "pxp",
            "xgdpn"
          ]
        }
      },
      {
        "name": "jkcd",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Consumption of fixed capital, consumer durables",
        "standard_equation": {
          "eviews_equation": "jkcd - jkcd_aerr = jrcd * kcd(-1)",
          "python_equation": "jkcd - jkcd_aerr = jrcd * kcd(-1)",
          "rhs_eq_var": [
            "jrcd",
            "kcd"
          ]
        }
      },
      {
        "name": "jrbfi",
        "equation_type": "Exogenous",
        "definition": "Depreciation rate, business investment",
        "exogenous_projection": 3
      },
      {
        "name": "jrcd",
        "equation_type": "Exogenous",
        "definition": "Depreciation rate, consumer durables",
        "exogenous_projection": 3
      },
      {
        "name": "jrh",
        "equation_type": "Exogenous",
        "definition": "Depreciation rate, housing",
        "exogenous_projection": 3
      },
      {
        "name": "kbfi",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "Capital stock - BFI, 2012$",
        "standard_equation": {
          "eviews_equation": "kbfi - kbfi_aerr = (pbfir/pkbfir)*ebfi/4 + (1-jrbfi/4) * kbfi(-1)",
          "python_equation": "kbfi - kbfi_aerr = (pbfir/pkbfir)*ebfi/4 + (1-jrbfi/4) * kbfi(-1)",
          "rhs_eq_var": [
            "ebfi",
            "jrbfi",
            "kbfi",
            "pbfir",
            "pkbfir"
          ]
        }
      },
      {
        "name": "kcd",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Stock of consumer durables, cw 2012$",
        "standard_equation": {
          "eviews_equation": "kcd - kcd_aerr = .25*ecd + (1-jrcd/4)*kcd(-1)",
          "python_equation": "kcd - kcd_aerr = .25*ecd + (1-jrcd/4)*kcd(-1)",
          "rhs_eq_var": [
            "ecd",
            "jrcd",
            "kcd"
          ]
        }
      },
      {
        "name": "kh",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Stock of residential structures, cw 2012$",
        "standard_equation": {
          "eviews_equation": "kh - kh_aerr = .25*eh + (1-jrh/4)*kh(-1)",
          "python_equation": "kh - kh_aerr = .25*eh + (1-jrh/4)*kh(-1)",
          "rhs_eq_var": [
            "eh",
            "jrh",
            "kh"
          ]
        }
      },
      {
        "name": "ki",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Stock of private inventories, cw 2012$",
        "description": "The KI equation has an error-correction form in which the desired\ninventory-sales ratio (QKIR) is a random walk with drift.  The KI\nequation and the QKIR process are estimated using the Kalman Filter.\nThe secular downtrend in the inventory-sales ratio is reflected in an\nestimated value of the drift in QKIR that is negative.  In the KI\nequation, movements in the growth rate of final sales have temporary\neffects on inventories, but permanent effects on the\ninventory-sales ratio are precluded by restricting the coefficients on\nthe lagged growth rates of sales and inventories to sum to unity.",
        "standard_equation": {
          "eviews_equation": "dlog(ki) - ki_aerr =\n           y_ki(5)\n          + y_ki(1)*(log(qkir) - log(ki(-1)/xfs(-1)))\n          + y_ki(2)*(dlog(ki(-1))\n          -y_ki(5))\n          + y_ki(3)*dlog(xfs(-1))\n          + y_ki(4)*dlog(xfs(-2))",
          "python_equation": "(log(ki) - log(ki(-1))) - ki_aerr =\n           y_ki_5\n          + y_ki_1*(log(qkir) - log(ki(-1)/xfs(-1)))\n          + y_ki_2*((log(ki(-1)) - log(ki(-2)))\n          -y_ki_5)\n          + y_ki_3*(log(xfs(-1)) - log(xfs(-2)))\n          + y_ki_4*(log(xfs(-2)) - log(xfs(-3)))",
          "coeff": [
            {
              "cf_name": "y_ki(1)",
              "cf_value": 0.01469206254903638,
              "t_stat": 0.8308490188393236
            },
            {
              "cf_name": "y_ki(2)",
              "cf_value": 0.4567399290262596,
              "t_stat": 10.24095454815411
            },
            {
              "cf_name": "y_ki(3)",
              "cf_value": 0.236031927797704,
              "t_stat": 5.403767691568972
            },
            {
              "cf_name": "y_ki(4)",
              "cf_value": 0.3072281431760363
            },
            {
              "cf_name": "y_ki(5)",
              "cf_value": -0.00120624751419073,
              "t_stat": -2.709730009253576
            }
          ],
          "rhs_eq_var": [
            "ki",
            "qkir",
            "xfs"
          ],
          "estimation_statistics": {
            "date": "08/30/18   Time: 10:02",
            "method": "Maximum likelihood  (BFGS / Marquardt steps)",
            "sample_end": "2017Q4",
            "sample_start": "1960Q1"
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IS"
      },
      {
        "name": "ks",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "Capital services, 2012$",
        "standard_equation": {
          "eviews_equation": "log(ks) - ks_aerr = log(ks(-1)) + hks/400",
          "python_equation": "log(ks) - ks_aerr = log(ks(-1)) + hks/400",
          "rhs_eq_var": [
            "hks",
            "ks"
          ]
        }
      },
      {
        "name": "leg",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Government civilian employment ex. gov. enterprise",
        "description": "",
        "standard_equation": {
          "eviews_equation": "log(leg) - leg_aerr = log(uleg) + log(egfl+egsl) - log(lprdt)",
          "python_equation": "log(leg) - leg_aerr = log(uleg) + log(egfl+egsl) - log(lprdt)",
          "rhs_eq_var": [
            "egfl",
            "egsl",
            "uleg",
            "lprdt"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "leh",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Civilian employment (break adjusted)",
        "description": "Civilian employment from the household survey is the sum of\nbusiness employment (LEP), state and local government\nemployment (LES), federal government employment (LEF), and the\nemployment discrepancy (LEO).",
        "standard_equation": {
          "eviews_equation": "leh - leh_aerr = lep + leg + leo",
          "python_equation": "leh - leh_aerr = lep + leg + leo",
          "rhs_eq_var": [
            "leg",
            "leo",
            "lep"
          ]
        }
      },
      {
        "name": "leo",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Difference between household and business sector payroll employment, less government employment",
        "description": "LEO error corrects to the discrepancy between its lagged and\ndesired values and also varies counter-cyclically.  The desired value\nof LEO is the product of a desired ratio (QLEOR) and the equilibrium\nlabor force.  QLEOR is measured historically as the value of LEO that\nis consistent with equilibrium values of the labor force, employment\nin various sectors, and the unemployment rate.  In simulation, QLEOR\nis exogenous.",
        "standard_equation": {
          "eviews_equation": "log(leo)  - leo_aerr = log(qleor*qlf)\n          +  y_leo(1) * log(leo(-1)/(qleor(-1)*qlf(-1)))\n          +  y_leo(2) * xgap2(-1)",
          "python_equation": "log(leo)  - leo_aerr = log(qleor*qlf)\n          +  y_leo_1 * log(leo(-1)/(qleor(-1)*qlf(-1)))\n          +  y_leo_2 * xgap2(-1)",
          "coeff": [
            {
              "cf_name": "y_leo(1)",
              "cf_value": 0.7566675970336151
            },
            {
              "cf_name": "y_leo(2)",
              "cf_value": -0.01642583348237834
            }
          ],
          "rhs_eq_var": [
            "leo",
            "qleor",
            "qlf",
            "xgap2"
          ]
        },
        "stochastic_type": "LB"
      },
      {
        "name": "lep",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Employment in  business sector (employee and  self-employed)",
        "description": "Employment in the business sector equals aggregate\nhours divided by the average workweek.",
        "standard_equation": {
          "eviews_equation": "lep - lep_aerr = lhp / lww",
          "python_equation": "lep - lep_aerr = lhp / lww",
          "rhs_eq_var": [
            "lhp",
            "lww"
          ]
        }
      },
      {
        "name": "leppot",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Potential employment in  business sector",
        "description": "The trend level of employment in the business sector\nconsists of potential economy-wide employment less trend employment in\nother sectors.  Potential economy-wide employment equals the product\nof the trend labor force (QLF) and the proportion of the labor force\nemployed in equilibrium (1.0 minus the natural rate of unemployment,\nLURNAT).  Trend employment in sectors other than business\nconsists of trend government employment (LEST + LEFT) and trend\n\"other\" employment (QLEOR * QLF).",
        "standard_equation": {
          "eviews_equation": "leppot - leppot_aerr = (qlf*(1-.01*lurnat - qleor))/(1+adjlegrt)",
          "python_equation": "leppot - leppot_aerr = (qlf*(1-.01*lurnat - qleor))/(1+adjlegrt)",
          "rhs_eq_var": [
            "adjlegrt",
            "lurnat",
            "qleor",
            "qlf"
          ]
        }
      },
      {
        "name": "leuc",
        "equation_type": "Exogenous",
        "definition": "Emergency unemployment compensation (EUC)",
        "exogenous_projection": 2
      },
      {
        "name": "lf",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Civilian labor force (break adjusted)",
        "standard_equation": {
          "eviews_equation": "lf - lf_aerr = lfpr * n16",
          "python_equation": "lf - lf_aerr = lfpr * n16",
          "rhs_eq_var": [
            "lfpr",
            "n16"
          ]
        }
      },
      {
        "name": "lfpr",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Labor force participation rate",
        "description": "In the long run, the participation rate moves at its trend first\ndifference (HQLFPR).  In the short run, the participation rate error\ncorrects at a 45 percent rate to the lagged deviation of its level\nfrom its trend level (QLFPR).  QLFPR is modeled as a random walk with\ntime-varying drift.  Cyclical variation in the participation rate is\ncaptured by including the gap between the unemployment rate and its\nnatural rate (LURNAT), which is lagged to avoid coefficient bias that\nmight arise from measurement error that is common to LUR and LFPR.",
        "standard_equation": {
          "eviews_equation": "d(lfpr)-hqlfpr  - lfpr_aerr =\n           y_lfpr(1)*(qlfpr(-1)-lfpr(-1))\n          + y_lfpr(2)*(lur(-1)-lurnat(-1))",
          "python_equation": "(lfpr - (lfpr(-1)))-hqlfpr  - lfpr_aerr =\n           y_lfpr_1*(qlfpr(-1)-lfpr(-1))\n          + y_lfpr_2*(lur(-1)-lurnat(-1))",
          "coeff": [
            {
              "cf_name": "y_lfpr(1)",
              "cf_value": 0.5676074828293328,
              "t_stat": 10.43880510602398
            },
            {
              "cf_name": "y_lfpr(2)",
              "cf_value": -0.0008751892020969236,
              "t_stat": -9.063087467005179
            }
          ],
          "rhs_eq_var": [
            "lfpr",
            "lur",
            "lurnat",
            "qlfpr"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.3351540036058511,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 1.957962129545313,
            "method": "Least Squares",
            "r_squared": 0.3382178100408473,
            "sample_end": "2017Q4",
            "sample_start": "1963Q3",
            "se_of_regression": 0.001231338397034172
          }
        },
        "stochastic_type": "LB"
      },
      {
        "name": "lhp",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Aggregate labor hours,  business sector (employee and  self-employed)",
        "description": "Firms attempt to keep aggregate hours in line with the expected\nlevel of production adjusted for the trend level of labor\nproductivity.  This definition of the target level of hours is\nembedded in a version of the polynomial adjustment cost framework that\nis modified to allow some portion of labor hours to adjust costlessly.\nThe portion of the equation that corresponds to the costly adjusting\nhours consists of the three conventional PAC terms -- the degree hours\nwere out of equilibrium last period, lagged hours growth, and expected\ngrowth in target hours.  The structure of the PAC component of the\nequation is outlined below in Note 1.  To translate the general PAC\nspecification into the form in which it appears in the LHP equation,\nassociate log(LHP) with y, log(QLHP) with y*, and\nZLHP with the expected weighted sum of future &amp;Delta;y*.  The order of\nadjustment costs (m) is 2.\n\nThe portion of hours that adjusts costlessly is captured by the\ncurrent growth in target hours (the growth rate of XBO less the trend\ngrowth rate of output per hour, HLPRDT).  The coefficient on the\nlatter indicates that more than 40 percent of hours adjust costlessly\nand a bit less than 60 percent of hours adjust according to the PAC\nspecification.  The aggregation of slow-adjusting and fast-adjusting\nhours is outlined below in Note 2.\n\n&lt;b&gt;Note 1:&lt;/b&gt; PAC Overview: Let y denote the decision variable and\ny* its desired level in the absence of adjustment frictions.  The\ndecision rule derived from the PAC Euler equation has the following\nform.\n\n&amp;nbsp&amp;nbsp&amp;nbsp &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt;&lt;sup&gt;pac&lt;/sup&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -\n      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;\n      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;\n\n The order of adjustment costs is given by parameter m.  The\nforward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the\nestimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount\nfactor (0.98).  Estimation imposes the growth neutrality restriction\n&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +\n&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,\nsee &lt;a href=\"pac_basics.pdf\"&gt;PAC Basics&lt;/a&gt;.\n\n&lt;b&gt;Note 2:&lt;/b&gt; To describe the aggregation of slow-adjusting PAC\nhours and fast-adjusting hours, let h and q be the logs of total hours\nand target hours, and z be the weighted sum of expected growth of\ntarget hours.  Subscripts denote slow-adjusting (\"1\") and\nfast-adjusting (\"2\") components.  Assume the shares of the two types\nof hours are approximately constant.  Write\n\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; = c*&amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; + (1-c)*&amp;Delta;h&lt;sub&gt;2&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt;\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;(q&lt;sub&gt;1&lt;/sub&gt;-h&lt;sub&gt;1&lt;/sub&gt;)&lt;sub&gt;t-1&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*&amp;Delta;h&lt;sub&gt;1,t-1&lt;/sub&gt; + zh&lt;sub&gt;1t&lt;/sub&gt;\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;2t&lt;/sub&gt; = &amp;Delta;q&lt;sub&gt;2t&lt;/sub&gt; = &amp;Delta;q&lt;sub&gt;t&lt;/sub&gt;\n\nBy assumption, the total hours gap (q-h) is concentrated in the\nslow adjusting hours, which leads to the final equation in the following steps\n\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   (q&lt;sub&gt;1t&lt;/sub&gt;-h&lt;sub&gt;1t&lt;/sub&gt;) = (q&lt;sub&gt;t&lt;/sub&gt;-h&lt;sub&gt;t&lt;/sub&gt;)/c\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1t&lt;/sub&gt; = (&amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; - (1-c)*&amp;Delta;q&lt;sub&gt;t&lt;/sub&gt;)/c\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;1&lt;/sub&gt;&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;*(q-h)&lt;sub&gt;t-1&lt;/sub&gt;/c + a&lt;sub&gt;1&lt;/sub&gt;*(&amp;Delta;h&lt;sub&gt;t-1&lt;/sub&gt; - (1-c)&amp;Delta;q&lt;sub&gt;t-1&lt;/sub&gt;)/c + zh&lt;sub&gt;1t&lt;/sub&gt;\n&lt;br&gt;&amp;nbsp&amp;nbsp&amp;nbsp   &amp;Delta;h&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;*(q-h)&lt;sub&gt;t-1&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*&amp;Delta;h&lt;sub&gt;t-1&lt;/sub&gt; + c*zh&lt;sub&gt;t&lt;/sub&gt; + (1-c)*&amp;Delta;q&lt;sub&gt;t&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;*(1-c)*&amp;Delta;q&lt;sub&gt;t-1&lt;/sub&gt;\n\nThe final form of the equation assumes zh = zh&lt;sub&gt;1&lt;/sub&gt;.",
        "standard_equation": {
          "eviews_equation": "dlog(lhp)  - lhp_aerr =\n           y_lhp(1) * (log(qlhp(-1)/lhp(-1)))\n          + y_lhp(2) * dlog(lhp(-1))\n          + y_lhp(3) * zlhp\n          + y_lhp(4) * (dlog(xbo) - hlprdt(-1)/400 )\n          + y_lhp(5) * (dlog(xbo(-1)) - hlprdt(-2)/400)",
          "python_equation": "(log(lhp) - log(lhp(-1)))  - lhp_aerr =\n           y_lhp_1 * (log(qlhp(-1)/lhp(-1)))\n          + y_lhp_2 * (log(lhp(-1)) - log(lhp(-2)))\n          + y_lhp_3 * zlhp\n          + y_lhp_4 * ((log(xbo) - log(xbo(-1))) - hlprdt(-1)/400 )\n          + y_lhp_5 * ((log(xbo(-1)) - log(xbo(-2))) - hlprdt(-2)/400)",
          "coeff": [
            {
              "cf_name": "y_lhp(1)",
              "cf_value": 0.2022897898011354,
              "t_stat": 7.259064432449588
            },
            {
              "cf_name": "y_lhp(2)",
              "cf_value": 0.2028806748568088,
              "t_stat": 3.393905820484788
            },
            {
              "cf_name": "y_lhp(3)",
              "cf_value": 0.3720641848854363,
              "t_stat": 10.35220238834869
            },
            {
              "cf_name": "y_lhp(4)",
              "cf_value": 0.6279358151145638
            },
            {
              "cf_name": "y_lhp(5)",
              "cf_value": -0.127396041937203
            }
          ],
          "rhs_eq_var": [
            "hlprdt",
            "lhp",
            "qlhp",
            "xbo",
            "zlhp"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.7997430562973022,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 1.970798850059509,
            "method": "Iterative Least Squares",
            "r_squared": 0.8016412258148194,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.003538197604939341
          }
        },
        "stochastic_type": "LB"
      },
      {
        "name": "lprdt",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Trend labor productivity",
        "description": "Trend labor productivity in the adjusted business sector is\nthe ratio of potential output in that sector to trend total hours.\nThe latter is the product of potential employment (LEPPOT) and the trend\nin hours per worker (QLWW).",
        "standard_equation": {
          "eviews_equation": "log(lprdt) - lprdt_aerr  = log(xbt) - log(leppot) - log(qlww)",
          "python_equation": "log(lprdt) - lprdt_aerr  = log(xbt) - log(leppot) - log(qlww)",
          "rhs_eq_var": [
            "leppot",
            "qlww",
            "xbt"
          ]
        }
      },
      {
        "name": "lqualt",
        "equation_type": "Exogenous",
        "definition": "Labor quality, trend level",
        "exogenous_projection": 1
      },
      {
        "name": "lur",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Civilian unemployment rate (break adjusted)",
        "standard_equation": {
          "eviews_equation": "lur - lur_aerr = 100*(1 - leh/lf)",
          "python_equation": "lur - lur_aerr = 100*(1 - leh/lf)",
          "rhs_eq_var": [
            "leh",
            "lf"
          ]
        }
      },
      {
        "name": "lurnat",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Natural rate of unemployment",
        "description": "The natural rate of unemployment follows a random walk with zero drift.",
        "standard_equation": {
          "eviews_equation": "lurnat - lurnat_aerr = lurnat(-1)",
          "python_equation": "lurnat - lurnat_aerr = lurnat(-1)",
          "rhs_eq_var": "lurnat"
        },
        "stochastic_type": "LB"
      },
      {
        "name": "lurtrsh",
        "equation_type": "Exogenous",
        "definition": "Unemployment threshold",
        "exogenous_projection": 2
      },
      {
        "name": "lww",
        "equation_type": "Behavioral",
        "sector": "Labor Market",
        "definition": "Workweek,  business sector (employee and self-employed)",
        "description": "In the long run, the workweek grows as its trend rate (HQLWW).  In\nthe short run, the workweek error corrects at nearly a 20 percent rate\nto the lagged deviation of its level from its trend level (QLWW).\nQLWW is modeled as a random walk with drift.  About 30 percent of the\ncontemporaneous deviation of the rate of growth of total hours from\nits trend shows up as a change in the workweek (and thus about 70\npercent shows up as a change in employment).",
        "standard_equation": {
          "eviews_equation": "dlog(lww)-hqlww/400  - lww_aerr =\n           y_lww(1)*log(qlww(-1)/lww(-1))\n          + y_lww(2)*(dlog(lhp)-(hlept+hqlww)/400)",
          "python_equation": "(log(lww) - log(lww(-1)))-hqlww/400  - lww_aerr =\n           y_lww_1*log(qlww(-1)/lww(-1))\n          + y_lww_2*((log(lhp) - log(lhp(-1)))-(hlept+hqlww)/400)",
          "coeff": [
            {
              "cf_name": "y_lww(1)",
              "cf_value": 0.195710350653204,
              "t_stat": 10.66506989979301
            },
            {
              "cf_name": "y_lww(2)",
              "cf_value": 0.3184816471961936,
              "t_stat": 19.41865174072189
            }
          ],
          "rhs_eq_var": [
            "hlept",
            "hqlww",
            "lhp",
            "lww",
            "qlww"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.6547090231380972,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 1.892277522064893,
            "method": "Least Squares",
            "r_squared": 0.656300225796447,
            "sample_end": "2017Q4",
            "sample_start": "1963Q3",
            "se_of_regression": 0.001811376258859421
          }
        },
        "stochastic_type": "LB"
      },
      {
        "name": "mei",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Multiplicative discrepancy for the difference between XGDI and XGDO",
        "standard_equation": {
          "eviews_equation": "log(mei) - mei_aerr = y_mei(1) * log(mei(-1))",
          "python_equation": "log(mei) - mei_aerr = y_mei_1 * log(mei(-1))",
          "coeff": {
            "cf_name": "y_mei(1)",
            "cf_value": 1
          },
          "rhs_eq_var": "mei"
        }
      },
      {
        "name": "mep",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Multiplicative discrepancy for the difference between XGDP and XGDO",
        "standard_equation": {
          "eviews_equation": "log(mep) - mep_aerr = y_mep(1) * log(mep(-1))",
          "python_equation": "log(mep) - mep_aerr = y_mep_1 * log(mep(-1))",
          "coeff": {
            "cf_name": "y_mep(1)",
            "cf_value": 1
          },
          "rhs_eq_var": "mep"
        }
      },
      {
        "name": "mfpt",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Multifactor productivity, trend level",
        "standard_equation": {
          "eviews_equation": "log(mfpt) - mfpt_aerr = y_mfpt(1) + log(mfpt(-1)) + hmfpt/400",
          "python_equation": "log(mfpt) - mfpt_aerr = y_mfpt_1 + log(mfpt(-1)) + hmfpt/400",
          "coeff": {
            "cf_name": "y_mfpt(1)",
            "cf_value": 0
          },
          "rhs_eq_var": [
            "hmfpt",
            "mfpt"
          ]
        },
        "stochastic_type": "ST"
      },
      {
        "name": "n16",
        "equation_type": "Exogenous",
        "definition": "Noninstitutional population, aged 16 and over (break adjusted)",
        "exogenous_projection": 1
      },
      {
        "name": "pbfir",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price level of BFI compared to PXP",
        "standard_equation": {
          "eviews_equation": "log(pbfir) - pbfir_aerr =  log(pbfir(-1)) + pipxnc/400 + dpadj - d(log(pxp), 0, 1)",
          "python_equation": "log(pbfir) - pbfir_aerr =  log(pbfir(-1)) + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1))))",
          "rhs_eq_var": [
            "dpadj",
            "pbfir",
            "pipxnc",
            "pxp"
          ]
        },
        "kfcalc": 1,
        "stochastic_type": "OT"
      },
      {
        "name": "pcdr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for consumer durables, cw (relative to to PCNIA)",
        "description": "The growth rate of the relative (to PCNIA) price of consumer durable\ngoods (PCDR) is assumed to follow a first order autoregressive process.",
        "standard_equation": {
          "eviews_equation": "d(log(pcdr))  - pcdr_aerr =\n           y_pcdr(1)\n          + y_pcdr(2)*d(log(pcdr(-1)))",
          "python_equation": "(log(pcdr) - (log(pcdr(-1))))  - pcdr_aerr =\n           y_pcdr_1\n          + y_pcdr_2*(log(pcdr(-1)) - (log(pcdr(-2))))",
          "coeff": [
            {
              "cf_name": "y_pcdr(1)",
              "cf_value": -0.003334518696912942,
              "t_stat": -6.21336908480081
            },
            {
              "cf_name": "y_pcdr(2)",
              "cf_value": 0.5098481943420772,
              "t_stat": 8.124650601186598
            }
          ],
          "rhs_eq_var": "pcdr",
          "estimation_statistics": {
            "F_statistic": 66.00994739136145,
            "adjusted_r_squared": 0.2549310254614942,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 1.995150313594502,
            "method": "Least Squares",
            "prob_F_statistic": 5.705791043811285e-14,
            "r_squared": 0.2588524411169599,
            "sample_end": "2017Q4",
            "sample_start": "1970Q2",
            "se_of_regression": 0.004525354347700505
          }
        }
      },
      {
        "name": "pcer",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for personal consumption expenditures on energy (relative to PCXFE)",
        "description": "The growth rate of the consumer energy prices (relative to PXCFE) are\nassumed to be a fraction of that of oil imports (relative to PCXFE, as well).",
        "standard_equation": {
          "eviews_equation": "d( log(pcer), 0, 1 )  - pcer_aerr =\n           y_pcer(1) * d(log(pmp/pcxfe))",
          "python_equation": "( log(pcer) - ( log(pcer(-1))))  - pcer_aerr =\n           y_pcer_1 * (log(pmp/pcxfe) - (log(pmp(-1)/pcxfe(-1))))",
          "coeff": {
            "cf_name": "y_pcer(1)",
            "cf_value": 0.2488609533651416,
            "t_stat": 19.3687417670298
          },
          "rhs_eq_var": [
            "pcxfe",
            "pmp"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.6390264852519756,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.958877559688213,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.6390264852519756,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.02491917225605605
          }
        },
        "kfcalc": 0,
        "stochastic_type": "PR"
      },
      {
        "name": "pcfr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for personal consumption expenditures on food (relative to PCXFE)",
        "description": "Growth in relative consumer food prices is modeled using a\nsimple error-correction specification, where the level of prices\nin the long run is equal to an estimated trend, PCFRT, defined\nhistorically by H-P filtering the observed series.",
        "standard_equation": {
          "eviews_equation": "d( log(pcfr), 0, 1 )   - pcfr_aerr =\n           y_pcfr(1) * log(pcfr(-1)/pcfrt(-1))\n          + y_pcfr(2)\n          + y_pcfr(3) *  d( log(pcfr(-1)), 0, 1 )\n          + y_pcfr(4) *  d( log(pcfr(-2)), 0, 1 )\n          + y_pcfr(5) *  d( log(pcfr(-3)), 0, 1 )\n          + y_pcfr(6) * d( log(pcfrt), 0, 1 )",
          "python_equation": "( log(pcfr) - ( log(pcfr(-1))))   - pcfr_aerr =\n           y_pcfr_1 * log(pcfr(-1)/pcfrt(-1))\n          + y_pcfr_2\n          + y_pcfr_3 *  ( log(pcfr(-1)) - ( log(pcfr(-2))))\n          + y_pcfr_4 *  ( log(pcfr(-2)) - ( log(pcfr(-3))))\n          + y_pcfr_5 *  ( log(pcfr(-3)) - ( log(pcfr(-4))))\n          + y_pcfr_6 * ( log(pcfrt) - ( log(pcfrt(-1))))",
          "coeff": [
            {
              "cf_name": "y_pcfr(1)",
              "cf_value": -0.1753151166404203,
              "t_stat": -6.407515202419682
            },
            {
              "cf_name": "y_pcfr(2)",
              "cf_value": -0.0000559454305651988,
              "t_stat": -0.1190835368445417
            },
            {
              "cf_name": "y_pcfr(3)",
              "cf_value": 0.3855084844618753,
              "t_stat": 6.133218161450598,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_pcfr(4)",
              "cf_value": 0.02031018771733943,
              "t_stat": 0.3014709078795031,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_pcfr(5)",
              "cf_value": 0.3388841893424357,
              "t_stat": 5.12176446254809,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_pcfr(6)",
              "cf_value": 0.3176985579727371,
              "t_stat": 1.313157636299621
            }
          ],
          "rhs_eq_var": [
            "pcfr",
            "pcfrt"
          ],
          "estimation_statistics": {
            "F_statistic": 25.57304467839001,
            "adjusted_r_squared": 0.3680084500676164,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.964597509430065,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 4.884156780608893e-20,
            "r_squared": 0.3829845531465829,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.006836630019194702
          }
        },
        "kfcalc": 1,
        "stochastic_type": "PR"
      },
      {
        "name": "pcfrt",
        "equation_type": "Exogenous",
        "definition": "Real PCE price of food, trend",
        "exogenous_projection": 2
      },
      {
        "name": "pchr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for housing services, cw (relative to to PCNIA)",
        "description": "The growth rate of the relative (to PCNIA) price of housing services\n(PCHR) is assumed to follow a first order autoregressive process.",
        "standard_equation": {
          "eviews_equation": "d(log(pchr))  - pchr_aerr =\n           y_pchr(1)\n          + y_pchr(2)*d(log(pchr(-1)))",
          "python_equation": "(log(pchr) - (log(pchr(-1))))  - pchr_aerr =\n           y_pchr_1\n          + y_pchr_2*(log(pchr(-1)) - (log(pchr(-2))))",
          "coeff": [
            {
              "cf_name": "y_pchr(1)",
              "cf_value": 0.0006138065838894166,
              "t_stat": 1.897791205363502
            },
            {
              "cf_name": "y_pchr(2)",
              "cf_value": 0.5980639856669541,
              "t_stat": 10.26601235956948
            }
          ],
          "rhs_eq_var": "pchr",
          "estimation_statistics": {
            "F_statistic": 105.3910097668334,
            "adjusted_r_squared": 0.3545998563254845,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 1.989191197272333,
            "method": "Least Squares",
            "prob_F_statistic": 6.229873200267816e-20,
            "r_squared": 0.3579966991869293,
            "sample_end": "2017Q4",
            "sample_start": "1970Q2",
            "se_of_regression": 0.004304736918445813
          }
        }
      },
      {
        "name": "pcnia",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for personal consumption expenditures, cw (NIPA definition)",
        "standard_equation": {
          "eviews_equation": "d( log(pcnia), 0, 1 ) - pcnia_aerr = picnia / 400",
          "python_equation": "( log(pcnia) - ( log(pcnia(-1)))) - pcnia_aerr = picnia / 400",
          "rhs_eq_var": "picnia"
        }
      },
      {
        "name": "pcor",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for non-durable goods and non-housing services, cw (relative to to PCNIA",
        "description": "The relative price of non-durable goods and non-housing services\n(PCOR) is approximated by a fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(pcor)  - pcor_aerr = log(pcor(-1))\n          + y_pcor(1)*log(pcdr/pcdr(-1))\n          + y_pcor(2)*log(pchr/pchr(-1))",
          "python_equation": "log(pcor)  - pcor_aerr = log(pcor(-1))\n          + y_pcor_1*log(pcdr/pcdr(-1))\n          + y_pcor_2*log(pchr/pchr(-1))",
          "coeff": [
            {
              "cf_name": "y_pcor(1)",
              "cf_value": -0.1436
            },
            {
              "cf_name": "y_pcor(2)",
              "cf_value": -0.217
            }
          ],
          "rhs_eq_var": [
            "pcdr",
            "pchr",
            "pcor"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999935141056029,
            "date": "08/30/18   Time: 09:59",
            "durbin_watson": 2.164395735868182,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9999951355792022,
            "sample_end": "2017Q4",
            "sample_start": "2016Q4",
            "se_of_regression": 0.000002268479028335759
          }
        }
      },
      {
        "name": "pcpi",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Consumer price index,total",
        "description": "The overall CPI equals the product of the PCE chain-weight\nprice index and a proportionality factor.  This factor has two\ncomponents, one to account for the effect of different weights\non energy in the two price indices, and the other to account\nfor all other differences.",
        "standard_equation": {
          "eviews_equation": "pcpi - pcpi_aerr = upcpi * pcnia",
          "python_equation": "pcpi - pcpi_aerr = upcpi * pcnia",
          "rhs_eq_var": [
            "pcnia",
            "upcpi"
          ]
        }
      },
      {
        "name": "pcpix",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Consumer price index,excluding food and energy",
        "standard_equation": {
          "eviews_equation": "pcpix - pcpix_aerr = upcpix * pcxfe",
          "python_equation": "pcpix - pcpix_aerr = upcpix * pcxfe",
          "rhs_eq_var": [
            "pcxfe",
            "upcpix"
          ]
        }
      },
      {
        "name": "pcstar",
        "equation_type": "Exogenous",
        "definition": "Target consumption price level (used in RFFGEN policy rule)",
        "exogenous_projection": 1
      },
      {
        "name": "pcxfe",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for personal consumption expendits ex. food and energy, cw (NIPA definit",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d(log(pcxfe), 0, 1) - pcxfe_aerr = picxfe/400",
          "python_equation": "(log(pcxfe) - (log(pcxfe(-1)))) - pcxfe_aerr = picxfe/400",
          "rhs_eq_var": "picxfe"
        }
      },
      {
        "name": "pegfr",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Price index for federal government expenditures, CW (relative to PXP)",
        "description": "",
        "standard_equation": {
          "eviews_equation": "log(pegfr) - pegfr_aerr - log(pegfr(-1)) =  pipxnc/400\n                                         + dpadj - d(log(pxp))",
          "python_equation": "log(pegfr) - pegfr_aerr - log(pegfr(-1)) =  pipxnc/400\n                                         + dpadj - (log(pxp) - (log(pxp(-1))))",
          "rhs_eq_var": [
            "dpadj",
            "pipxnc",
            "pxp"
          ]
        },
        "kfcalc": 1,
        "stochastic_type": "GV"
      },
      {
        "name": "pegsr",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Price index for S&amp;L government expenditures, CW (relative to PXP)",
        "description": "",
        "standard_equation": {
          "eviews_equation": "log(pegsr) - pegsr_aerr =  log(pegsr(-1)) + pipxnc/400\n                        + dpadj - d(log(pxp))",
          "python_equation": "log(pegsr) - pegsr_aerr =  log(pegsr(-1)) + pipxnc/400\n                        + dpadj - (log(pxp) - (log(pxp(-1))))",
          "rhs_eq_var": [
            "dpadj",
            "pegsr",
            "pipxnc",
            "pxp"
          ]
        },
        "kfcalc": 1,
        "stochastic_type": "GV"
      },
      {
        "name": "pgdp",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for GDP, cw",
        "standard_equation": {
          "eviews_equation": "pgdp - pgdp_aerr = 100*xgdpn/xgdp",
          "python_equation": "pgdp - pgdp_aerr = 100*xgdpn/xgdp",
          "rhs_eq_var": [
            "xgdp",
            "xgdpn"
          ]
        }
      },
      {
        "name": "pgfl",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for federal government employee compensation, cw",
        "description": "The price index for federal employee compensation (PGFL) is\nproportional to the economy-wide compensation rate (PL).  They are\nlinked by the exogenous conversion factor UPGFL.",
        "standard_equation": {
          "eviews_equation": "log(pgfl) - pgfl_aerr = log(upgfl)+log(pl)-log(lprdt)",
          "python_equation": "log(pgfl) - pgfl_aerr = log(upgfl)+log(pl)-log(lprdt)",
          "rhs_eq_var": [
            "lprdt",
            "pl",
            "upgfl"
          ]
        }
      },
      {
        "name": "pgsl",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for S&amp;L government employee compensation, cw",
        "description": "The price index for federal employee compensation (PGSL) is\nproportional to the economy-wide compensation rate (PL).  They are\nlinked by the exogenous conversion factor UPGSL.",
        "standard_equation": {
          "eviews_equation": "log(pgsl) - pgsl_aerr = log(upgsl)+log(pl)-log(lprdt)",
          "python_equation": "log(pgsl) - pgsl_aerr = log(upgsl)+log(pl)-log(lprdt)",
          "rhs_eq_var": [
            "lprdt",
            "pl",
            "upgsl"
          ]
        }
      },
      {
        "name": "phouse",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Loan Performance House Price Index",
        "description": "The price of owner-occupied real estate is modeled in an\nerror-correction format.  The housing price is proportional\nto housing rents (PCHR*PCNIA) in the long run.",
        "standard_equation": {
          "eviews_equation": "dlog(phouse)  - phouse_aerr =\n           y_phouse(1)\n          + y_phouse(2)*dlog(phouse(-1))\n          + y_phouse(3)*log(phouse(-1)/(pchr(-1)*pcnia(-1)))",
          "python_equation": "(log(phouse) - log(phouse(-1)))  - phouse_aerr =\n           y_phouse_1\n          + y_phouse_2*(log(phouse(-1)) - log(phouse(-2)))\n          + y_phouse_3*log(phouse(-1)/(pchr(-1)*pcnia(-1)))",
          "coeff": [
            {
              "cf_name": "y_phouse(1)",
              "cf_value": 0.005158779390135185,
              "t_stat": 3.935165599301115
            },
            {
              "cf_name": "y_phouse(2)",
              "cf_value": 0.9018869955145716,
              "t_stat": 29.95363868812332
            },
            {
              "cf_name": "y_phouse(3)",
              "cf_value": -0.01156922658993683,
              "t_stat": -3.56924816554673
            }
          ],
          "rhs_eq_var": [
            "pchr",
            "pcnia",
            "phouse"
          ],
          "estimation_statistics": {
            "F_statistic": 481.834390092032,
            "adjusted_r_squared": 0.8520380797874416,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 2.062144629586203,
            "method": "Least Squares",
            "prob_F_statistic": 1.275522525671469e-69,
            "r_squared": 0.8538100788319034,
            "sample_end": "2017Q4",
            "sample_start": "1976Q1",
            "se_of_regression": 0.006604001196849979
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "phr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for residential investment, cw (relative to PXP)",
        "standard_equation": {
          "eviews_equation": "log(phr) - phr_aerr - log(phr(-1)) = y_phr(1) + pipxnc/400 + dpadj - d(log(pxp), 0, 1)",
          "python_equation": "log(phr) - phr_aerr - log(phr(-1)) = y_phr_1 + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1))))",
          "coeff": {
            "cf_name": "y_phr(1)",
            "cf_value": 0
          },
          "rhs_eq_var": [
            "dpadj",
            "pipxnc",
            "pxp"
          ]
        },
        "kfcalc": 1,
        "stochastic_type": "OT"
      },
      {
        "name": "pic4",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Four-quarter percent change in PCE prices",
        "standard_equation": {
          "eviews_equation": "pic4 - pic4_aerr = 100*(pcnia/pcnia(-4) - 1)",
          "python_equation": "pic4 - pic4_aerr = 100*(pcnia/pcnia(-4) - 1)",
          "rhs_eq_var": "pcnia"
        }
      },
      {
        "name": "picnia",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Inflation rate, personal consumption expenditures, cw",
        "standard_equation": {
          "eviews_equation": "picnia  - picnia_aerr = picxfe\n          + y_picnia(1)*400*(log(pcer)-log(pcer(-1)))\n          + y_picnia(2)*400*(log(pcfr)-log(pcfr(-1)))",
          "python_equation": "picnia  - picnia_aerr = picxfe\n          + y_picnia_1*400*(log(pcer)-log(pcer(-1)))\n          + y_picnia_2*400*(log(pcfr)-log(pcfr(-1)))",
          "coeff": [
            {
              "cf_name": "y_picnia(1)",
              "cf_value": 0.0399
            },
            {
              "cf_name": "y_picnia(2)",
              "cf_value": 0.0726
            }
          ],
          "rhs_eq_var": [
            "pcer",
            "pcfr",
            "picxfe"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9998459277741218,
            "date": "08/30/18   Time: 09:59",
            "durbin_watson": 0.6756632769321184,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9998844458305912,
            "sample_end": "2017Q4",
            "sample_start": "2016Q4",
            "se_of_regression": 0.008667770574518556
          }
        }
      },
      {
        "name": "picx4",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Four-quarter percent change core in PCE prices",
        "standard_equation": {
          "eviews_equation": "picx4 - picx4_aerr = 100*(pcxfe/pcxfe(-4) - 1)",
          "python_equation": "picx4 - picx4_aerr = 100*(pcxfe/pcxfe(-4) - 1)",
          "rhs_eq_var": "pcxfe"
        }
      },
      {
        "name": "picxfe",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Inflation rate, personal consumption expenditures, ex. food and energy, cw",
        "description": "This is the main price equation in FRB/US.  Its specification is\nbased on a variant of the New Keynesian Phillips Curve (NKPC) derived\nby Cogley and Sbordonne (2008) for the case in which the subset of\nprices that is not optimally reset each period is indexed to either\npast or trend price inflation.\n\n(1) &amp;Pi;&lt;sub&gt;t&lt;/sub&gt; = E&lt;sub&gt;t-1&lt;/sub&gt;[&amp;beta;&amp;Pi;&lt;sub&gt;t+1&lt;/sub&gt;\n       + &amp;kappa;&amp;mu;&lt;sub&gt;t&lt;/sub&gt;] + &amp;epsilon;&lt;sub&gt;t&lt;/sub&gt;\n\n(2) &amp;Pi;&lt;sub&gt;t&lt;/sub&gt; &amp;equiv; &amp;pi;&lt;sub&gt;t&lt;/sub&gt; -\n       &amp;gamma;&amp;pi;^&lt;sub&gt;t&lt;/sub&gt; - (1-&amp;gamma;)&amp;pi;*&lt;sub&gt;t&lt;/sub&gt;\n\n(3) &amp;pi;^&lt;sub&gt;t&lt;/sub&gt;  &amp;equiv; &amp;pi;&lt;sub&gt;t-1&lt;/sub&gt;\n\n Equation 1 is the basic NKPC expressed in terms of the composite\nvariable &amp;Pi;, which is defined in equation 2 as the difference\nbetween actual inflation (&amp;pi;) and a weighted average of past (&amp;pi;^)\nand trend (&amp;pi;*) inflation.  Expectations are formed on the basis of\n\"t-1\" information, &amp;beta;(=.98) is the discount factor, and &amp;mu; is\nthe price markup gap.\n\n Past inflation is measured as the first lag (equation 3).\nTrend price inflation is measured using survey data on ten-year\ninflation expectations (PTR).  The price markup gap\n(log(QPCNIA/PCNIA)) is measured using a set of relationships that, if\nlinearized, would set it equal to a weighted average of the detrended\nlabor share in the nonfarm business sector, the relative price of\nnonoil imports, and a few additional but minor terms.  For purposes of\nsimplicity, the markup gap enters as a t-1 observation rather than the\nt-1 expectation of the observation in period t.\n\n The unemployment rate does not directly appear in the structural price\nequation.  The sensitivity of price inflation to the unemployment rate\nis indirect and operates through the effect that the structural dependence\nof wage inflation (PIECI) on labor market conditions has on the expectation\nof PICXFE in period t+1 (ZPICXFE).\n\n The PICXFE equation, which is estimated simultaneously with the\nequation for the rate of growth of the ECI measure of hourly\ncompensation (PIECI), contains two estimated\nparameters.  &amp;gamma; is the fraction of non-optimized prices\nthat is indexed to past inflation, and &amp;kappa; is the\nresponse of inflation to the price markup gap.\n\nMore information on the estimation of the price-wage NKPC\nequations is available &lt;a href=\"price_wage_sector_083013.pdf\"&gt;here&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "picxfe - picxfe_aerr = (y_picxfe(1)*picxfe(-1)\n                     + y_picxfe(3)*zpicxfe\n                     + (1-y_picxfe(3))*(1-y_picxfe(1))*ptr(-1)\n                     + y_picxfe(2)*400*log(qpcnia(-1)/pcnia(-1))) / (1+y_picxfe(1)*y_picxfe(3))",
          "python_equation": "picxfe - picxfe_aerr = (y_picxfe_1*picxfe(-1)\n                     + y_picxfe_3*zpicxfe\n                     + (1-y_picxfe_3)*(1-y_picxfe_1)*ptr(-1)\n                     + y_picxfe_2*400*log(qpcnia(-1)/pcnia(-1))) / (1+y_picxfe_1*y_picxfe_3)",
          "coeff": [
            {
              "cf_name": "y_picxfe(1)",
              "cf_value": 0.671147437396
            },
            {
              "cf_name": "y_picxfe(2)",
              "cf_value": 0.00191485982247
            },
            {
              "cf_name": "y_picxfe(3)",
              "cf_value": 0.98
            }
          ],
          "rhs_eq_var": [
            "pcnia",
            "picxfe",
            "ptr",
            "qpcnia",
            "zpicxfe"
          ],
          "estimation_statistics": {
            "estimation_date": 2017,
            "sample_end": "-",
            "sample_start": "1988q1"
          }
        },
        "kfcalc": 1,
        "stochastic_type": "PR"
      },
      {
        "name": "pieci",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Annualized rate of growth of EI hourly compensation",
        "description": "This is the main wage equation in FRB/US.  Its specification is\nbased on a variant of the New Keynesian Phillips Curve (NKPC) derived\nby Cogley and Sbordonne (2008) for the case in which the subset of\nwages that is not optimally reset each period is indexed to either\npast or trend wage inflation.\n\n(1) &amp;Pi;(w)&lt;sub&gt;t&lt;/sub&gt; = E&lt;sub&gt;t-1&lt;/sub&gt;[&amp;beta;&amp;Pi;(w)&lt;sub&gt;t+1&lt;/sub&gt;\n       + &amp;kappa;&amp;mu;&lt;sub&gt;t&lt;/sub&gt;] + &amp;epsilon;&lt;sub&gt;t&lt;/sub&gt;\n\n(2) &amp;Pi;(w)&lt;sub&gt;t&lt;/sub&gt; &amp;equiv; &amp;pi;(w)&lt;sub&gt;t&lt;/sub&gt; -\n       &amp;gamma;&amp;pi;^(w)&lt;sub&gt;t&lt;/sub&gt; - (1-&amp;gamma;)&amp;pi;*(w)&lt;sub&gt;t&lt;/sub&gt;\n\n(3) &amp;pi;(w)^&lt;sub&gt;t&lt;/sub&gt;  &amp;equiv; .25 &amp;Sum;(i=1,4)&amp;pi;(w)&lt;sub&gt;t-i&lt;/sub&gt;\n\n Equation 1 is the basic NKPC expressed in terms of the composite\nvariable &amp;Pi;(w), which is defined in equation 2 as the difference\nbetween actual wage inflation (&amp;pi;(w)) and a weighted average of\npast (&amp;pi;^(w)) and trend (&amp;pi;*(w)) wage inflation.  Expectations are\nformed on the basis of \"t-1\" information, &amp;beta;(=.98) is the discount\nfactor, and &amp;mu; is the wage markup gap.\n\n Past wage inflation is measured as a four-quarter average\n(equation 3).  Trend wage inflation is measured as the sum of survey\ndata on ten-year consumer price inflation expectations (PTR) and the\nFRB/US estimate of the trend rate of growth of labor productivity\n(HLPRDT), less the FRB/US estimate of trend rate of growth of the\nprice of consumption relative to the price of final sales (HUQPCT).\nThe wage markup gap -- in theory, the difference between the marginal\nrate of substitution and the real wage -- is expressed as a function\nof the unemployment gap (LUR-LURNAT) and the detrended labor share\n(log(PL/QPL)).  For purposes of simplicity, each component of the\nmarkup gap enters as a t-1 observation rather than the t-1 expectation\nof the observation in period t. ZPIECI is the expectation of PIECI in\nperiod t+1.\n\n The PIECI equation, which is estimated simultaneously with the\nequation for core PCE price inflation (PICXFE), contains three\nestimated parameters: the fraction of non-optimized wages that is\nindexed to past inflation (&amp;gamma;); the\ncoefficient on the detrended labor share; and the\ncoefficient on the unemployment gap.\n\nMore information on the estimation of the price-wage NKPC\nequations is available &lt;a href=\"price_wage_sector_083013.pdf\"&gt;here&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "pieci - pieci_aerr = (.25*y_pieci(1)*((1-y_pieci(4))*(pieci(-1)+pieci(-2)+pieci(-3)) + pieci(-4))\n                     + y_pieci(4)*zpieci\n                     + (1-y_pieci(4))*(1-y_pieci(1))*(ptr(-1) + hlprdt(-1) - 400*huqpct(-1))\n                     + y_pieci(2)*(lur(-1)-lurnat(-1))\n                     + y_pieci(3)*400*log(qpl(-1)/pl(-1))) / (1+.25*y_pieci(1)*y_pieci(4))",
          "python_equation": "pieci - pieci_aerr = (.25*y_pieci_1*((1-y_pieci_4)*(pieci(-1)+pieci(-2)+pieci(-3)) + pieci(-4))\n                     + y_pieci_4*zpieci\n                     + (1-y_pieci_4)*(1-y_pieci_1)*(ptr(-1) + hlprdt(-1) - 400*huqpct(-1))\n                     + y_pieci_2*(lur(-1)-lurnat(-1))\n                     + y_pieci_3*400*log(qpl(-1)/pl(-1))) / (1+.25*y_pieci_1*y_pieci_4)",
          "coeff": [
            {
              "cf_name": "y_pieci(1)",
              "cf_value": 0.684663089102
            },
            {
              "cf_name": "y_pieci(2)",
              "cf_value": -0.0167232072082
            },
            {
              "cf_name": "y_pieci(3)",
              "cf_value": 0.000957429911235
            },
            {
              "cf_name": "y_pieci(4)",
              "cf_value": 0.98
            }
          ],
          "rhs_eq_var": [
            "hlprdt",
            "huqpct",
            "lur",
            "lurnat",
            "pieci",
            "pl",
            "ptr",
            "qpl",
            "zpieci"
          ],
          "estimation_statistics": {
            "estimation_date": 2017,
            "sample_end": "-",
            "sample_start": "1988q1"
          }
        },
        "kfcalc": 1,
        "stochastic_type": "PR"
      },
      {
        "name": "pigdp",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Inflation rate, GDP, cw",
        "standard_equation": {
          "eviews_equation": "pigdp - pigdp_aerr = 400*d( log(pgdp), 0, 1 )",
          "python_equation": "pigdp - pigdp_aerr = 400*( log(pgdp) - ( log(pgdp(-1))))",
          "rhs_eq_var": "pgdp"
        }
      },
      {
        "name": "pipl",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Rate of growth of PL",
        "standard_equation": {
          "eviews_equation": "pipl - pipl_aerr = pieci",
          "python_equation": "pipl - pipl_aerr = pieci",
          "rhs_eq_var": "pieci"
        }
      },
      {
        "name": "pipxnc",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Inflation rate, price of adjusted final sales excluding consumption (annual rate)",
        "description": "The difference between nonconsumption price inflation (PIPXNC) and\nconsumption price inflation (PICNIA), adjusted for the trend\ndifference between the two (1.99*400*HUQPCT), depends on two lags of\nitself and the rate of change of the real exchange rate.",
        "standard_equation": {
          "eviews_equation": "pipxnc - pipxnc_aerr =\n          picnia - 1.99 * 400 * huqpct+ y_pipxnc(1) * (pipxnc(-1) - picnia(-1) + 1.99 * 400 *  huqpct(-1))\n          + y_pipxnc(2) * (pipxnc(-2) - picnia(-2) + 1.99 * 400 *  huqpct(-2))\n          + y_pipxnc(3) * y_pipxnc(4) * 400 * (log(fpxr) - log(fpxr(-1)))+ .025*400*log(qpxnc(-1)/pxnc(-1))",
          "python_equation": "pipxnc - pipxnc_aerr =\n          picnia - 1.99 * 400 * huqpct+ y_pipxnc_1 * (pipxnc(-1) - picnia(-1) + 1.99 * 400 *  huqpct(-1))\n          + y_pipxnc_2 * (pipxnc(-2) - picnia(-2) + 1.99 * 400 *  huqpct(-2))\n          + y_pipxnc_3 * y_pipxnc_4 * 400 * (log(fpxr) - log(fpxr(-1)))+ .025*400*log(qpxnc(-1)/pxnc(-1))",
          "coeff": [
            {
              "cf_name": "y_pipxnc(1)",
              "cf_value": 0.462801
            },
            {
              "cf_name": "y_pipxnc(2)",
              "cf_value": 0.229745
            },
            {
              "cf_name": "y_pipxnc(3)",
              "cf_value": -0.284477
            },
            {
              "cf_name": "y_pipxnc(4)",
              "cf_value": 0.1312355937
            }
          ],
          "rhs_eq_var": [
            "fpxr",
            "huqpct",
            "picnia",
            "pipxnc",
            "pxnc",
            "qpxnc"
          ]
        }
      },
      {
        "name": "pitarg",
        "equation_type": "Exogenous",
        "definition": "Target rate of consumption price inflation (used in policy reaction functions)",
        "exogenous_projection": 2
      },
      {
        "name": "pitrsh",
        "equation_type": "Exogenous",
        "definition": "Inflation threshold",
        "exogenous_projection": 2
      },
      {
        "name": "pkbfir",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Ratio of price of BFI stock (KBFI) to PXP",
        "standard_equation": {
          "eviews_equation": "pkbfir - pkbfir_aerr = upkbfir * pbfir",
          "python_equation": "pkbfir - pkbfir_aerr = upkbfir * pbfir",
          "rhs_eq_var": [
            "pbfir",
            "upkbfir"
          ]
        }
      },
      {
        "name": "pkir",
        "equation_type": "Exogenous",
        "definition": "Price index for stock of inventories, cw (relative to PXP)",
        "exogenous_projection": 2
      },
      {
        "name": "pl",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Compensation per hour,  business",
        "standard_equation": {
          "eviews_equation": "log(pl) - pl_aerr = log(pl(-1)) + pipl/400",
          "python_equation": "log(pl) - pl_aerr = log(pl(-1)) + pipl/400",
          "rhs_eq_var": [
            "pipl",
            "pl"
          ]
        }
      },
      {
        "name": "pmo",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for imports ex. petroleum, cw",
        "description": "The price index for non-petroleum imports (PMO) is modeled using a\nKalman filter specification in which the price level gradually\nconverges to a steady-state target.  The latter has two elements: a\nstochastic random walk (QPMO) and a weighted average of aggregate\nforeign and domestic prices.  Empirical work suggests that the\npass-through of changes in the exchange rate (FPX) or foreign prices\n(FPC) into dollar-denominated import prices is incomplete.  In\naccordance with this evidence, only 64 percent of any\nmovement in FPC or FPX is allowed to pass through to PMO in the long\nrun.  This pass-through relationship is defined in relative terms using\nthe price of US business output, which accounts for the presence of\nPXB in the equilibrium formula. The PMO equation also contains the\ncontemporaneous rates of foreign and domestic price inflation with the\ntwo coefficients restricted to sum to one.",
        "standard_equation": {
          "eviews_equation": "dlog(pmo)  - pmo_aerr =\n           y_pmo(1)\n          + y_pmo(2) * (log(qpmo) + .64*log(fpc(-1)/fpx(-1)) + .36*log(pxb(-1)) - log(pmo(-1)))\n          + y_pmo(3) * dlog(fpc/fpx) + (1\n          -y_pmo(3)) * dlog(pxb)",
          "python_equation": "(log(pmo) - log(pmo(-1)))  - pmo_aerr =\n           y_pmo_1\n          + y_pmo_2 * (log(qpmo) + .64*log(fpc(-1)/fpx(-1)) + .36*log(pxb(-1)) - log(pmo(-1)))\n          + y_pmo_3 * (log(fpc/fpx) - log(fpc(-1)/fpx(-1))) + (1\n          -y_pmo_3) * (log(pxb) - log(pxb(-1)))",
          "coeff": [
            {
              "cf_name": "y_pmo(1)",
              "cf_value": 0,
              "t_stat": 0.00570033516761314
            },
            {
              "cf_name": "y_pmo(2)",
              "cf_value": 0.3776815983707077,
              "t_stat": 6.056507577021148
            },
            {
              "cf_name": "y_pmo(3)",
              "cf_value": 0.2343966603329429,
              "t_stat": 15.62606599938812
            }
          ],
          "rhs_eq_var": [
            "fpc",
            "fpx",
            "pmo",
            "pxb",
            "qpmo"
          ],
          "estimation_statistics": {
            "date": "08/30/18   Time: 10:02",
            "method": "Maximum likelihood  (BFGS / Marquardt steps)",
            "sample_end": "2017Q4",
            "sample_start": "1965Q1"
          }
        },
        "kfcalc": 1,
        "stochastic_type": "PR"
      },
      {
        "name": "pmp",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for petroleum imports",
        "description": "The chain-weight price index for imported petroleum products (PMP)\nis proportional to the per barrel price of imported crude oil (POIL).",
        "standard_equation": {
          "eviews_equation": "pmp - pmp_aerr = upmp*poil",
          "python_equation": "pmp - pmp_aerr = upmp*poil",
          "rhs_eq_var": [
            "poil",
            "upmp"
          ]
        }
      },
      {
        "name": "poil",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price of imported oil ($ per barrel)",
        "standard_equation": {
          "eviews_equation": "poil - poil_aerr = poilr*pxb",
          "python_equation": "poil - poil_aerr = poilr*pxb",
          "rhs_eq_var": [
            "poilr",
            "pxb"
          ]
        }
      },
      {
        "name": "poilr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price of imported oil, relative to price index for bus. sector output",
        "description": "Real oil prices error-correct to their long-run trend, POILRT.",
        "standard_equation": {
          "eviews_equation": "dlog(poilr)  - poilr_aerr =\n           y_poilr(1) * log(poilr(-1)/poilrt(-1))\n          + y_poilr(2)\n          + y_poilr(3) * d( log(poilr(-1)), 0, 1 )\n          + y_poilr(4) * d( log(poilrt), 0, 1 )",
          "python_equation": "(log(poilr) - log(poilr(-1)))  - poilr_aerr =\n           y_poilr_1 * log(poilr(-1)/poilrt(-1))\n          + y_poilr_2\n          + y_poilr_3 * ( log(poilr(-1)) - ( log(poilr(-2))))\n          + y_poilr_4 * ( log(poilrt) - ( log(poilrt(-1))))",
          "coeff": [
            {
              "cf_name": "y_poilr(1)",
              "cf_value": -0.2189945671343387,
              "t_stat": -6.092084124540779
            },
            {
              "cf_name": "y_poilr(2)",
              "cf_value": -0.007197716577611038,
              "t_stat": -0.8680077614487675
            },
            {
              "cf_name": "y_poilr(3)",
              "cf_value": 0.3903451978006103,
              "t_stat": 6.087907897950358
            },
            {
              "cf_name": "y_poilr(4)",
              "cf_value": 0.3940619235700209,
              "t_stat": 1.251637004042893
            }
          ],
          "rhs_eq_var": [
            "poilr",
            "poilrt"
          ],
          "estimation_statistics": {
            "F_statistic": 23.64717927531193,
            "adjusted_r_squared": 0.243569094640657,
            "date": "08/30/18   Time: 10:00",
            "durbin_watson": 1.888420049356177,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 3.283851277644087e-13,
            "r_squared": 0.2543240364230174,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.1150196236879837
          }
        },
        "kfcalc": 1,
        "stochastic_type": "PR"
      },
      {
        "name": "poilrt",
        "equation_type": "Exogenous",
        "definition": "Price of imported oil, relative to price index for bus. sector output, trend",
        "exogenous_projection": 2
      },
      {
        "name": "ptr",
        "equation_type": "Behavioral",
        "sector": "Expectations",
        "definition": "10-year expected PCE price inflation (Survey of Professional Forecasters)",
        "description": "PTR gradually adjusts toward a weighted average of actual and\ntarget inflation.\n\nHistorical values of PTR come from several sources.  Since 1991q4,\nthe source is the Survey of Professional Forecasters (SPF), first for\nexpected CPI inflation and then, when it becomes available in 2007,\nfor expected PCE price inflation. PTR data from 1981q1 to 1991q3 is\nprimarily from a survey conducted by Richard Hoey.  The Hoey and SPF\nCPI observations are reduced by 40 basis to account for the average\ndifference between CPI and PCE inflation. Values of PTR before\n1981 are constructed in a manner similar to the one described in\nKozicki and Tinsley (2001, section 3.3), \"Term Structure Views of\nMonetary Policy under Alternative Models of Agent Expectations,\"\nJournal of Economic Dynamics and Control, 25: 149-184.",
        "standard_equation": {
          "eviews_equation": "ptr - ptr_aerr = y_ptr(1)*ptr(-1) + y_ptr(2)*picxfe(-1)+ y_ptr(3)*pitarg(-1)",
          "python_equation": "ptr - ptr_aerr = y_ptr_1*ptr(-1) + y_ptr_2*picxfe(-1)+ y_ptr_3*pitarg(-1)",
          "coeff": [
            {
              "cf_name": "y_ptr(1)",
              "cf_value": 0.9
            },
            {
              "cf_name": "y_ptr(2)",
              "cf_value": 0.05
            },
            {
              "cf_name": "y_ptr(3)",
              "cf_value": 0.05
            }
          ],
          "rhs_eq_var": [
            "picxfe",
            "pitarg",
            "ptr"
          ]
        }
      },
      {
        "name": "pwstar",
        "equation_type": "Exogenous",
        "definition": "Equilibrium business price markup",
        "description": "PWSTAR, which is the nonstationary component of the inverse of the\nlog labor share in the adjusted nonfarm business sector, is estimated\nhistorically as a one-sided HP filter (lambda = 80000) of\nlog(PXG*LPRDT/PL).",
        "exogenous_projection": 8
      },
      {
        "name": "pxb",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Price index for business output",
        "standard_equation": {
          "eviews_equation": "pxb - pxb_aerr = upxb*pgdp",
          "python_equation": "pxb - pxb_aerr = upxb*pgdp",
          "rhs_eq_var": [
            "pgdp",
            "upxb"
          ]
        }
      },
      {
        "name": "pxnc",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price of adjusted final sales excluding consumption",
        "standard_equation": {
          "eviews_equation": "d( log(pxnc), 0, 1 ) - pxnc_aerr = pipxnc/400",
          "python_equation": "( log(pxnc) - ( log(pxnc(-1)))) - pxnc_aerr = pipxnc/400",
          "rhs_eq_var": "pipxnc"
        }
      },
      {
        "name": "pxp",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for final sales plus imports less gov. labor",
        "standard_equation": {
          "eviews_equation": "log(pxp)   - pxp_aerr = log(pxp(-1))\n          +y_pxp(1)*log(pcnia/pcnia(-1))\n          +y_pxp(2)*log(pxnc/pxnc(-1))",
          "python_equation": "log(pxp)   - pxp_aerr = log(pxp(-1))\n          +y_pxp_1*log(pcnia/pcnia(-1))\n          +y_pxp_2*log(pxnc/pxnc(-1))",
          "coeff": [
            {
              "cf_name": "y_pxp(1)",
              "cf_value": 0.6469
            },
            {
              "cf_name": "y_pxp(2)",
              "cf_value": 0.3531
            }
          ],
          "rhs_eq_var": [
            "pcnia",
            "pxnc",
            "pxp"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999998397340336,
            "date": "08/30/18   Time: 09:58",
            "durbin_watson": 1.511393471878079,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9999998798005252,
            "sample_end": "2017Q4",
            "sample_start": "2016Q4",
            "se_of_regression": 0.000003135921495759801
          }
        }
      },
      {
        "name": "pxr",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Price index for exports, cw (relative to PXP)",
        "standard_equation": {
          "eviews_equation": "log(pxr) - pxr_aerr - log(pxr(-1)) = y_pxr(1) + pipxnc/400 + dpadj - d(log(pxp), 0, 1)",
          "python_equation": "log(pxr) - pxr_aerr - log(pxr(-1)) = y_pxr_1 + pipxnc/400 + dpadj - (log(pxp) - (log(pxp(-1))))",
          "coeff": {
            "cf_name": "y_pxr(1)",
            "cf_value": 0
          },
          "rhs_eq_var": [
            "dpadj",
            "pipxnc",
            "pxp"
          ]
        },
        "kfcalc": 1,
        "stochastic_type": "OT"
      },
      {
        "name": "qebfi",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "Desired level of investment in business investment",
        "description": "The target rate of investment is defined as the rate necessary to\nkeep the capital-output ratio at its optimal value (VBFI).",
        "standard_equation": {
          "eviews_equation": "qebfi - qebfi_aerr = xb*vbfi*(hxbt/100 -.01*hgpbfir+jrbfi)",
          "python_equation": "qebfi - qebfi_aerr = xb*vbfi*(hxbt/100 -.01*hgpbfir+jrbfi)",
          "rhs_eq_var": [
            "hgpbfir",
            "hxbt",
            "jrbfi",
            "vbfi",
            "xb"
          ]
        }
      },
      {
        "name": "qec",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Desired level of consumption (FRBUS definition)",
        "description": "QEC is the desired level of spending associated with consumption of\nnondurable goods and services plus the imputed service flow from the\nstock of durables (EC). The estimated coefficient values and equation statistics come from\na cointegrating regression of EC on the set of explanatory variables.\nQEC is measured historically as the fitted values of this regression.",
        "standard_equation": {
          "eviews_equation": "log(qec)  - qec_aerr =\n           y_qec(1)\n          + y_qec(2)*log(zyh-zyht-zyhp)\n          + y_qec(3)*log(zyht) + (1\n          -y_qec(2)\n          -y_qec(3)\n          -y_qec(4))*log(zyhp)\n          + y_qec(4)*log(wpo+wps)",
          "python_equation": "log(qec)  - qec_aerr =\n           y_qec_1\n          + y_qec_2*log(zyh-zyht-zyhp)\n          + y_qec_3*log(zyht) + (1\n          -y_qec_2\n          -y_qec_3\n          -y_qec_4)*log(zyhp)\n          + y_qec_4*log(wpo+wps)",
          "coeff": [
            {
              "cf_name": "y_qec(1)",
              "cf_value": 0.3653279067017037,
              "t_stat": 9.770628366419192
            },
            {
              "cf_name": "y_qec(2)",
              "cf_value": 0.493602432836492,
              "t_stat": 31.91994930540975
            },
            {
              "cf_name": "y_qec(3)",
              "cf_value": 0.1858248429134642,
              "t_stat": 27.65659022873051
            },
            {
              "cf_name": "y_qec(4)",
              "cf_value": 0.1873934907158843,
              "t_stat": 16.46072326015892
            }
          ],
          "rhs_eq_var": [
            "wpo",
            "wps",
            "zyh",
            "zyhp",
            "zyht"
          ],
          "estimation_statistics": {
            "F_statistic": 87425.30768086495,
            "adjusted_r_squared": 0.9992304026698688,
            "date": "08/30/18   Time: 09:58",
            "durbin_watson": 0.1755915855180969,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 0,
            "r_squared": 0.9992418323331876,
            "sample_end": "2017Q4",
            "sample_start": "1967Q2",
            "se_of_regression": 0.01268295053665157
          }
        }
      },
      {
        "name": "qecd",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Target level of consumption of durable goods, trending component",
        "description": "The ratio of the target level of spending on consumer durable goods\nto the target level of overall consumption depends on two factors.\nThe first factor is the relative rental rate, which is the product of\nthe relative purchase price of consumer durables, PCDR, and the real\nfinancial cost of capital (plus depreciation) for such goods, RCCD.\nThe relative rental rate is associated with the steady-state condition\nfor the stock of consumer durables.  The second factor converts the\nsteady-state stock condition to one for gross investment by multiplying\nthe stock condition by the sum of two factors -- the depreciation rate\nfor durable goods, and the steady-state growth rate of the target\ncapital stock.  The latter factor equals the sum of trend output\ngrowth (HGGDPT) and the trend rate of decline in the relative price of\nconsumer durable goods (HGPCDR, weighted by the real rental rate\nelasticity).\n\nThe coefficients values and equation statistics come from a\ncointegrating regression in which actual investment (ECD) replaces\ntarget investment (QECD) as the dependent variable.",
        "standard_equation": {
          "eviews_equation": "qecd  - qecd_aerr = qec*(jrcd/4 + (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)) /8 / 400\n          + y_qecd(1)*hgpcdr/400)*exp\n          (y_qecd(2)\n          + y_qecd(3)*(log(pcdr) + log(rccd)))",
          "python_equation": "qecd  - qecd_aerr = qec*(jrcd/4 + (hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)) /8 / 400\n          + y_qecd_1*hgpcdr/400)*exp\n          (y_qecd_2\n          + y_qecd_3*(log(pcdr) + log(rccd)))",
          "coeff": [
            {
              "cf_name": "y_qecd(1)",
              "cf_value": -0.5843539676290892,
              "t_stat": -67.29278199675043
            },
            {
              "cf_name": "y_qecd(2)",
              "cf_value": 2.4132166616749,
              "t_stat": 74.46889604283302
            },
            {
              "cf_name": "y_qecd(3)",
              "cf_value": -0.5843539676290892
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "hgpcdr",
            "jrcd",
            "pcdr",
            "qec",
            "rccd"
          ],
          "estimation_statistics": {
            "F_statistic": 5502.542407933025,
            "adjusted_r_squared": 0.9659382748639029,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 0.2486800296054228,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 8.187489598949723e-144,
            "r_squared": 0.9661138507666662,
            "sample_end": "2017Q4",
            "sample_start": "1969Q2",
            "se_of_regression": 0.05446736848378917
          }
        }
      },
      {
        "name": "qeco",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Desired level of consumption of nondurable goods and nonhousing services",
        "description": "The elasticity of the desired level of consumption on nondurable\ngoods and non-housing services is one with respect to the\ndesired level of overall consumption and minus one with respect to the\nrelative price (PCOR) of consumption on nondurable goods and\nnon-housing services to overall consumption.  A constant term ensures\nthat historically the average log difference between ECO and QECO is\nzero.",
        "standard_equation": {
          "eviews_equation": "log(qeco)  - qeco_aerr =\n           y_qeco(1) + log(qec) - log(pcor)",
          "python_equation": "log(qeco)  - qeco_aerr =\n           y_qeco_1 + log(qec) - log(pcor)",
          "coeff": {
            "cf_name": "y_qeco(1)",
            "cf_value": -0.3258628580621771,
            "t_stat": -322.5042869083098
          },
          "rhs_eq_var": [
            "pcor",
            "qec"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9988542660886428,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 0.174035161519942,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9988542660886428,
            "sample_end": "2017Q4",
            "sample_start": "1965Q3",
            "se_of_regression": 0.01464229046081368
          }
        }
      },
      {
        "name": "qeh",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Target level of residential investment",
        "description": "The ratio of the target level of residential investment to the\ntarget level of overall consumption depends on two factors.  The first\nfactor is the relative rental rate, which is the product of the\nrelative purchase price of residential investment, PHR*PXP/PCNIA, and the\nreal financial cost of capital (plus depreciation) for such goods,\nRCCH.  The relative rental rate is associated with the steady-state\ncondition for the stock of housing.  The second factor converts the\nsteady-state stock condition to one for gross investment by multiplying\nthe stock condition by the sum of two terms -- the depreciation rate\nfor residential structures, and the steady-state growth rate of the\ntarget capital stock.  The latter term equals trend output growth\n(HGGDPT).  (Note: unlike consumer durables, no adjustment is made to\nthe steady-state growth of the target stock to control for trend\nmovements in the relative price of housing construction, because the\nrelative price does not show a pronounced trend.)\n\nThe coefficients values and equation statistics come from a\ncointegrating regression in which actual residential investment (EH) replaces\ntarget investment (QEH) as the dependent variable.",
        "standard_equation": {
          "eviews_equation": "qeh  - qeh_aerr = qec\n      * (jrh/4 +\n      ((hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)+hggdpt(-8)+hggdpt(-9)+hggdpt(-10)+hggdpt(-11)+hggdpt(-12)+hggdpt(-13)+hggdpt(-14)+hggdpt(-15)) /16) / 400)\n      * exp\n          (y_qeh(1) - log(phr*pxp/pcnia)\n          + y_qeh(2)*log(rcch))",
          "python_equation": "qeh  - qeh_aerr = qec\n      * (jrh/4 +\n      ((hggdpt+hggdpt(-1)+hggdpt(-2)+hggdpt(-3)+hggdpt(-4)+hggdpt(-5)+hggdpt(-6)+hggdpt(-7)+hggdpt(-8)+hggdpt(-9)+hggdpt(-10)+hggdpt(-11)+hggdpt(-12)+hggdpt(-13)+hggdpt(-14)+hggdpt(-15)) /16) / 400)\n      * exp\n          (y_qeh_1 - log(phr*pxp/pcnia)\n          + y_qeh_2*log(rcch))",
          "coeff": [
            {
              "cf_name": "y_qeh(1)",
              "cf_value": 1.909300384501687,
              "t_stat": "NA"
            },
            {
              "cf_name": "y_qeh(2)",
              "cf_value": -0.1168105360328174,
              "t_stat": "NA"
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "jrh",
            "pcnia",
            "phr",
            "pxp",
            "qec",
            "rcch"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 1,
            "date": "08/30/18   Time: 10:02",
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 1,
            "sample_end": "2017Q4",
            "sample_start": "1964Q1",
            "se_of_regression": 0
          }
        }
      },
      {
        "name": "qkir",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Desired Inventory Sales Ratio",
        "description": "The target inventory-sales ratio is estimated along with the\nequation for the stock of inventories (KI) using the Kalman filter.\nTo ensure that long-run simulations are characterized by balanced\ngrowth, exogenous variable DGLPRD can be set to 1.0 to make the target\ninventory-sales ratio constant.",
        "standard_equation": {
          "eviews_equation": "log(qkir) - qkir_aerr = (1-dglprd)*y_qkir(1) + log(qkir(-1))",
          "python_equation": "log(qkir) - qkir_aerr = (1-dglprd)*y_qkir_1 + log(qkir(-1))",
          "coeff": {
            "cf_name": "y_qkir(1)",
            "cf_value": -0.001885366737710053
          },
          "rhs_eq_var": [
            "dglprd",
            "qkir"
          ]
        }
      },
      {
        "name": "qleor",
        "equation_type": "Exogenous",
        "definition": "Desired ratio of employment discrepancy to the labor force",
        "exogenous_projection": 2
      },
      {
        "name": "qlf",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Desired level of civilian labor force",
        "description": "The trend labor force is equal to the product of the trend\nparticipation rate and the size of the population age 16 and up.",
        "standard_equation": {
          "eviews_equation": "qlf - qlf_aerr = qlfpr * n16",
          "python_equation": "qlf - qlf_aerr = qlfpr * n16",
          "rhs_eq_var": [
            "n16",
            "qlfpr"
          ]
        }
      },
      {
        "name": "qlfpr",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Trend labor force participation rate",
        "description": "The trend participation rate follows a random walk with time-varying\ndrift.",
        "standard_equation": {
          "eviews_equation": "qlfpr - qlfpr_aerr = qlfpr(-1) + hqlfpr",
          "python_equation": "qlfpr - qlfpr_aerr = qlfpr(-1) + hqlfpr",
          "rhs_eq_var": [
            "hqlfpr",
            "qlfpr"
          ]
        }
      },
      {
        "name": "qlhp",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Desired level of  business labor hours",
        "description": "The desired level of aggregate hours equals business sector output (XB)\ndivided by trend labor productivity (LPRDT).",
        "standard_equation": {
          "eviews_equation": "qlhp - qlhp_aerr = xbo/lprdt",
          "python_equation": "qlhp - qlhp_aerr = xbo/lprdt",
          "rhs_eq_var": [
            "lprdt",
            "xbo"
          ]
        }
      },
      {
        "name": "qlww",
        "equation_type": "Identity",
        "sector": "Labor Market",
        "definition": "Trend workweek,  business sector (employee and  self-employed)",
        "description": "The trend workweek is a random walk with drift.",
        "standard_equation": {
          "eviews_equation": "log(qlww) - qlww_aerr = log(qlww(-1)) + hqlww(-1)/400",
          "python_equation": "log(qlww) - qlww_aerr = log(qlww(-1)) + hqlww(-1)/400",
          "rhs_eq_var": [
            "hqlww",
            "qlww"
          ]
        }
      },
      {
        "name": "qpcnia",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Desired level of consumption price",
        "standard_equation": {
          "eviews_equation": "log(qpcnia) - qpcnia_aerr = log(qpxp) + log(uqpct)",
          "python_equation": "log(qpcnia) - qpcnia_aerr = log(qpxp) + log(uqpct)",
          "rhs_eq_var": [
            "qpxp",
            "uqpct"
          ]
        }
      },
      {
        "name": "qpl",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Desired level of compensation per hour, trending component",
        "description": "The target level of hourly compensation (QPL) is defined by a\ncondition that is just a rearrangement of the relationship used to\ndefine the target price level (QPXB).  As a result, the percentage\nwage gap, log(PL/QPL), is the negative of the percentage price gap,\nlog(PXB/QPXB), and both measure the deviation of the labor share\n(inverse price markup) in the adjusted nonfarm business sector from\nits long-run equilibrium.",
        "standard_equation": {
          "eviews_equation": "log(qpl) - qpl_aerr = log(pl) + y_qpl(1) * log(pxb/qpxb)",
          "python_equation": "log(qpl) - qpl_aerr = log(pl) + y_qpl_1 * log(pxb/qpxb)",
          "coeff": {
            "cf_name": "y_qpl(1)",
            "cf_value": 1
          },
          "rhs_eq_var": [
            "pl",
            "pxb",
            "qpxb"
          ]
        }
      },
      {
        "name": "qpmo",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Random walk component of non-oil import prices",
        "description": "In the long run, the level of non-oil import prices is determined\nby two factors -- a weighted average of foreign consumer prices\nexpressed in dollars and domestic output prices; and a stochastic\ntrend component that takes account of permanent movements in the\nrelative price of imported goods with respect to the prices of both\nforeign consumption and domestic output.  The stochastic trend\ncomponent, QPMO, is a random walk with drift and is derived from\nKalman filter estimation of the non-oil import price (PMO) equation.",
        "standard_equation": {
          "eviews_equation": "log(qpmo) - qpmo_aerr = log(qpmo(-1)) + y_qpmo(1)",
          "python_equation": "log(qpmo) - qpmo_aerr = log(qpmo(-1)) + y_qpmo_1",
          "coeff": {
            "cf_name": "y_qpmo(1)",
            "cf_value": -0.003347
          },
          "rhs_eq_var": "qpmo"
        }
      },
      {
        "name": "qpxb",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Desired price level of private output ex. energy, housing, and farm",
        "description": "Given the levels of hourly compensation (PL) and trend labor\nproductivity (LRPDT) in the nonfarm business sector, QPXB is\nthe level of that sector's price that would set the price markup\n(inverse labor share) equal to its equilibrium (PWSTAR).",
        "standard_equation": {
          "eviews_equation": "log(qpxb) - qpxb_aerr = log(pwstar) + y_qpxb(1) + y_qpxb(2)*log(pl/lprdt)",
          "python_equation": "log(qpxb) - qpxb_aerr = log(pwstar) + y_qpxb_1 + y_qpxb_2*log(pl/lprdt)",
          "coeff": [
            {
              "cf_name": "y_qpxb(1)",
              "cf_value": 0
            },
            {
              "cf_name": "y_qpxb(2)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "lprdt",
            "pl",
            "pwstar"
          ]
        }
      },
      {
        "name": "qpxnc",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Desired level of nonconsumption price",
        "standard_equation": {
          "eviews_equation": "log(qpxnc) - qpxnc_aerr = log(pxnc)\n                        + y_qpxnc(1) * log(qpxp/pxp)\n                        + y_qpxnc(2) * log(qpcnia/pcnia)",
          "python_equation": "log(qpxnc) - qpxnc_aerr = log(pxnc)\n                        + y_qpxnc_1 * log(qpxp/pxp)\n                        + y_qpxnc_2 * log(qpcnia/pcnia)",
          "coeff": [
            {
              "cf_name": "y_qpxnc(1)",
              "cf_value": 2.98507462687
            },
            {
              "cf_name": "y_qpxnc(2)",
              "cf_value": -1.98507462687
            }
          ],
          "rhs_eq_var": [
            "pcnia",
            "pxnc",
            "pxp",
            "qpcnia",
            "qpxp"
          ]
        }
      },
      {
        "name": "qpxp",
        "equation_type": "Identity",
        "sector": "Wages and Prices",
        "definition": "Desired price level of adjusted final sales",
        "description": "",
        "standard_equation": {
          "eviews_equation": "qpxp - qpxp_aerr = 100*(xpn + (.01*qpxb*xb-xbn))/xp",
          "python_equation": "qpxp - qpxp_aerr = 100*(xpn + (.01*qpxb*xb-xbn))/xp",
          "rhs_eq_var": [
            "qpxb",
            "xb",
            "xbn",
            "xp",
            "xpn"
          ]
        }
      },
      {
        "name": "qynidn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Desired level of dividends",
        "description": "The desired level of dividends is a constant fraction of after-tax\ncorporate profits, with a shift in the desired fraction starting in\n1980.  Coefficient values are taken from a regression of the log of\nthe actual ratio of dividends to after-tax profits on the explanatory\nvariables.  A max function is used to prevent simulation problems\narising from attempts to take the log of a negative number.",
        "standard_equation": {
          "eviews_equation": "log(qynidn)   - qynidn_aerr =\n           y_qynidn(1)\n          + y_qynidn(2)*d79a\n          + y_qynidn(3)*log((@recode((ynicpn-tcin)&gt;(.01),ynicpn-tcin,.01)))",
          "python_equation": "log(qynidn)   - qynidn_aerr =\n           y_qynidn_1\n          + y_qynidn_2*d79a\n          + y_qynidn_3*log((max((ynicpn-tcin),(.01))))",
          "coeff": [
            {
              "cf_name": "y_qynidn(1)",
              "cf_value": -0.9155533588082586,
              "t_stat": -46.07889399573773
            },
            {
              "cf_name": "y_qynidn(2)",
              "cf_value": 0.3548225925232601,
              "t_stat": 15.15689413622798
            },
            {
              "cf_name": "y_qynidn(3)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "d79a",
            "tcin",
            "ynicpn"
          ],
          "estimation_statistics": {
            "F_statistic": 229.7314398568205,
            "adjusted_r_squared": 0.5213472732464004,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 0.2032855651222054,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 1.68073934433181e-35,
            "r_squared": 0.5236265719452271,
            "sample_end": "2017Q4",
            "sample_start": "1965Q2",
            "se_of_regression": 0.152618654206574
          }
        }
      },
      {
        "name": "rbbb",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "S&amp;P BBB corporate bond rate",
        "standard_equation": {
          "eviews_equation": "rbbb - rbbb_aerr = rbbbp + rg10",
          "python_equation": "rbbb - rbbb_aerr = rbbbp + rg10",
          "rhs_eq_var": [
            "rbbbp",
            "rg10"
          ]
        }
      },
      {
        "name": "rbbbp",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "S&amp;P BBB corporate bond rate, risk/term premium",
        "description": "",
        "standard_equation": {
          "eviews_equation": "rbbbp  - rbbbp_aerr =\n           y_rbbbp(1)\n          + y_rbbbp(2)*zgap10\n          + y_rbbbp(3)*( rbbbp(-1)\n          - y_rbbbp(1)\n          - y_rbbbp(2)*zgap10(-1))",
          "python_equation": "rbbbp  - rbbbp_aerr =\n           y_rbbbp_1\n          + y_rbbbp_2*zgap10\n          + y_rbbbp_3*( rbbbp(-1)\n          - y_rbbbp_1\n          - y_rbbbp_2*zgap10(-1))",
          "coeff": [
            {
              "cf_name": "y_rbbbp(1)",
              "cf_value": 1.972218
            },
            {
              "cf_name": "y_rbbbp(2)",
              "cf_value": -0.189051
            },
            {
              "cf_name": "y_rbbbp(3)",
              "cf_value": 0.848879
            }
          ],
          "rhs_eq_var": [
            "rbbbp",
            "zgap10"
          ],
          "estimation_statistics": ""
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rbfi",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "After-tax real financial cost of capital for business investment",
        "description": "The firm's financing cost is measured as a weighted average of\nborrowing costs in debt and equity markets. The cost of debt finance is proxied by the yield on 5-year Treasury\nbonds plus a risk premium measured by the spread between the BBB corporate bond\nrate and the yield on 10-year Treasury bonds, and allows for the tax\ndeductibility of interest payments.  The expected rate of inflation\nover a 5-year horizon is subtracted from the after-tax nominal yield\nto obtain the real after-tax rate of interest.  The cost of equity\nfinance is measured as the expected real return to equity.",
        "standard_equation": {
          "eviews_equation": "rbfi - rbfi_aerr = 0.5*(7.2 + (1-trfcim)*(rg5 + rbbb- rg10) - zpib5)\n                 + 0.5*req",
          "python_equation": "rbfi - rbfi_aerr = 0.5*(7.2 + (1-trfcim)*(rg5 + rbbb- rg10) - zpib5)\n                 + 0.5*req",
          "rhs_eq_var": [
            "rbbb",
            "req",
            "rg10",
            "rg5",
            "trfcim",
            "zpib5"
          ]
        }
      },
      {
        "name": "rcar",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "New car loan rate at finance companies",
        "description": "In the long run, the rate on new car loans equals the yield\non 5-year Treasury bonds, plus an exogenous risk premium.  This\nrisk premium declined over the 1960s and 1970s, but appears to\nhave been stable since 1980; this effect is captured using the\ndummy variable D79A and time trend T47.  The lagged value of the\nauto loan rate is included in the equation to capture the\nsluggish adjustment of bank loan rates to movements in market\ninterest rates.",
        "standard_equation": {
          "eviews_equation": "rcar  - rcar_aerr =\n           y_rcar(1)\n          + y_rcar(2) * d79a\n          + y_rcar(3) * ((1-d79a)*t47)\n          + y_rcar(4) * rcar(-1)\n          + y_rcar(5) * rg5\n          + y_rcar(6) * rg5(-1)",
          "python_equation": "rcar  - rcar_aerr =\n           y_rcar_1\n          + y_rcar_2 * d79a\n          + y_rcar_3 * ((1-d79a)*t47)\n          + y_rcar_4 * rcar(-1)\n          + y_rcar_5 * rg5\n          + y_rcar_6 * rg5(-1)",
          "coeff": [
            {
              "cf_name": "y_rcar(1)",
              "cf_value": 2.078274063162198,
              "t_stat": 6.953353560871758
            },
            {
              "cf_name": "y_rcar(2)",
              "cf_value": -1.163656496933583,
              "t_stat": -4.563821930722726
            },
            {
              "cf_name": "y_rcar(3)",
              "cf_value": -0.008285302552441101,
              "t_stat": -3.48724808868144
            },
            {
              "cf_name": "y_rcar(4)",
              "cf_value": 0.6967481719141809,
              "t_stat": 26.60862704426585
            },
            {
              "cf_name": "y_rcar(5)",
              "cf_value": 0.1016693350391095,
              "t_stat": 2.680941136659083
            },
            {
              "cf_name": "y_rcar(6)",
              "cf_value": 0.2015824930467097
            }
          ],
          "rhs_eq_var": [
            "d79a",
            "rcar",
            "rg5",
            "t47"
          ],
          "estimation_statistics": {
            "F_statistic": 5118.994138673028,
            "adjusted_r_squared": 0.9897983735831228,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.593068745032383,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 1.126603345764567e-205,
            "r_squared": 0.9899917693445802,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.2962987270861543
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rccd",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Cost of capital for consumer durables",
        "description": "The real user cost of the stock of consumer durable goods\n(excluding the purchase price of new goods) equals the sum of the\ndepreciation rate (JRCD) and the real interest rate.  The latter is\napproximated by the new auto loan rate minus expected inflation over\nthe next five years.  A MAX function is included to prevent RCCD from\ntaking on implausible values, improving the stability of the model in\nstochastic simulations.  Over history, RCCD has never approached this\nfloor.",
        "standard_equation": {
          "eviews_equation": "rccd - rccd_aerr = (@recode((100*jrcd + rcar - zpi5)&gt;( .01),100*jrcd + rcar - zpi5, .01))",
          "python_equation": "rccd - rccd_aerr = (max((100*jrcd + rcar - zpi5),( .01)))",
          "rhs_eq_var": [
            "jrcd",
            "rcar",
            "zpi5"
          ]
        }
      },
      {
        "name": "rcch",
        "equation_type": "Identity",
        "sector": "Household Expenditures",
        "definition": "Cost of capital for residential investment",
        "description": "The real user cost of housing (excluding the purchase price of\nnew construction) equals the depreciation rate JRH, plus the real\nafter-tax mortgage rate (1-TRFPM/100)*RME-ZPI10, plus the effective\nmarginal property tax rate (1-TRFPM/100)*TRSPP.  A MAX function is\nincluded to prevent RCCH from taking on implausible values,\nimproving the stability of the model in stochastic simulations. Over\nhistory, RCCH has never approached this floor.\n\nNote:  TRFPM is the marginal federal income tax rate for the taxpayers\nwith household incomes that are twice the median; this group is\nconsidered the most representative of households who itemize.",
        "standard_equation": {
          "eviews_equation": "rcch - rcch_aerr = (@recode((100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10)&gt;( .1),100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10, .1))",
          "python_equation": "rcch - rcch_aerr = (max((100*jrh + (1-trfpm/100)*(rme+100*trspp) - zpi10),( .1)))",
          "rhs_eq_var": [
            "jrh",
            "rme",
            "trfpm",
            "trspp",
            "zpi10"
          ]
        }
      },
      {
        "name": "rcgain",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Rate of capital gain on the non-equity portion of household wealth",
        "description": "RCGAIN measures the rate of capital gain on non-equity, non-housing\nhousehold net worth.  In addtion to an adjustment for inflation, its equation has a\ncyclical component and an autocorrelated residual.",
        "standard_equation": {
          "eviews_equation": "rcgain  - rcgain_aerr = picx4\n          + y_rcgain(1)\n          + y_rcgain(2)*xgap2\n          + y_rcgain(3)*(rcgain(-1) - picx4(-1)\n          - y_rcgain(4)\n          - y_rcgain(5)*xgap2)",
          "python_equation": "rcgain  - rcgain_aerr = picx4\n          + y_rcgain_1\n          + y_rcgain_2*xgap2\n          + y_rcgain_3*(rcgain(-1) - picx4(-1)\n          - y_rcgain_4\n          - y_rcgain_5*xgap2)",
          "coeff": [
            {
              "cf_name": "y_rcgain(1)",
              "cf_value": -0.4097125100056558,
              "t_stat": -1.136880671120589
            },
            {
              "cf_name": "y_rcgain(2)",
              "cf_value": 0.4243575136593637,
              "t_stat": 3.940423673398673
            },
            {
              "cf_name": "y_rcgain(3)",
              "cf_value": 0.2257857751190805,
              "t_stat": 3.93826906058571
            },
            {
              "cf_name": "y_rcgain(4)",
              "cf_value": -0.4097125100056558
            },
            {
              "cf_name": "y_rcgain(5)",
              "cf_value": 0.4243575136593637
            }
          ],
          "rhs_eq_var": [
            "picx4",
            "rcgain",
            "xgap2"
          ],
          "estimation_statistics": {
            "F_statistic": 9.170730580739471,
            "adjusted_r_squared": 0.1010761214358822,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 2.086075012466668,
            "method": "ARMA Maximum Likelihood (BFGS)",
            "prob_F_statistic": 0.000009777220190100151,
            "r_squared": 0.1134466335262141,
            "sample_end": "2017Q4",
            "sample_start": "1963Q2",
            "se_of_regression": 3.971658968796835
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "req",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Real expected rate of return on equity",
        "description": "The rate of return on equity equals the rate on thirty-year Treasury\nbonds (RG30), minus the average rate of inflation expected to\nprevail over the coming 30 years  (ZPIC30), plus an equity premium\n(REQP).  The latter varies with the corporate bond premium (RBBBP)\nand also includes an AR(1) error term.",
        "standard_equation": {
          "eviews_equation": "req - req_aerr = rg30 - zpic30 + reqp",
          "python_equation": "req - req_aerr = rg30 - zpic30 + reqp",
          "rhs_eq_var": [
            "reqp",
            "rg30",
            "zpic30"
          ]
        }
      },
      {
        "name": "reqp",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Real expected rate of return on equity, premium component",
        "description": "The residuals from a regression of the equity term premium on an intercept and corporate bond risk premium (RBBBP) are assumed to follow an AR(1) process.",
        "standard_equation": {
          "eviews_equation": "reqp  - reqp_aerr =\n           y_reqp(1)\n          + y_reqp(2) * rbbbp\n          + y_reqp(3)*( reqp(-1)\n          - y_reqp(1)\n          - y_reqp(2)* rbbbp(-1) )",
          "python_equation": "reqp  - reqp_aerr =\n           y_reqp_1\n          + y_reqp_2 * rbbbp\n          + y_reqp_3*( reqp(-1)\n          - y_reqp_1\n          - y_reqp_2* rbbbp(-1) )",
          "coeff": [
            {
              "cf_name": "y_reqp(1)",
              "cf_value": 2.903727
            },
            {
              "cf_name": "y_reqp(2)",
              "cf_value": 0.808086
            },
            {
              "cf_name": "y_reqp(3)",
              "cf_value": 0.795819
            }
          ],
          "rhs_eq_var": [
            "rbbbp",
            "reqp"
          ],
          "estimation_statistics": ""
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rff",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Federal funds rate",
        "description": "The equation for the effective federal funds rate imposes the\nlower bound (RFFMIN) and, when DMPTRSH = 1, imposes a version of the\nunemployment and inflation threshold policy that appeared\nin FOMC statements from December 2012 to January 2014.  In a ZLB\nepisode, DMPTR = 0 before the thresholds are reached, and the funds\nrate is equal to the value of RFFMIN.  After one of the thresholds is\nbreached, DMPTR = 1, and, with a one-quarter lag, the funds rate is\nset according to the policy rule chosen by RFFRULE.",
        "standard_equation": {
          "eviews_equation": "rff - rff_aerr = (1-dmptrsh) * (@recode((rffrule)&gt;( rffmin),rffrule, rffmin))\n      + dmptrsh * (@recode(((dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin))&gt;( rffmin),(dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin), rffmin))",
          "python_equation": "rff - rff_aerr = (1-dmptrsh) * (max((rffrule),( rffmin)))\n      + dmptrsh * (max(((dmptr(-1)*rffrule + (1-dmptr(-1))*rffmin)),( rffmin)))",
          "rhs_eq_var": [
            "dmptr",
            "dmptrsh",
            "rffmin",
            "rffrule"
          ]
        }
      },
      {
        "name": "rffalt",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Value of eff. federal funds rate given by estimated policy rule",
        "standard_equation": {
          "eviews_equation": "rffalt - rffalt_aerr = y_rffalt(1)\n                     + y_rffalt(2) * rff(-1)\n                     + y_rffalt(3) * rff(-2)\n                     + y_rffalt(4) * xgap2\n                     + y_rffalt(5) * xgap2(-1)\n                     + y_rffalt(6) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )",
          "python_equation": "rffalt - rffalt_aerr = y_rffalt_1\n                     + y_rffalt_2 * rff(-1)\n                     + y_rffalt_3 * rff(-2)\n                     + y_rffalt_4 * xgap2\n                     + y_rffalt_5 * xgap2(-1)\n                     + y_rffalt_6 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )",
          "coeff": [
            {
              "cf_name": "y_rffalt(1)",
              "cf_value": 0.0551
            },
            {
              "cf_name": "y_rffalt(2)",
              "cf_value": 1.2
            },
            {
              "cf_name": "y_rffalt(3)",
              "cf_value": -0.39
            },
            {
              "cf_name": "y_rffalt(4)",
              "cf_value": 0.6954
            },
            {
              "cf_name": "y_rffalt(5)",
              "cf_value": -0.5168
            },
            {
              "cf_name": "y_rffalt(6)",
              "cf_value": 0.3287
            }
          ],
          "rhs_eq_var": [
            "picxfe",
            "rff",
            "xgap2"
          ]
        }
      },
      {
        "name": "rfffix",
        "equation_type": "Exogenous",
        "definition": "Federal funds rate given by fixed, pre-determined funds rate path",
        "exogenous_projection": 2
      },
      {
        "name": "rffintay",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Value of eff. federal funds rate given by the inertial Taylor rule",
        "description": "RFFINTAY is an inertial version of the Taylor Rule.  According to\nthe equation, the nominal funds rate gradually adjusts to a value\nconsistent with a Taylor rule in which the funds equals\nthe sum of the equilibrium real funds rate as perceived by\npolicymakers (RSTAR), a four-quarter moving average of actual\ninflation, and adjustements in response to deviations of actual\ninflation from the target rate of inflation (PITARG) and deviations of\nthe level of output from potential (XGAP2).",
        "standard_equation": {
          "eviews_equation": "rffintay - rffintay_aerr = y_rffintay(3) * rff(-1)\n                     + (1-y_rffintay(3)) * (rstar\n                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4\n                     + y_rffintay(1) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)\n                     + y_rffintay(2) * xgap2)",
          "python_equation": "rffintay - rffintay_aerr = y_rffintay_3 * rff(-1)\n                     + (1-y_rffintay_3) * (rstar\n                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4\n                     + y_rffintay_1 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)\n                     + y_rffintay_2 * xgap2)",
          "coeff": [
            {
              "cf_name": "y_rffintay(1)",
              "cf_value": 0.5
            },
            {
              "cf_name": "y_rffintay(2)",
              "cf_value": 1
            },
            {
              "cf_name": "y_rffintay(3)",
              "cf_value": 0.85
            }
          ],
          "rhs_eq_var": [
            "picxfe",
            "pitarg",
            "rff",
            "rstar",
            "xgap2"
          ]
        }
      },
      {
        "name": "rffmin",
        "equation_type": "Exogenous",
        "definition": "Minimum nominal funds rate (set at 0 to impose zero lower bound)",
        "exogenous_projection": 2
      },
      {
        "name": "rffrule",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Federal funds rate",
        "description": "The RFFRULE equation combines the seven basic options for setting\nthe federal funds rate in a form that yields the outcome for the funds\nrate under the chosen option.  The funds rate is exogenous in nominal\nterms when DMPEX is one and the other policy switches are zero.  The\nfunds rate is exogenous in real terms when DMPRR is one.  Other\nsettings select one of the policy reaction functions.",
        "standard_equation": {
          "eviews_equation": "rffrule - rffrule_aerr =  dmpex * rfffix\n                       + dmprr  * (rrfix +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )\n                       + dmptay * rfftay\n                       + dmptlr * rfftlr\n                       + dmpintay * rffintay\n                       + dmpalt * rffalt",
          "python_equation": "rffrule - rffrule_aerr =  dmpex * rfffix\n                       + dmprr  * (rrfix +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 )\n                       + dmptay * rfftay\n                       + dmptlr * rfftlr\n                       + dmpintay * rffintay\n                       + dmpalt * rffalt",
          "rhs_eq_var": [
            "dmpalt",
            "dmpex",
            "dmpgen",
            "dmpintay",
            "dmprr",
            "dmptay",
            "dmptlr",
            "picxfe",
            "rffalt",
            "rfffix",
            "rffgen",
            "rffintay",
            "rfftay",
            "rfftlr",
            "rrfix"
          ]
        }
      },
      {
        "name": "rfftay",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Value of eff. federal funds rate given by the Taylor rule with output gap",
        "description": "RFFTAY is a version of the Taylor Rule.  According to the\nequation, the nominal funds rate equals the sum of\nthe equilibrium real funds rate as perceived by policymakers (RSTAR)\nand a four-quarter moving average of actual inflation.  This value\nis then adjusted in response to deviations of actual inflation from\nthe target rate of inflation (PITARG) and deviations of the level of\noutput from potential (XGAP2).",
        "standard_equation": {
          "eviews_equation": "rfftay - rfftay_aerr = rstar\n                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4\n                     + y_rfftay(1) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)\n                     + y_rfftay(2) * xgap2",
          "python_equation": "rfftay - rfftay_aerr = rstar\n                     +  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4\n                     + y_rfftay_1 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4 -pitarg)\n                     + y_rfftay_2 * xgap2",
          "coeff": [
            {
              "cf_name": "y_rfftay(1)",
              "cf_value": 0.5
            },
            {
              "cf_name": "y_rfftay(2)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "picxfe",
            "pitarg",
            "rstar",
            "xgap2"
          ]
        }
      },
      {
        "name": "rfftlr",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Value of eff. federal funds rate given by the Taylor rule with unemployment gap",
        "description": "RFFTLR is a version of the Taylor Rule.  According to the equation,\nthe nominal funds rate equals the sum of the equilibrium real funds\nrate as perceived by policymakers (RSTAR) and a four-quarter moving\naverage of actual inflation.  This value is then adjusted in response\nto deviations of actual inflation from the target rate of inflation\n(PITARG) and deviations of the unemployment rate from the natural rate\nof unemployment.",
        "standard_equation": {
          "eviews_equation": "rfftlr - rfftlr_aerr = rstar\n                       + y_rfftlr(1) * pitarg\n                       + y_rfftlr(2) * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3)) )\n                       + y_rfftlr(3) * (lurnat + deuc * leuc - lur)",
          "python_equation": "rfftlr - rfftlr_aerr = rstar\n                       + y_rfftlr_1 * pitarg\n                       + y_rfftlr_2 * ( ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3)) )\n                       + y_rfftlr_3 * (lurnat + deuc * leuc - lur)",
          "coeff": [
            {
              "cf_name": "y_rfftlr(1)",
              "cf_value": -0.5
            },
            {
              "cf_name": "y_rfftlr(2)",
              "cf_value": 0.375
            },
            {
              "cf_name": "y_rfftlr(3)",
              "cf_value": 1.1
            }
          ],
          "rhs_eq_var": [
            "deuc",
            "leuc",
            "lur",
            "lurnat",
            "picxfe",
            "pitarg",
            "rstar"
          ]
        }
      },
      {
        "name": "rfnict",
        "equation_type": "Exogenous",
        "definition": "Residual in FNICN equation",
        "exogenous_projection": 2
      },
      {
        "name": "rfrs10",
        "equation_type": "Exogenous",
        "definition": "Real foreign short-term interest rate",
        "exogenous_projection": 2
      },
      {
        "name": "rfynic",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Average yield earned on gross claims of US residents on the rest of the world",
        "description": "",
        "standard_equation": {
          "eviews_equation": "d(rfynic)  - rfynic_aerr =\n           y_rfynic(1)\n          + y_rfynic(2) * (rfynic(-1) - rfynil(-1))\n          + y_rfynic(3) * d(rfynic(-1))\n          + y_rfynic(4) * d(rfynil)",
          "python_equation": "(rfynic - (rfynic(-1)))  - rfynic_aerr =\n           y_rfynic_1\n          + y_rfynic_2 * (rfynic(-1) - rfynil(-1))\n          + y_rfynic_3 * (rfynic(-1) - (rfynic(-2)))\n          + y_rfynic_4 * (rfynil - (rfynil(-1)))",
          "coeff": [
            {
              "cf_name": "y_rfynic(1)",
              "cf_value": 0.2442546132781247,
              "t_stat": 3.92192750493124
            },
            {
              "cf_name": "y_rfynic(2)",
              "cf_value": -0.1404162075757351,
              "t_stat": -4.065136495979325
            },
            {
              "cf_name": "y_rfynic(3)",
              "cf_value": 0.1444243609858357,
              "t_stat": 2.380103805914031
            },
            {
              "cf_name": "y_rfynic(4)",
              "cf_value": 0.6315036756054792,
              "t_stat": 9.344833568209976
            }
          ],
          "rhs_eq_var": [
            "rfynic",
            "rfynil"
          ],
          "estimation_statistics": {
            "F_statistic": 39.518396138636,
            "adjusted_r_squared": 0.3769474234411996,
            "date": "08/30/18   Time: 10:00",
            "durbin_watson": 2.26121080955441,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 7.534505776906503e-20,
            "r_squared": 0.3867335895651598,
            "sample_end": "2017Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.2867100186020708
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rfynil",
        "equation_type": "Behavioral",
        "sector": "Foreign Trade",
        "definition": "Average yield earned on liabilities of US residents on the rest of the world",
        "description": "The average yield on U.S. liabilities to the rest of the world is\nmodeled in an error correction format.  In the long run, this yield is\na function of the rates of return on a range of domestic assets.\nShort-run movements in these rates of return have additional effects\non the average yield on U.S. liabilities.",
        "standard_equation": {
          "eviews_equation": "d(rfynil)  - rfynil_aerr =\n           y_rfynil(1)\n          + y_rfynil(2) * rfynil(-1)\n          + y_rfynil(3) * rg10(-1)\n          + y_rfynil(4) * rtb(-1)\n          + y_rfynil(5) * reqp(-1)\n          + y_rfynil(6) * d(rfynil(-1))\n          + y_rfynil(7) * d(rg10)\n          + y_rfynil(8) * d(rtb)\n          + y_rfynil(9) * d(reqp)",
          "python_equation": "(rfynil - (rfynil(-1)))  - rfynil_aerr =\n           y_rfynil_1\n          + y_rfynil_2 * rfynil(-1)\n          + y_rfynil_3 * rg10(-1)\n          + y_rfynil_4 * rtb(-1)\n          + y_rfynil_5 * reqp(-1)\n          + y_rfynil_6 * (rfynil(-1) - (rfynil(-2)))\n          + y_rfynil_7 * (rg10 - (rg10(-1)))\n          + y_rfynil_8 * (rtb - (rtb(-1)))\n          + y_rfynil_9 * (reqp - (reqp(-1)))",
          "coeff": [
            {
              "cf_name": "y_rfynil(1)",
              "cf_value": 0.1769720233111774,
              "t_stat": 2.373640925450795
            },
            {
              "cf_name": "y_rfynil(2)",
              "cf_value": -0.2484056734487245,
              "t_stat": -6.373954472203009
            },
            {
              "cf_name": "y_rfynil(3)",
              "cf_value": 0.08033864767698434,
              "t_stat": 3.83936899334617
            },
            {
              "cf_name": "y_rfynil(4)",
              "cf_value": 0.09023943103709647,
              "t_stat": 4.915529887555425
            },
            {
              "cf_name": "y_rfynil(5)",
              "cf_value": 0.04450523477009356,
              "t_stat": 3.980479199442374
            },
            {
              "cf_name": "y_rfynil(6)",
              "cf_value": 0.1328188190918866,
              "t_stat": 2.645335004909808
            },
            {
              "cf_name": "y_rfynil(7)",
              "cf_value": 0.0876033907073424,
              "t_stat": 1.837455383056476
            },
            {
              "cf_name": "y_rfynil(8)",
              "cf_value": 0.2614346003836546,
              "t_stat": 9.81222000297911
            },
            {
              "cf_name": "y_rfynil(9)",
              "cf_value": 0.0179349568621618,
              "t_stat": 0.7533961092312401
            }
          ],
          "rhs_eq_var": [
            "reqp",
            "rfynil",
            "rg10",
            "rtb"
          ],
          "estimation_statistics": {
            "F_statistic": 35.55785836081795,
            "adjusted_r_squared": 0.591411396434282,
            "date": "08/30/18   Time: 10:00",
            "durbin_watson": 2.311962491449172,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 1.692675416073763e-33,
            "r_squared": 0.6085250552223749,
            "sample_end": "2017Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.2091249856063969
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rg10",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "10-year Treasury bond rate",
        "standard_equation": {
          "eviews_equation": "rg10 - rg10_aerr = zrff10 + rg10p",
          "python_equation": "rg10 - rg10_aerr = zrff10 + rg10p",
          "rhs_eq_var": [
            "rg10p",
            "zrff10"
          ]
        }
      },
      {
        "name": "rg10p",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "10-year Treasury bond rate, term premium",
        "description": "The term premium on 10-year Treasury bonds consists of a constant\n(which shifts upward over 1980-1995), a serially correlated\nresidual, and a counter-cyclical term that depends on a weighted\naverage of expected future output gaps.",
        "standard_equation": {
          "eviews_equation": "rg10p  - rg10p_aerr =\n            y_rg10p(1)\n          + y_rg10p(2) * zgap10\n          + y_rg10p(3) * d8095\n          + y_rg10p(4) * (rg10p(-1)\n          - y_rg10p(1)\n          - y_rg10p(2)*zgap10(-1)\n          - y_rg10p(3)*d8095(-1))",
          "python_equation": "rg10p  - rg10p_aerr =\n            y_rg10p_1\n          + y_rg10p_2 * zgap10\n          + y_rg10p_3 * d8095\n          + y_rg10p_4 * (rg10p(-1)\n          - y_rg10p_1\n          - y_rg10p_2*zgap10(-1)\n          - y_rg10p_3*d8095(-1))",
          "coeff": [
            {
              "cf_name": "y_rg10p(1)",
              "cf_value": 1.050750815840056,
              "t_stat": 2.152669419357577
            },
            {
              "cf_name": "y_rg10p(2)",
              "cf_value": -0.4606588068717281,
              "t_stat": -3.400500835521426
            },
            {
              "cf_name": "y_rg10p(3)",
              "cf_value": 0.2287218644237361,
              "t_stat": 0.5092760860325648
            },
            {
              "cf_name": "y_rg10p(4)",
              "cf_value": 0.9201040880647524,
              "t_stat": 26.94171034524088
            }
          ],
          "rhs_eq_var": [
            "d8095",
            "rg10p",
            "zgap10"
          ],
          "estimation_statistics": {
            "F_statistic": 303.3880155705486,
            "adjusted_r_squared": 0.8890156399111167,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.695993654354336,
            "method": "ARMA Maximum Likelihood (BFGS)",
            "prob_F_statistic": 6.208183719833546e-70,
            "r_squared": 0.8919556229598288,
            "sample_end": "2017Q4",
            "sample_start": "1980Q1",
            "se_of_regression": 0.4226677509723388
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rg30",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "30-year Treasury bond rate",
        "standard_equation": {
          "eviews_equation": "rg30 - rg30_aerr = zrff30 + rg30p",
          "python_equation": "rg30 - rg30_aerr = zrff30 + rg30p",
          "rhs_eq_var": [
            "rg30p",
            "zrff30"
          ]
        }
      },
      {
        "name": "rg30p",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "30-year Treasury bond rate, term premium",
        "description": "The term premium on 30-year Treasury bonds consists of a constant\n(which shifts upward over 1980-1995), a serially correlated\nresidual, and a counter-cyclical term that depends on a weighted\naverage of expected future output gaps.",
        "standard_equation": {
          "eviews_equation": "rg30p  - rg30p_aerr =\n            y_rg30p(1)\n          + y_rg30p(2) * zgap30\n          + y_rg30p(3) * d8095\n          + y_rg30p(4) * (rg30p(-1)\n          - y_rg30p(1)\n          - y_rg30p(2)*zgap30(-1)\n          - y_rg30p(3)*d8095(-1))",
          "python_equation": "rg30p  - rg30p_aerr =\n            y_rg30p_1\n          + y_rg30p_2 * zgap30\n          + y_rg30p_3 * d8095\n          + y_rg30p_4 * (rg30p(-1)\n          - y_rg30p_1\n          - y_rg30p_2*zgap30(-1)\n          - y_rg30p_3*d8095(-1))",
          "coeff": [
            {
              "cf_name": "y_rg30p(1)",
              "cf_value": 1.420673758140307,
              "t_stat": 2.335036684607532
            },
            {
              "cf_name": "y_rg30p(2)",
              "cf_value": -0.6248294677066961,
              "t_stat": -2.468414793434361
            },
            {
              "cf_name": "y_rg30p(3)",
              "cf_value": 0.1349942505218234,
              "t_stat": 0.2632143742816308
            },
            {
              "cf_name": "y_rg30p(4)",
              "cf_value": 0.9381086057081572,
              "t_stat": 33.83245598844158
            }
          ],
          "rhs_eq_var": [
            "d8095",
            "rg30p",
            "zgap30"
          ],
          "estimation_statistics": {
            "F_statistic": 351.7712085507486,
            "adjusted_r_squared": 0.9028367070595346,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 1.64445106001514,
            "method": "ARMA Maximum Likelihood (BFGS)",
            "prob_F_statistic": 3.581314241399316e-74,
            "r_squared": 0.9054105691241828,
            "sample_end": "2017Q4",
            "sample_start": "1980Q1",
            "se_of_regression": 0.3931690006447321
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rg5",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "5-year Treasury note rate",
        "standard_equation": {
          "eviews_equation": "rg5 - rg5_aerr = zrff5 + rg5p",
          "python_equation": "rg5 - rg5_aerr = zrff5 + rg5p",
          "rhs_eq_var": [
            "rg5p",
            "zrff5"
          ]
        }
      },
      {
        "name": "rg5p",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "5-year Treasury note rate. term premium",
        "description": "The term premium on 5-year Treasury bonds consists of a constant,\na serially correlated residual, and a counter-cyclical term that\ndepends on a weighted average of expected future output gaps.",
        "standard_equation": {
          "eviews_equation": "rg5p  - rg5p_aerr =\n            y_rg5p(1)\n          + y_rg5p(2) * zgap05\n          + y_rg5p(3) * (rg5p(-1)\n          - y_rg5p(1)\n          - y_rg5p(2)*zgap05(-1))",
          "python_equation": "rg5p  - rg5p_aerr =\n            y_rg5p_1\n          + y_rg5p_2 * zgap05\n          + y_rg5p_3 * (rg5p(-1)\n          - y_rg5p_1\n          - y_rg5p_2*zgap05(-1))",
          "coeff": [
            {
              "cf_name": "y_rg5p(1)",
              "cf_value": 0.6912438755770502,
              "t_stat": 1.682452444736806
            },
            {
              "cf_name": "y_rg5p(2)",
              "cf_value": -0.3495644809998469,
              "t_stat": -4.504844838736181
            },
            {
              "cf_name": "y_rg5p(3)",
              "cf_value": 0.9022132931202672,
              "t_stat": 25.86686275296578
            }
          ],
          "rhs_eq_var": [
            "rg5p",
            "zgap05"
          ],
          "estimation_statistics": {
            "F_statistic": 311.2491624718159,
            "adjusted_r_squared": 0.8604110462407684,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 1.874996386806262,
            "method": "ARMA Maximum Likelihood (BFGS)",
            "prob_F_statistic": 1.076025431947807e-63,
            "r_squared": 0.863184336712806,
            "sample_end": "2017Q4",
            "sample_start": "1980Q1",
            "se_of_regression": 0.4745642666474429
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rgfint",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Average rate of interest on existing federal debt",
        "description": "The average rate of interest on federal government debt (RGFINT) is\nmeasured historically as the ratio of net interest paid to the lagged\nstock of debt outstanding.  In this equation, RGFINT adjusts toward\nthe weighted average rate of interest on new government debt (RGW),\nwith the speed of adjustment depending positively on the rate of\ngrowth of debt.",
        "standard_equation": {
          "eviews_equation": "rgfint  - rgfint_aerr =\n          (y_rgfint(1)*rgfint(-1)+.14*rgw(-1))*gfdbtn(-2)/gfdbtn(-1) + rgw(-1)*(1-gfdbtn(-2)/gfdbtn(-1))\n          + y_rgfint(2)",
          "python_equation": "rgfint  - rgfint_aerr =\n          (y_rgfint_1*rgfint(-1)+.14*rgw(-1))*gfdbtn(-2)/gfdbtn(-1) + rgw(-1)*(1-gfdbtn(-2)/gfdbtn(-1))\n          + y_rgfint_2",
          "coeff": [
            {
              "cf_name": "y_rgfint(1)",
              "cf_value": 0.86
            },
            {
              "cf_name": "y_rgfint(2)",
              "cf_value": 0.003726285406154968,
              "t_stat": 22.44160516364979
            }
          ],
          "rhs_eq_var": [
            "gfdbtn",
            "rgfint",
            "rgw"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9934255382392978,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.455157760153021,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9934255382392978,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.002417631629984398
          }
        },
        "kfcalc": 1,
        "stochastic_type": "GV"
      },
      {
        "name": "rgw",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Approximate average rate of interest on new federal debt",
        "description": "The weighted average of the four current treasury yields, with\nthe weights based on the Treasury's average issue patterns over some\nappropriate period.",
        "standard_equation": {
          "eviews_equation": "rgw - rgw_aerr = y_rgw(1) * rtb\n               + y_rgw(2) * rg5\n               + y_rgw(3) * rg10\n               + y_rgw(4) * rg30",
          "python_equation": "rgw - rgw_aerr = y_rgw_1 * rtb\n               + y_rgw_2 * rg5\n               + y_rgw_3 * rg10\n               + y_rgw_4 * rg30",
          "coeff": [
            {
              "cf_name": "y_rgw(1)",
              "cf_value": 0.00495
            },
            {
              "cf_name": "y_rgw(2)",
              "cf_value": 0.00271
            },
            {
              "cf_name": "y_rgw(3)",
              "cf_value": 0.00129
            },
            {
              "cf_name": "y_rgw(4)",
              "cf_value": 0.00105
            }
          ],
          "rhs_eq_var": [
            "rg10",
            "rg30",
            "rg5",
            "rtb"
          ]
        }
      },
      {
        "name": "rme",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Interest rate on conventional mortgages",
        "standard_equation": {
          "eviews_equation": "d(rme,0,1)  - rme_aerr =\n           y_rme(1)\n          + y_rme(2) * d(rg10,0,1)\n          + y_rme(3) *  d87 * d(rg10,0,1)\n          + y_rme(4) *  (rg10(-1)-rme(-1))\n          + y_rme(5) * d87 * (rg10(-1)-rme(-1))",
          "python_equation": "(rme - rme(-1))  - rme_aerr =\n          y_rme_1\n          + y_rme_2 * (rg10 - rg10(-1))\n          + y_rme_3 *  d87 * (rg10 - rg10(-1))\n          + y_rme_4 *  (rg10(-1)-rme(-1))\n          + y_rme_5 * d87 * (rg10(-1)-rme(-1))",
          "coeff": [
            {
              "cf_name": "y_rme(1)",
              "cf_value": 0.515870426113512,
              "t_stat": 6.777066007810314
            },
            {
              "cf_name": "y_rme(2)",
              "cf_value": 0.6286405556840244,
              "t_stat": 12.52077892458438
            },
            {
              "cf_name": "y_rme(3)",
              "cf_value": 0.2555601487902845,
              "t_stat": 3.072413312754793
            },
            {
              "cf_name": "y_rme(4)",
              "cf_value": 0.2889775740676342,
              "t_stat": 6.935995894871971
            },
            {
              "cf_name": "y_rme(5)",
              "cf_value": 0.05071546489585005,
              "t_stat": 2.094828435559376
            }
          ],
          "rhs_eq_var": [
            "d87",
            "rg10",
            "rme"
          ],
          "estimation_statistics": {
            "F_statistic": 99.79539697983526,
            "adjusted_r_squared": 0.6519194838559236,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 1.767884936076667,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 3.494466503908938e-47,
            "r_squared": 0.6585181666264275,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.270168967291638
          }
        },
        "kfcalc": 1,
        "stochastic_type": "FN"
      },
      {
        "name": "rrff",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Real federal funds rate",
        "description": "The real federal funds rate (RRFF) is defined as the nominal\neffective funds rate (RFF) minus a 4-quarter moving average of\ncore consumer price inflation (PICXFE).",
        "standard_equation": {
          "eviews_equation": "rrff - rrff_aerr = rff -  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4",
          "python_equation": "rrff - rrff_aerr = rff -  ( picxfe +  picxfe(-1) +  picxfe(-2) +  picxfe(-3))  / 4",
          "rhs_eq_var": [
            "picxfe",
            "rff"
          ]
        }
      },
      {
        "name": "rrfix",
        "equation_type": "Exogenous",
        "definition": "Real federal funds rate given by fixed, pre-determined real funds rate path",
        "exogenous_projection": 2
      },
      {
        "name": "rrtr",
        "equation_type": "Behavioral",
        "sector": "Expectations",
        "definition": "Expected long-run real federal funds rate",
        "description": "The expected long-run value of the real federal funds rate (RRTR)\nis assumed each quarter to close 3 percent of the gap between the\ncurrent ex post real funds rate and last quarter's estimate of RRTR.",
        "standard_equation": {
          "eviews_equation": "rrtr - rrtr_aerr = y_rrtr(1) * rrtr(-1)\n                 + y_rrtr(2) * rrff",
          "python_equation": "rrtr - rrtr_aerr = y_rrtr_1 * rrtr(-1)\n                 + y_rrtr_2 * rrff",
          "coeff": [
            {
              "cf_name": "y_rrtr(1)",
              "cf_value": 0.97
            },
            {
              "cf_name": "y_rrtr(2)",
              "cf_value": 0.03
            }
          ],
          "rhs_eq_var": [
            "rrff",
            "rrtr"
          ]
        }
      },
      {
        "name": "rspnia",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Personal saving rate",
        "standard_equation": {
          "eviews_equation": "rspnia - rspnia_aerr =  100 * yhsn / ydn",
          "python_equation": "rspnia - rspnia_aerr =  100 * yhsn / ydn",
          "rhs_eq_var": [
            "ydn",
            "yhsn"
          ]
        }
      },
      {
        "name": "rstar",
        "equation_type": "Behavioral",
        "sector": "Financial Sector",
        "definition": "Equilibrium real federal funds rate (for monetary policy reaction functions)",
        "description": "The estimate of the equilibrium real federal funds rate\nused in the monetary policy rules is updated each period by\n5 percent of the gap between the ex post real short rate and\nthe prior estimate, if the switch DRSTAR is set to 1.",
        "standard_equation": {
          "eviews_equation": "rstar - rstar_aerr = rstar(-1)\n                   + y_rstar(1) * ((rrff-rstar(-1))*drstar)",
          "python_equation": "rstar - rstar_aerr = rstar(-1)\n                   + y_rstar_1 * ((rrff-rstar(-1))*drstar)",
          "coeff": {
            "cf_name": "y_rstar(1)",
            "cf_value": 0.05
          },
          "rhs_eq_var": [
            "drstar",
            "rrff",
            "rstar"
          ]
        }
      },
      {
        "name": "rtb",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "3-month Treasury bill rate",
        "standard_equation": {
          "eviews_equation": "rtb  - rtb_aerr =\n           y_rtb(1)\n          + y_rtb(2) *  rtb(-1)\n          + y_rtb(3) *  rtb(-2)\n          + y_rtb(4) *  rff\n          + y_rtb(5) *  rff(-1)",
          "python_equation": "rtb  - rtb_aerr =\n           y_rtb_1\n          + y_rtb_2 *  rtb(-1)\n          + y_rtb_3 *  rtb(-2)\n          + y_rtb_4 *  rff\n          + y_rtb_5 *  rff(-1)",
          "coeff": [
            {
              "cf_name": "y_rtb(1)",
              "cf_value": -0.05102548358978556,
              "t_stat": -1.948655553084059
            },
            {
              "cf_name": "y_rtb(2)",
              "cf_value": 0.7997187921520414,
              "t_stat": 17.83865494990525
            },
            {
              "cf_name": "y_rtb(3)",
              "cf_value": 0.1113735515796583,
              "t_stat": 3.800861828827981
            },
            {
              "cf_name": "y_rtb(4)",
              "cf_value": 0.7701225626671688,
              "t_stat": 31.83234870999721
            },
            {
              "cf_name": "y_rtb(5)",
              "cf_value": -0.6812149063988686
            }
          ],
          "rhs_eq_var": [
            "rff",
            "rtb"
          ],
          "estimation_statistics": {
            "F_statistic": 8466.769390385325,
            "adjusted_r_squared": 0.991760486534692,
            "date": "08/30/18   Time: 10:01",
            "durbin_watson": 2.213612725588249,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "prob_F_statistic": 4.653216024700701e-217,
            "r_squared": 0.9918776360152411,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.2956466849509188
          }
        }
      },
      {
        "name": "rtbfi",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "User cost of capital for business investment",
        "description": "The annualized rental cost, relative to the price of output, of\na unit of equipment has three components: the relative\npurchase price of new investment (PKBFIR*PXP/PXB); the depreciation\nrate (JRBFI) plus the real financing rate (RBFI) less the trend growth\nrate of the relative price of investment (HGPBFIR); and tax adjustments\nfor depreciation and the marginal corporate tax rate.",
        "standard_equation": {
          "eviews_equation": "rtbfi - rtbfi_aerr = (.01*rbfi + jrbfi - .01*hgpbfir)\n                   * ((1-.01*tritc-trfcim*(1-tapddp*.01*tritc)*tdpv)/(1-trfcim))\n                   * (pkbfir*pxp/pxb)",
          "python_equation": "rtbfi - rtbfi_aerr = (.01*rbfi + jrbfi - .01*hgpbfir)\n                   * ((1-.01*tritc-trfcim*(1-tapddp*.01*tritc)*tdpv)/(1-trfcim))\n                   * (pkbfir*pxp/pxb)",
          "rhs_eq_var": [
            "hgpbfir",
            "jrbfi",
            "pkbfir",
            "pxb",
            "pxp",
            "rbfi",
            "tapddp",
            "tdpv",
            "trfcim",
            "tritc"
          ]
        }
      },
      {
        "name": "rtinv",
        "equation_type": "Identity",
        "sector": "Business Expenditures",
        "definition": "User cost of capital for inventories",
        "description": "The annualized rental cost, relative to the price of output, of a\nunit of inventory capital is equal to the relative purchase price of new\ninvestment (PKIR*PXP/PXB) multiplied by the after-tax financial rate\n(RPD) minus the trend growth rate of the relative price of inventories\n(HGPKIR).",
        "standard_equation": {
          "eviews_equation": "rtinv - rtinv_aerr = (.01*rbfi - .01*hgpkir)\n                   * ( ( pxp*pkir +  pxp(-1)*pkir(-1)) /2)/pxb",
          "python_equation": "rtinv - rtinv_aerr = (.01*rbfi - .01*hgpkir)\n                   * ( ( pxp*pkir +  pxp(-1)*pkir(-1)) /2)/pxb",
          "rhs_eq_var": [
            "hgpkir",
            "pkir",
            "pxb",
            "pxp",
            "rbfi"
          ]
        }
      },
      {
        "name": "rtr",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected federal funds rate in the long run (Blue Chip)",
        "description": "Historical values of RTR since 1984q3 are based on data from the\nBlue Chip Survey.  Prior to that, RTR = PTR + 2.0.",
        "standard_equation": {
          "eviews_equation": "rtr - rtr_aerr = rrtr + ptr",
          "python_equation": "rtr - rtr_aerr = rrtr + ptr",
          "rhs_eq_var": [
            "ptr",
            "rrtr"
          ]
        }
      },
      {
        "name": "t47",
        "equation_type": "Exogenous",
        "definition": "Time trend, begins in 1947q1 (0 before)",
        "exogenous_projection": 5
      },
      {
        "name": "tapddp",
        "equation_type": "Exogenous",
        "definition": "Proportion of investment tax credit deducted from depr. base",
        "exogenous_projection": 2
      },
      {
        "name": "tcin",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Government corporate income tax accruals, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "tcin - tcin_aerr = trci * ynicpn",
          "python_equation": "tcin - tcin_aerr = trci * ynicpn",
          "rhs_eq_var": [
            "trci",
            "ynicpn"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "tdpv",
        "equation_type": "Exogenous",
        "definition": "Present value of depreciation allowances, BFI",
        "exogenous_projection": 3
      },
      {
        "name": "tpn",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Government personal income tax and non-tax receipts, current $",
        "description": "",
        "standard_equation": {
          "eviews_equation": "tpn - tpn_aerr = trp * (ypn - gtn)",
          "python_equation": "tpn - tpn_aerr = trp * (ypn - gtn)",
          "rhs_eq_var": [
            "gtn",
            "trp",
            "ypn"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "trci",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Average government corporate income tax rate",
        "description": "",
        "standard_equation": {
          "eviews_equation": "trci  - trci_aerr = trcit + y_trci(2)*xgap2\n            + y_trci(1)*(trci(-1)-trcit(-1) - y_trci(2)*xgap2(-1))",
          "python_equation": "trci  - trci_aerr = trcit + y_trci_2*xgap2\n            + y_trci_1*(trci(-1)-trcit(-1) - y_trci_2*xgap2(-1))",
          "coeff": [
            {
              "cf_name": "y_trci(1)",
              "cf_value": 0.810247648208,
              "t_stat": 19.24857
            },
            {
              "cf_name": "y_trci(2)",
              "cf_value": 0.00706626139452,
              "t_stat": 5.260813
            }
          ],
          "rhs_eq_var": [
            "trci",
            "trcit",
            "xgap2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.956523,
            "date": "03/09/21   Time: 11:11",
            "durbin_watson": 1.953357,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.956741,
            "sample_end": "2019Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.013799
          }
        },
        "stochastic_type": "GV"
      },
      {
        "name": "trcit",
        "equation_type": "Exogenous",
        "definition": "Government corporate income tax rate, trend",
        "exogenous_projection": 2
      },
      {
        "name": "trfcim",
        "equation_type": "Exogenous",
        "definition": "Marginal federal corporate income tax rate",
        "exogenous_projection": 2
      },
      {
        "name": "trfpm",
        "equation_type": "Exogenous",
        "definition": "Marginal federal personal income tax rate (at twice median family income)",
        "exogenous_projection": 2
      },
      {
        "name": "tritc",
        "equation_type": "Exogenous",
        "definition": "Investment tax credit for business investment",
        "exogenous_projection": 3
      },
      {
        "name": "trp",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Average government tax rate for personal income tax and non-tax receipts",
        "description": "",
        "standard_equation": {
          "eviews_equation": "trp  - trp_aerr =\n           y_trp(1) * trpt\n          + y_trp(2) *  (trp(-1)-trpt(-1))\n          + y_trp(3) *  (trp(-2)-trpt(-2))\n          + y_trp(4) * xgap2",
          "python_equation": "trp  - trp_aerr = y_trp_1 * trpt\n          + y_trp_2 *  (trp(-1)-trpt(-1))\n          + y_trp_3 *  (trp(-2)-trpt(-2))\n          + y_trp_4 * xgap2",
          "coeff": [
            {
              "cf_name": "y_trp(1)",
              "cf_value": 1
            },
            {
              "cf_name": "y_trp(2)",
              "cf_value": 0.603942358608,
              "t_stat": 8.766441
            },
            {
              "cf_name": "y_trp(3)",
              "cf_value": 0.236576213581,
              "t_stat": 3.543782
            },
            {
              "cf_name": "y_trp(4)",
              "cf_value": 0.000630587773923,
              "t_stat": 3.978659
            }
          ],
          "rhs_eq_var": [
            "trp",
            "trpt",
            "xgap2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.788808,
            "date": "03/09/21   Time: 11:11",
            "durbin_watson": 1.933843,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.79093,
            "sample_end": "2019Q4",
            "sample_start": "1970Q1",
            "se_of_regression": 0.004835
          }
        },
        "stochastic_type": "GV"
      },
      {
        "name": "trpt",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Average government tax rate for personal income tax, trend",
        "description": "",
        "standard_equation": {
          "eviews_equation": "trpt - trpt_aerr = dfpex * trptx\n                  + dfpdbt * ( trpt(-1)\n                  + y_trpt(1) * (gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1))\n                  + y_trpt(2) * d( gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1), 0, 1 ) )\n                  + dfpsrp * ( trpt(-1)\n                  + y_trpt(3) * ((gfsrpn(-1)/xgdpn(-1))\n                               - (gfsrt(-1)+0.0075*xgap2(-1))))",
          "python_equation": "trpt - trpt_aerr = dfpex * trptx\n                  + dfpdbt * ( trpt(-1)\n                  + y_trpt_1 * (gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1))\n                  + y_trpt_2 * ( gfdbtnp(-1)/xgdpn(-1) - gfdrt(-1) - ( gfdbtnp(-2)/xgdpn(-2) - gfdrt(-2))) )\n                  + dfpsrp * ( trpt(-1)\n                  + y_trpt_3 * ((gfsrpn(-1)/xgdpn(-1))\n                               - (gfsrt(-1)+0.0075*xgap2(-1))))",
          "coeff": [
            {
              "cf_name": "y_trpt(1)",
              "cf_value": 0.05
            },
            {
              "cf_name": "y_trpt(2)",
              "cf_value": 0.5
            },
            {
              "cf_name": "y_trpt(3)",
              "cf_value": -0.1
            }
          ],
          "rhs_eq_var": [
            "dfpdbt",
            "dfpex",
            "dfpsrp",
            "gfdbtnp",
            "gfdrt",
            "gfsrpn",
            "gfsrt",
            "trpt",
            "trptx",
            "xgap2",
            "xgdpn"
          ]
        },
        "stochastic_type": "NO"
      },
      {
        "name": "trptx",
        "equation_type": "Exogenous",
        "definition": "Average tax rate for personal income tax, trend, policy setting",
        "exogenous_projection": 2
      },
      {
        "name": "trspp",
        "equation_type": "Exogenous",
        "definition": "Marginal S&amp;L tax rate on personal property",
        "exogenous_projection": 2
      },
      {
        "name": "tryh",
        "equation_type": "Identity",
        "sector": "Government",
        "definition": "Average tax rate on household income",
        "description": "The average tax rate on household income is constructed as the\nratio of personal income taxes (TPN) to the sum of labor\nincome (YNLN) and taxable property income (YHPTN).  Transfer\nincome is assumed not to be taxed.",
        "standard_equation": {
          "eviews_equation": "tryh - tryh_aerr = (tpn)/(yhln+yhptn)",
          "python_equation": "tryh - tryh_aerr = (tpn)/(yhln+yhptn)",
          "rhs_eq_var": [
            "tpn",
            "yhln",
            "yhptn"
          ]
        }
      },
      {
        "name": "uemot",
        "equation_type": "Exogenous",
        "definition": "Trend in ratio of EMON to XGDEN",
        "exogenous_projection": 3
      },
      {
        "name": "ufcbr",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in FCBRN identity",
        "exogenous_projection": 3
      },
      {
        "name": "ufnir",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in FNIRN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uftcin",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in FTCIN identity",
        "exogenous_projection": 3
      },
      {
        "name": "ugfdbt",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in GFDBTN identity",
        "exogenous_projection": 3
      },
      {
        "name": "upcpi",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PCPI identity",
        "exogenous_projection": 4
      },
      {
        "name": "upcpix",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PCPIX identity",
        "exogenous_projection": 4
      },
      {
        "name": "upgfl",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PGFL identity",
        "exogenous_projection": 2
      },
      {
        "name": "upgsl",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PGSL identity",
        "exogenous_projection": 2
      },
      {
        "name": "upkbfir",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PKBFIR identity",
        "exogenous_projection": 3
      },
      {
        "name": "upmp",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PMP identity",
        "exogenous_projection": 3
      },
      {
        "name": "upxb",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in PXB   identity",
        "exogenous_projection": 2
      },
      {
        "name": "uqpct",
        "equation_type": "Behavioral",
        "sector": "Wages and Prices",
        "definition": "Stochastic component of trend ratio of PCNIA to PXP",
        "standard_equation": {
          "eviews_equation": "log(uqpct) - uqpct_aerr = y_uqpct(1) + log(uqpct(-1)) + huqpct",
          "python_equation": "log(uqpct) - uqpct_aerr = y_uqpct_1 + log(uqpct(-1)) + huqpct",
          "coeff": {
            "cf_name": "y_uqpct(1)",
            "cf_value": 0
          },
          "rhs_eq_var": [
            "huqpct",
            "uqpct"
          ],
          "estimation_statistics": {
            "estimation_date": "August 2010",
            "sample_end": "-",
            "sample_start": "1962Q1"
          }
        }
      },
      {
        "name": "uvbfi",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in VBFI identity",
        "exogenous_projection": 2
      },
      {
        "name": "uxbt",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Stochastic component of trend ratio of XGDPT to XBT",
        "description": "The trend component of potential GDP is a random walk with drift.\nThe drift component (HUXB) follows an AR(1) process.",
        "standard_equation": {
          "eviews_equation": "log(uxbt) - uxbt_aerr = y_uxbt(1) + log(uxbt(-1)) + .0025*huxb",
          "python_equation": "log(uxbt) - uxbt_aerr = y_uxbt_1 + log(uxbt(-1)) + .0025*huxb",
          "coeff": {
            "cf_name": "y_uxbt(1)",
            "cf_value": 0
          },
          "rhs_eq_var": [
            "huxb",
            "uxbt"
          ]
        }
      },
      {
        "name": "uyd",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YDN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uyhibn",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor (Consumer interest payments to business)",
        "description": "?",
        "exogenous_projection": 2
      },
      {
        "name": "uyhln",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YHLN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uyhptn",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YHPTN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uyhsn",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in personal saving identity (accounts for transfers to foreign",
        "exogenous_projection": 2
      },
      {
        "name": "uyhtn",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YHTN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uyl",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YLN identity",
        "exogenous_projection": 2
      },
      {
        "name": "uyni",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YNIN identity",
        "exogenous_projection": 3
      },
      {
        "name": "uynicpnr",
        "equation_type": "Behavioral",
        "sector": "Nominal Income",
        "definition": "Corporate profits, residual",
        "description": "",
        "standard_equation": {
          "eviews_equation": "uynicpnr - uynicpnr_aerr = y_uynicpnr(1)*(1-y_uynicpnr(2))\n                         + y_uynicpnr(2)*uynicpnr(-1)",
          "python_equation": "uynicpnr - uynicpnr_aerr = y_uynicpnr_1*(1-y_uynicpnr_2)\n                         + y_uynicpnr_2*uynicpnr(-1)",
          "coeff": [
            {
              "cf_name": "y_uynicpnr(1)",
              "cf_value": -0.07396,
              "t_stat": -192.3558
            },
            {
              "cf_name": "y_uynicpnr(2)",
              "cf_value": 0.779183,
              "t_stat": 14.15076
            }
          ],
          "rhs_eq_var": "uynicpnr"
        },
        "stochastic_type": "NO"
      },
      {
        "name": "uyp",
        "equation_type": "Exogenous",
        "definition": "Multiplicative factor in YPN identity",
        "exogenous_projection": 3
      },
      {
        "name": "vbfi",
        "equation_type": "Behavioral",
        "sector": "Business Expenditures",
        "definition": "Desired investment-output ratio",
        "description": "The desired investment-output ratio is inversely related to the\nuser cost of capital, implying an elasiticity of substitution of one.\nThe multiplicative factor UVBFI has the interpretation of the\nequilibrium income share for nonresidential structures.  UVBFI is\nestimated with an HP filter over history and is assumed to be\nexogenous in simulation.",
        "standard_equation": {
          "eviews_equation": "vbfi - vbfi_aerr = uvbfi*(pkbfir/pbfir)/rtbfi",
          "python_equation": "vbfi - vbfi_aerr = uvbfi*(pkbfir/pbfir)/rtbfi",
          "rhs_eq_var": [
            "pbfir",
            "pkbfir",
            "rtbfi",
            "uvbfi"
          ]
        }
      },
      {
        "name": "wpo",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Household property wealth ex. stock market, real",
        "standard_equation": {
          "eviews_equation": "wpo - wpo_aerr = wpon/(.01*pcnia)",
          "python_equation": "wpo - wpo_aerr = wpon/(.01*pcnia)",
          "rhs_eq_var": [
            "pcnia",
            "wpon"
          ]
        }
      },
      {
        "name": "wpon",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Household property wealth ex. stock market, current $",
        "description": "The change in the non-equity portion of household net worth has\nthree components -- NIPA personal savings, net investment in consumer\ndurable goods, and capital gains on housing and other assets.  The\ncapital gains on housing and other assets are weighted by their ratios\nto WPON.  PHOUSE is scaled by a factor of 116 so that PHOUSE*KH\nmatches housing wealth (both owner occupied and noncorporate rental\nreal estate) from the Flow of Funds over the past decade.",
        "standard_equation": {
          "eviews_equation": "wpon   - wpon_aerr =  wpon(-1)*exp((1\n          -y_wpon(1))*rcgain/400\n          + y_wpon(1)*(log(phouse) - log(phouse(-1)))) + .25 * (ydn-ecnian-yhibn) + .25 * (.01*pcdr*pcnia*(ecd-jkcd))",
          "python_equation": "wpon   - wpon_aerr =  wpon(-1)*exp((1\n          -y_wpon_1)*rcgain/400\n          + y_wpon_1*(log(phouse) - log(phouse(-1)))) + .25 * (ydn-ecnian-yhibn) + .25 * (.01*pcdr*pcnia*(ecd-jkcd))",
          "coeff": {
            "cf_name": "y_wpon(1)",
            "cf_value": 0.4106759138763171
          },
          "rhs_eq_var": [
            "ecd",
            "ecnian",
            "jkcd",
            "pcdr",
            "pcnia",
            "phouse",
            "rcgain",
            "wpon",
            "ydn",
            "yhibn"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 1,
            "date": "08/30/18   Time: 09:59",
            "durbin_watson": 1,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 1,
            "sample_end": "2017Q4",
            "sample_start": "2016Q4",
            "se_of_regression": 1.028975793722999e-11
          }
        }
      },
      {
        "name": "wps",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Household stock market wealth, real",
        "standard_equation": {
          "eviews_equation": "wps - wps_aerr = wpsn/(.01*pcnia)",
          "python_equation": "wps - wps_aerr = wpsn/(.01*pcnia)",
          "rhs_eq_var": [
            "pcnia",
            "wpsn"
          ]
        }
      },
      {
        "name": "wpsn",
        "equation_type": "Identity",
        "sector": "Financial Sector",
        "definition": "Household stock market wealth, current $",
        "description": "The equation for the market value of equities held by households\n(WPSN) is derived from the standard Gordon model for valuing a firm's\nshare price.  Aggregating across firms, this model implies that WPSN\nequals the current level of corporate cash payments, scaled up by the\ndifference between the expected real rate of return on equity (REQ)\nand the expected real growth rate of dividends (ZDIVGR).  Corporate\ncash payments are approximated by half corporate profits (YNICPN) less\ncorporate taxes (TCIN).  The equation is expressed as a\nsemi-log approximation to improve model simulation properties.  The\nlinearization assumes a long-run average dividend-price ratio of 4\npercent, which is consistent with a long-run real required return on\nequity of 7 percent and a real dividend growth rate of 3 percent.",
        "standard_equation": {
          "eviews_equation": "log(wpsn) - wpsn_aerr = log((ynicpn-tcin)*.5)\n                      - .25 * (req-zdivgr)\n                      + log(25) + 1",
          "python_equation": "log(wpsn) - wpsn_aerr = log((ynicpn-tcin)*.5)\n                      - .25 * (req-zdivgr)\n                      + log(25) + 1",
          "rhs_eq_var": [
            "req",
            "tcin",
            "ynicpn",
            "zdivgr"
          ]
        }
      },
      {
        "name": "xb",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Business output (BEA definition), cw 2012$",
        "standard_equation": {
          "eviews_equation": "xb - xb_aerr =  xbn/ (pxb/100)",
          "python_equation": "xb - xb_aerr =  xbn/ (pxb/100)",
          "rhs_eq_var": [
            "pxb",
            "xbn"
          ]
        }
      },
      {
        "name": "xbn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Business output (BEA definition), current $",
        "standard_equation": {
          "eviews_equation": "xbn - xbn_aerr =  pxb/100*xbo + xgdpn -xgdo*pgdp/100",
          "python_equation": "xbn - xbn_aerr =  pxb/100*xbo + xgdpn -xgdo*pgdp/100",
          "rhs_eq_var": [
            "pgdp",
            "pxb",
            "xbo",
            "xgdo",
            "xgdpn"
          ]
        }
      },
      {
        "name": "xbo",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Business output, adjusted for measurement error, cw  2012$",
        "description": "The estimated coefficient on XGAP2 is consistent with the\nobservation that value added outside of the business sector has little\nor no cyclical variation and thus that movements in the business\nsector output gap fully account for movements in the GDP gap.",
        "standard_equation": {
          "eviews_equation": "log(xbo)  - xbo_aerr = log(xbt)\n          + y_xbo(1)*xgap2/100",
          "python_equation": "log(xbo)  - xbo_aerr = log(xbt)\n          + y_xbo_1*xgap2/100",
          "coeff": {
            "cf_name": "y_xbo(1)",
            "cf_value": 1.324705489432872,
            "t_stat": 102.7488510283304
          },
          "rhs_eq_var": [
            "xbt",
            "xgap2"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999069850201961,
            "date": "08/30/18   Time: 10:02",
            "durbin_watson": 0.0005423173285536977,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9999069850201961,
            "sample_end": "2017Q4",
            "sample_start": "1965Q1",
            "se_of_regression": 0.004743840037890664
          }
        }
      },
      {
        "name": "xbt",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Potential business output, cw 2012$",
        "description": "The specification of potential business output (XBT) is based on a\ntwo-factor Cobb-Douglas production function. In addition to measures of factor inputs, the\nequation also contains trend multi-factor productivity (MFPT). Potential labor input depends\non trend employment (LEPPOT), trend hours per worker (QLWW), and trend labor quality (LQUALT).\nCapital input is measured by capital services (KS). In addition, the equation posseses an\nexplicit error term (XBTR).",
        "standard_equation": {
          "eviews_equation": "log(xbt) - xbt_aerr = y_xbt(1) * (log(leppot) + log(qlww) + log(lqualt))\n                    + y_xbt(2) * log(ks)\n                    + log(mfpt) + log(xbtr)",
          "python_equation": "log(xbt) - xbt_aerr = y_xbt_1 * (log(leppot) + log(qlww) + log(lqualt))\n                    + y_xbt_2 * log(ks)\n                    + log(mfpt) + log(xbtr)",
          "coeff": [
            {
              "cf_name": "y_xbt(1)",
              "cf_value": 0.725
            },
            {
              "cf_name": "y_xbt(2)",
              "cf_value": 0.275
            }
          ],
          "rhs_eq_var": [
            "ks",
            "leppot",
            "lqualt",
            "mfpt",
            "qlww",
            "xbtr"
          ]
        }
      },
      {
        "name": "xbtr",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Residual Factor (Potential business output)",
        "standard_equation": {
          "eviews_equation": "log(xbtr) - xbtr_aerr = y_xbtr(1) * log(xbtr(-1))",
          "python_equation": "log(xbtr) - xbtr_aerr = y_xbtr_1 * log(xbtr(-1))",
          "coeff": {
            "cf_name": "y_xbtr(1)",
            "cf_value": 0.95
          },
          "rhs_eq_var": "xbtr"
        }
      },
      {
        "name": "xfs",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Final sales of gross domestic product, cw 2012$",
        "description": "Real final sales of gross domestic product is approximated by a fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(xfs)  - xfs_aerr =  log(xfs(-1))\n          + y_xfs(1)*log(ecnia/ecnia(-1))\n          + y_xfs(2)*log(eh/eh(-1))\n          + y_xfs(3)*log(ebfi/ebfi(-1))\n          + y_xfs(4)*log(egfe/egfe(-1))\n          + y_xfs(5)*log(egfl/egfl(-1))\n          + y_xfs(6)*log(egse/egse(-1))\n          + y_xfs(7)*log(egsl/egsl(-1))\n          + y_xfs(8)*log(ex/ex(-1))\n          + y_xfs(9)*log(emo/emo(-1))\n          + y_xfs(10)*log(emp/emp(-1))",
          "python_equation": "log(xfs)  - xfs_aerr =  log(xfs(-1))\n          + y_xfs_1*log(ecnia/ecnia(-1))\n          + y_xfs_2*log(eh/eh(-1))\n          + y_xfs_3*log(ebfi/ebfi(-1))\n          + y_xfs_4*log(egfe/egfe(-1))\n          + y_xfs_5*log(egfl/egfl(-1))\n          + y_xfs_6*log(egse/egse(-1))\n          + y_xfs_7*log(egsl/egsl(-1))\n          + y_xfs_8*log(ex/ex(-1))\n          + y_xfs_9*log(emo/emo(-1))\n          + y_xfs_10*log(emp/emp(-1))",
          "coeff": [
            {
              "cf_name": "y_xfs(1)",
              "cf_value": 0.6849
            },
            {
              "cf_name": "y_xfs(2)",
              "cf_value": 0.0386
            },
            {
              "cf_name": "y_xfs(3)",
              "cf_value": 0.1324
            },
            {
              "cf_name": "y_xfs(4)",
              "cf_value": 0.0429
            },
            {
              "cf_name": "y_xfs(5)",
              "cf_value": 0.0223
            },
            {
              "cf_name": "y_xfs(6)",
              "cf_value": 0.0395
            },
            {
              "cf_name": "y_xfs(7)",
              "cf_value": 0.0691
            },
            {
              "cf_name": "y_xfs(8)",
              "cf_value": 0.1203
            },
            {
              "cf_name": "y_xfs(9)",
              "cf_value": -0.1399
            },
            {
              "cf_name": "y_xfs(10)",
              "cf_value": -0.0101
            }
          ],
          "rhs_eq_var": [
            "ebfi",
            "ecnia",
            "egfe",
            "egfl",
            "egse",
            "egsl",
            "eh",
            "emo",
            "emp",
            "ex",
            "xfs"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999573093861014,
            "date": "08/30/18   Time: 09:59",
            "durbin_watson": 1.837000600283748,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9999765201623558,
            "sample_end": "2017Q4",
            "sample_start": "2012Q4",
            "se_of_regression": 0.0002389985882700067
          }
        }
      },
      {
        "name": "xfsn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Final sales of gross domestic product, current $",
        "standard_equation": {
          "eviews_equation": "xfsn - xfsn_aerr = xgdpn - ein",
          "python_equation": "xfsn - xfsn_aerr = xgdpn - ein",
          "rhs_eq_var": [
            "ein",
            "xgdpn"
          ]
        }
      },
      {
        "name": "xgap",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Output gap for  business plus oil imports  (100*(actual/potential -1)",
        "standard_equation": {
          "eviews_equation": "xgap - xgap_aerr = 100*(xbo/xbt -1)",
          "python_equation": "xgap - xgap_aerr = 100*(xbo/xbt -1)",
          "rhs_eq_var": [
            "xbo",
            "xbt"
          ]
        }
      },
      {
        "name": "xgap2",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Output gap for GDP (100*(actual/potential -1)",
        "standard_equation": {
          "eviews_equation": "xgap2 - xgap2_aerr = 100 * (xgdo/xgdpt -1)",
          "python_equation": "xgap2 - xgap2_aerr = 100 * (xgdo/xgdpt -1)",
          "rhs_eq_var": [
            "xgdo",
            "xgdpt"
          ]
        }
      },
      {
        "name": "xgdi",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Gross domestic income, cw 2012$",
        "description": "Gross domestic income is modeled with an identity as the product of\ngross domestic product adjusted for measurement error (XGDO) and a\ndiscrepancy factor (MEI) whose logarithm follows an AR(1) process.",
        "standard_equation": {
          "eviews_equation": "xgdi - xgdi_aerr = xgdo*mei",
          "python_equation": "xgdi - xgdi_aerr = xgdo*mei",
          "rhs_eq_var": [
            "mei",
            "xgdo"
          ]
        }
      },
      {
        "name": "xgdin",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Gross domestic income, current $",
        "standard_equation": {
          "eviews_equation": "xgdin - xgdin_aerr = xgdi *(pgdp/100)",
          "python_equation": "xgdin - xgdin_aerr = xgdi *(pgdp/100)",
          "rhs_eq_var": [
            "pgdp",
            "xgdi"
          ]
        }
      },
      {
        "name": "xgdo",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Gross domestic product, adjusted for measurement error, cw 2012$",
        "description": "XGDO is real GDP adjusted for measurement error.  In simulation\nXGDO equals the ratio of real gross domestic product (XGDP) to a\ndiscrepancy factor (MEP) whose logarithm follows an AR(1) process.  The\nhistorical values of XGDO are estimated as latent variables in the\nreduced-form state-space model documented &lt;a\nhref=\"latent_note.pdf\"&gt;here&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "xgdo - xgdo_aerr = xgdp/mep",
          "python_equation": "xgdo - xgdo_aerr = xgdp/mep",
          "rhs_eq_var": [
            "mep",
            "xgdp"
          ]
        }
      },
      {
        "name": "xgdp",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "GDP, cw 2012$",
        "description": "Real gross domestic product (XGDP) is approximated by a fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(xgdp)  - xgdp_aerr =  log(xgdp(-1))\n          + y_xgdp(1)*log(xfs/xfs(-1))\n          + y_xgdp(2)*(log(ki) - log(ki(-1)))\n          + y_xgdp(3)*(log(ki(-1))- log(ki(-2)))",
          "python_equation": "log(xgdp)  - xgdp_aerr =  log(xgdp(-1))\n          + y_xgdp_1*log(xfs/xfs(-1))\n          + y_xgdp_2*(log(ki) - log(ki(-1)))\n          + y_xgdp_3*(log(ki(-1))- log(ki(-2)))",
          "coeff": [
            {
              "cf_name": "y_xgdp(1)",
              "cf_value": 0.9985
            },
            {
              "cf_name": "y_xgdp(2)",
              "cf_value": 0.6264
            },
            {
              "cf_name": "y_xgdp(3)",
              "cf_value": -0.6249
            }
          ],
          "rhs_eq_var": [
            "ki",
            "xfs",
            "xgdp"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.9999684003268542,
            "date": "08/30/18   Time: 09:59",
            "durbin_watson": 2.398144450082855,
            "method": "Least Squares (Gauss-Newton / Marquardt steps)",
            "r_squared": 0.9999715602941688,
            "sample_end": "2017Q4",
            "sample_start": "2012Q4",
            "se_of_regression": 0.0001992916462909462
          }
        }
      },
      {
        "name": "xgdpn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "GDP, current $",
        "standard_equation": {
          "eviews_equation": "xgdpn - xgdpn_aerr = xpn + ein - emn + egfln + egsln",
          "python_equation": "xgdpn - xgdpn_aerr = xpn + ein - emn + egfln + egsln",
          "rhs_eq_var": [
            "egfln",
            "egsln",
            "ein",
            "emn",
            "xpn"
          ]
        }
      },
      {
        "name": "xgdpt",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Potential GDP, cw 2012$",
        "description": "The difference between the logs of potential GDP and business\nsector output -- log(UXBT) -- is a stochastic trend that is modeled as\na random walk with drift.  The drift component follows as AR(1)\nprocess.",
        "standard_equation": {
          "eviews_equation": "log(xgdpt) - xgdpt_aerr = log(xbt) + log(uxbt)",
          "python_equation": "log(xgdpt) - xgdpt_aerr = log(xbt) + log(uxbt)",
          "rhs_eq_var": [
            "uxbt",
            "xbt"
          ]
        }
      },
      {
        "name": "xgdptn",
        "equation_type": "Identity",
        "sector": "Aggregate Output Identities",
        "definition": "Potential GDP, current $",
        "standard_equation": {
          "eviews_equation": "xgdptn - xgdptn_aerr = .01*pgdp*xgdpt",
          "python_equation": "xgdptn - xgdptn_aerr = .01*pgdp*xgdpt",
          "rhs_eq_var": [
            "pgdp",
            "xgdpt"
          ]
        }
      },
      {
        "name": "xp",
        "equation_type": "Behavioral",
        "sector": "Aggregate Output Identities",
        "definition": "Final sales plus imports less government labor, cw 2012$",
        "description": "Real domestic final purchases, excluding government compensation\nbut including exports, is approximated by a fixed-weighted aggregation of its components.",
        "standard_equation": {
          "eviews_equation": "log(xp) - xp_aerr = log(xp(-1)) + y_xp(1)*log(ecnia/ecnia(-1))+ y_xp(2)*log(eh/eh(-1))\n       + (y_xp(3))*log(ebfi/ebfi(-1))\n       + (y_xp(4))*log(egfe/egfe(-1))\n       + (y_xp(5))*log(egse/egse(-1))+ y_xp(6)*log(ex/ex(-1))",
          "python_equation": "log(xp) - xp_aerr = log(xp(-1)) + y_xp_1*log(ecnia/ecnia(-1))+ y_xp_2*log(eh/eh(-1))\n       + (y_xp_3)*log(ebfi/ebfi(-1))\n       + (y_xp_4)*log(egfe/egfe(-1))\n       + (y_xp_5)*log(egse/egse(-1))+ y_xp_6*log(ex/ex(-1))",
          "coeff": [
            {
              "cf_name": "y_xp(1)",
              "cf_value": 0.6526679404
            },
            {
              "cf_name": "y_xp(2)",
              "cf_value": 0.0361108836
            },
            {
              "cf_name": "y_xp(3)",
              "cf_value": 0.11825695358
            },
            {
              "cf_name": "y_xp(4)",
              "cf_value": 0.04216893278
            },
            {
              "cf_name": "y_xp(5)",
              "cf_value": 0.0365822346
            },
            {
              "cf_name": "y_xp(6)",
              "cf_value": 0.114213055
            }
          ],
          "rhs_eq_var": [
            "ebfi",
            "ecnia",
            "egfe",
            "egse",
            "eh",
            "ex",
            "xp"
          ]
        }
      },
      {
        "name": "xpn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Final sales plus imports less government labor, current $",
        "standard_equation": {
          "eviews_equation": "xpn - xpn_aerr = .01 * pxp * xp",
          "python_equation": "xpn - xpn_aerr = .01 * pxp * xp",
          "rhs_eq_var": [
            "pxp",
            "xp"
          ]
        }
      },
      {
        "name": "ydn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Disposable income",
        "standard_equation": {
          "eviews_equation": "ydn - ydn_aerr = uyd * (ypn - tpn)",
          "python_equation": "ydn - ydn_aerr = uyd * (ypn - tpn)",
          "rhs_eq_var": [
            "tpn",
            "uyd",
            "ypn"
          ]
        }
      },
      {
        "name": "yh",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, total (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yh - yh_aerr = yhl + yht + yhp",
          "python_equation": "yh - yh_aerr = yhl + yht + yhp",
          "rhs_eq_var": [
            "yhl",
            "yhp",
            "yht"
          ]
        }
      },
      {
        "name": "yhgap",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, total, ratio to XGDP, cyclical component (real after-tax)",
        "description": "YHGAP is the percentage deviation of the actual from the trend\nratio of household income to GDP (YHSRH and ZYHST, respectively).",
        "standard_equation": {
          "eviews_equation": "yhgap - yhgap_aerr = 100*log(yhshr/zyhst)",
          "python_equation": "yhgap - yhgap_aerr = 100*log(yhshr/zyhst)",
          "rhs_eq_var": [
            "yhshr",
            "zyhst"
          ]
        }
      },
      {
        "name": "yhibn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Consumer interest payments to business",
        "standard_equation": {
          "eviews_equation": "yhibn - yhibn_aerr = uyhibn*xgdpn",
          "python_equation": "yhibn - yhibn_aerr = uyhibn*xgdpn",
          "rhs_eq_var": [
            "uyhibn",
            "xgdpn"
          ]
        }
      },
      {
        "name": "yhl",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, labor compensation (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yhl - yhl_aerr = (1-tryh)*yhln/(.01*pcnia)",
          "python_equation": "yhl - yhl_aerr = (1-tryh)*yhln/(.01*pcnia)",
          "rhs_eq_var": [
            "pcnia",
            "tryh",
            "yhln"
          ]
        }
      },
      {
        "name": "yhln",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, labor compensation",
        "standard_equation": {
          "eviews_equation": "yhln - yhln_aerr = uyhln * (yniln)",
          "python_equation": "yhln - yhln_aerr = uyhln * (yniln)",
          "rhs_eq_var": [
            "uyhln",
            "yniln"
          ]
        }
      },
      {
        "name": "yhp",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, property (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yhp - yhp_aerr = ((1-tryh)*yhptn+yhpntn)/(.01*pcnia)",
          "python_equation": "yhp - yhp_aerr = ((1-tryh)*yhptn+yhpntn)/(.01*pcnia)",
          "rhs_eq_var": [
            "pcnia",
            "tryh",
            "yhpntn",
            "yhptn"
          ]
        }
      },
      {
        "name": "yhpcd",
        "equation_type": "Behavioral",
        "sector": "Household Expenditures",
        "definition": "Imputed income of the stock of consumer durables, 2012$",
        "standard_equation": {
          "eviews_equation": "log(yhpcd) - yhpcd_aerr = log(y_yhpcd(1)) + log(kcd(-1))",
          "python_equation": "log(yhpcd) - yhpcd_aerr = log(y_yhpcd_1) + log(kcd(-1))",
          "coeff": {
            "cf_name": "y_yhpcd(1)",
            "cf_value": 0.05375
          },
          "rhs_eq_var": "kcd"
        }
      },
      {
        "name": "yhpgap",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, property, ratio to YH, cyclical component (real after-tax)",
        "description": "YHPGAP is the percentage deviation of the actual from the trend\nratio of household property income to total household income (YHPSHR\nand ZYHPST, respectively).",
        "standard_equation": {
          "eviews_equation": "yhpgap - yhpgap_aerr = 100*log(yhpshr/zyhpst)",
          "python_equation": "yhpgap - yhpgap_aerr = 100*log(yhpshr/zyhpst)",
          "rhs_eq_var": [
            "yhpshr",
            "zyhpst"
          ]
        }
      },
      {
        "name": "yhpntn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, property, non-taxable component",
        "description": "Household non-taxable property income in FRB/US includes several\nitems not included in the NIPA definition of personal income:\nimputed income from the stock of consumer durables, less consumer\ninterest payments to business; corporate retained earnings; and\ninflation losses on the stock of government debt.",
        "standard_equation": {
          "eviews_equation": "yhpntn - yhpntn_aerr = .01*pcnia*pcdr*yhpcd\n                     - yhibn + ynicpn - tcin - ynidn\n                     - .01 * zpi10 *gfdbtn",
          "python_equation": "yhpntn - yhpntn_aerr = .01*pcnia*pcdr*yhpcd\n                     - yhibn + ynicpn - tcin - ynidn\n                     - .01 * zpi10 *gfdbtn",
          "rhs_eq_var": [
            "gfdbtn",
            "pcdr",
            "pcnia",
            "tcin",
            "yhibn",
            "yhpcd",
            "ynicpn",
            "ynidn",
            "zpi10"
          ]
        }
      },
      {
        "name": "yhpshr",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, property, ratio to YH (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yhpshr - yhpshr_aerr = yhp/yh",
          "python_equation": "yhpshr - yhpshr_aerr = yhp/yh",
          "rhs_eq_var": [
            "yh",
            "yhp"
          ]
        }
      },
      {
        "name": "yhptn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, property, taxable component",
        "description": "Household taxable property income in FRB/US includes interest and\nrental income, dividends, and self-employed income.  The\nmultiplicative factor UYHPTN adjusts for the difference between\ntotal dividends (YNIDN) and personal dividend income, which\nreflects dividends paid to state and local governments.",
        "standard_equation": {
          "eviews_equation": "yhptn - yhptn_aerr = uyhptn*(ynirn+gfintn+ynidn+yhibn)",
          "python_equation": "yhptn - yhptn_aerr = uyhptn*(ynirn+gfintn+ynidn+yhibn)",
          "rhs_eq_var": [
            "gfintn",
            "uyhptn",
            "yhibn",
            "ynidn",
            "ynirn"
          ]
        }
      },
      {
        "name": "yhshr",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, total, ratio to XGDP (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yhshr - yhshr_aerr = yh/xgdp",
          "python_equation": "yhshr - yhshr_aerr = yh/xgdp",
          "rhs_eq_var": [
            "xgdp",
            "yh"
          ]
        }
      },
      {
        "name": "yhsn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Personal saving",
        "standard_equation": {
          "eviews_equation": "yhsn - yhsn_aerr = yhln + yhtn + yhptn - tpn - ecnian - yhibn\n                 + uyhsn * xgdptn",
          "python_equation": "yhsn - yhsn_aerr = yhln + yhtn + yhptn - tpn - ecnian - yhibn\n                 + uyhsn * xgdptn",
          "rhs_eq_var": [
            "ecnian",
            "tpn",
            "uyhsn",
            "xgdptn",
            "yhibn",
            "yhln",
            "yhptn",
            "yhtn"
          ]
        }
      },
      {
        "name": "yht",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, transfer (real after-tax), net basis",
        "standard_equation": {
          "eviews_equation": "yht - yht_aerr = yhtn/(.01*pcnia)",
          "python_equation": "yht - yht_aerr = yhtn/(.01*pcnia)",
          "rhs_eq_var": [
            "pcnia",
            "yhtn"
          ]
        }
      },
      {
        "name": "yhtgap",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, transfer, ratio to YH, cyclical component (real after-tax)",
        "description": "YHTGAP is the percentage deviation of the actual from the trend\nratio of household transfer income to total household income (YHTSHR\nand ZYTHST, respectively).",
        "standard_equation": {
          "eviews_equation": "yhtgap - yhtgap_aerr = 100*log(yhtshr/zyhtst)",
          "python_equation": "yhtgap - yhtgap_aerr = 100*log(yhtshr/zyhtst)",
          "rhs_eq_var": [
            "yhtshr",
            "zyhtst"
          ]
        }
      },
      {
        "name": "yhtn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, transfer payments. net basis",
        "description": "The exogenous conversion factor (UYHTN) in the identity for\ntransfer payments to persons (YHTN) reflects the omission of\nbusiness transfer payments from the equation.",
        "standard_equation": {
          "eviews_equation": "yhtn - yhtn_aerr = uyhtn*gtn",
          "python_equation": "yhtn - yhtn_aerr = uyhtn*gtn",
          "rhs_eq_var": [
            "gtn",
            "uyhtn"
          ]
        }
      },
      {
        "name": "yhtshr",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income, household, transfer, ratio to YH (real after-tax)",
        "standard_equation": {
          "eviews_equation": "yhtshr - yhtshr_aerr = yht/yh",
          "python_equation": "yhtshr - yhtshr_aerr = yht/yh",
          "rhs_eq_var": [
            "yh",
            "yht"
          ]
        }
      },
      {
        "name": "ykbfin",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income from stock of BFI",
        "standard_equation": {
          "eviews_equation": "ykbfin - ykbfin_aerr = .01*rtbfi*pxb* ( kbfi +  kbfi(-1)) /2",
          "python_equation": "ykbfin - ykbfin_aerr = .01*rtbfi*pxb* ( kbfi +  kbfi(-1)) /2",
          "rhs_eq_var": [
            "kbfi",
            "pxb",
            "rtbfi"
          ]
        }
      },
      {
        "name": "ykin",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Income from stock of inventories",
        "standard_equation": {
          "eviews_equation": "ykin - ykin_aerr = .01*rtinv*pxb* (ki + ki(-1)) /2",
          "python_equation": "ykin - ykin_aerr = .01*rtinv*pxb* (ki + ki(-1)) /2",
          "rhs_eq_var": [
            "ki",
            "pxb",
            "rtinv"
          ]
        }
      },
      {
        "name": "ymsdn",
        "equation_type": "Exogenous",
        "definition": "Microsoft one-time dividend payout in 2004Q4",
        "exogenous_projection": 7
      },
      {
        "name": "ynicpn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Corporate profits (national income component)",
        "description": "Corporate profits (YNICPN) are the residual component of national\nincome (YNIN - YNILN - YNIIN - YNISEN).  To mitigate numerical\nproblems in simulations, the max function places a positive lower\nbound on profits.",
        "standard_equation": {
          "eviews_equation": "ynicpn - ynicpn_aerr = @recode( (ynin-yniln-ynirn+uynicpnr*xgdpn)&gt;(tcin+.01*xgdpn), (ynin-yniln-ynirn+uynicpnr*xgdpn), (tcin+.01*xgdpn))",
          "python_equation": "ynicpn - ynicpn_aerr = max(( (ynin-yniln-ynirn+uynicpnr*xgdpn)),( (tcin+.01*xgdpn)))",
          "rhs_eq_var": [
            "tcin",
            "uynicpnr",
            "xgdpn",
            "yniln",
            "ynin",
            "ynirn"
          ]
        }
      },
      {
        "name": "ynidn",
        "equation_type": "Behavioral",
        "sector": "Nominal Income",
        "definition": "Dividends (national income component)",
        "description": "Dividends are modeled using the polynomial adjustment cost (PAC)\nframework.  Thus growth in real dividends depends on the three\nstandard PAC terms -- the degree to which dividends were out of\nequilibrium last period, lagged dividend growth, and expected growth\nof desired dividents.  To translate the general PAC specification,\nwhose structure is shown below in the PAC Overview section, associate\nlog((YNIDN-YMSDN)/PXB) with y, log(QYNIDN/PXB) with y*, and ZYNID\nwith the expected weighted sum of future &amp;Delta;y*.  The order of\nadjustment costs (m) is 2.  The equation adjusts dividends for the\none-time Microsoft cash payout of late 2004 (YMSDN).\n\nPAC Overview: Let y denote the decision variable and y* its desired\nlevel in the absence of adjustment frictions.  The decision rule\nderived from the PAC Euler equation has the following form.\n\n(1) &amp;Delta;y&lt;sub&gt;t&lt;/sub&gt; = a&lt;sub&gt;0&lt;/sub&gt;(y*&lt;sub&gt;t-1&lt;/sub&gt; -\n      y&lt;sub&gt;t-1&lt;/sub&gt;) + &amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;\n      a&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y&lt;sub&gt;t-i&lt;/sub&gt; +\n      E&lt;sub&gt;t-1&lt;/sub&gt;&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt;&amp;Delta;y*&lt;sub&gt;t+i&lt;/sub&gt;\n\n The order of adjustment costs is given by parameter m.  The\nforward weights, d&lt;sub&gt;i&lt;/sub&gt; {i=0,&amp;infin;}, are functions of the\nestimated values of a&lt;sub&gt;i&lt;/sub&gt; {i=0,m-1} and a fixed discount\nfactor (0.98).  Estimation imposes the growth neutrality restriction\n&amp;sum;&lt;sub&gt;i=1,m-1&lt;/sub&gt;a&lt;sub&gt;i&lt;/sub&gt; +\n&amp;sum;&lt;sub&gt;i=0,&amp;infin;&lt;/sub&gt;d&lt;sub&gt;i&lt;/sub&gt; = 1.  For more information,\nsee &lt;a href=\"pac_basics.pdf\"&gt;PAC Basics&lt;/a&gt;.",
        "standard_equation": {
          "eviews_equation": "dlog((ynidn-ymsdn)/pxb)  - ynidn_aerr =\n            y_ynidn(1) * log(qynidn(-1)/(ynidn(-1)-ymsdn(-1)))\n          + y_ynidn(2) * dlog((ynidn(-1)-ymsdn(-1))/pxb(-1))\n          + y_ynidn(3) * zynid",
          "python_equation": "(log((ynidn-ymsdn)/pxb) - log((ynidn(-1)-ymsdn(-1))/pxb(-1)))  - ynidn_aerr =\n            y_ynidn_1 * log(qynidn(-1)/(ynidn(-1)-ymsdn(-1)))\n          + y_ynidn_2 * (log((ynidn(-1)-ymsdn(-1))/pxb(-1)) - log((ynidn(-2)-ymsdn(-2))/pxb(-2)))\n          + y_ynidn_3 * zynid",
          "coeff": [
            {
              "cf_name": "y_ynidn(1)",
              "cf_value": 0.1072695065113163,
              "t_stat": 5.908232672201109
            },
            {
              "cf_name": "y_ynidn(2)",
              "cf_value": -0.2095634314107719,
              "t_stat": -3.14267687987399
            },
            {
              "cf_name": "y_ynidn(3)",
              "cf_value": 1
            }
          ],
          "rhs_eq_var": [
            "pxb",
            "qynidn",
            "ymsdn",
            "ynidn",
            "zynid"
          ],
          "estimation_statistics": {
            "adjusted_r_squared": 0.06032612919807434,
            "date": "08/30/18   Time: 10:03",
            "durbin_watson": 1.666454076766968,
            "method": "Least Squares",
            "r_squared": 0.06480076909065247,
            "sample_end": "2017Q4",
            "sample_start": "1965Q2",
            "se_of_regression": 0.03990373015403748
          }
        },
        "kfcalc": 1,
        "stochastic_type": "IN"
      },
      {
        "name": "yniln",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Labor income (national income component)",
        "description": "The exogenous conversion factor (UYL) in the identity for labor\nincome reflects: (1) the omission of labor income in the farm and\nhousehold and institutions sectors from the equation; and (2) the use\nof a measure of aggregate hours that includes not only hours of\nemployees but also hours of the self-employed.",
        "standard_equation": {
          "eviews_equation": "yniln - yniln_aerr = 0.01 *  uyl * (pl*lhp + pgfl*egfl + pgsl*egsl)",
          "python_equation": "yniln - yniln_aerr = 0.01 *  uyl * (pl*lhp + pgfl*egfl + pgsl*egsl)",
          "rhs_eq_var": [
            "egfl",
            "egsl",
            "lhp",
            "pgfl",
            "pgsl",
            "pl",
            "uyl"
          ]
        }
      },
      {
        "name": "ynin",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "National income",
        "description": "The exogenous conversion factor (UYNI) in the identity for\nnational income (YNIN) reflects the omission of the statistical\ndiscrepancy and business transfer payments from the equation.",
        "standard_equation": {
          "eviews_equation": "ynin - ynin_aerr = uyni*(xgdin+fynin-jccan)",
          "python_equation": "ynin - ynin_aerr = uyni*(xgdin+fynin-jccan)",
          "rhs_eq_var": [
            "fynin",
            "jccan",
            "uyni",
            "xgdin"
          ]
        }
      },
      {
        "name": "ynirn",
        "equation_type": "Behavioral",
        "sector": "Government",
        "definition": "Net interest, rental and proprietors' incomes (national income components)",
        "description": "The share of net interest, rental income and proprietor's of nominal GDP\nvaries with the change in the triple B corporate bond rate.",
        "standard_equation": {
          "eviews_equation": "ynirn/xgdpn - ynirn_aerr = y_ynirn(1)\n\t + y_ynirn(2)*(ynirn(-1)/xgdpn(-1))\n\t + y_ynirn(3)*0.01*d(rbbb)",
          "python_equation": "ynirn/xgdpn - ynirn_aerr = y_ynirn_1\n\t + y_ynirn_2*(ynirn(-1)/xgdpn(-1))\n\t + y_ynirn_3*0.01*(rbbb - (rbbb(-1)))",
          "coeff": [
            {
              "cf_name": "y_ynirn(1)",
              "cf_value": 0.007593
            },
            {
              "cf_name": "y_ynirn(2)",
              "cf_value": 0.944044
            },
            {
              "cf_name": "y_ynirn(3)",
              "cf_value": 0.074817
            }
          ],
          "rhs_eq_var": [
            "rbbb",
            "xgdpn",
            "ynirn"
          ]
        },
        "stochastic_type": "GV"
      },
      {
        "name": "ypn",
        "equation_type": "Identity",
        "sector": "Nominal Income",
        "definition": "Personal income",
        "description": "The exogenous conversion factor (UYP) used in the personal income\nidentity reflects the ommission of a miscellaneous set of adjustments,\nsuch as the difference between total and personal dividend payments,\nand the omission of business transfers payments to households.",
        "standard_equation": {
          "eviews_equation": "ypn - ypn_aerr = uyp * (yhln + yhtn + yhptn)",
          "python_equation": "ypn - ypn_aerr = uyp * (yhln + yhtn + yhptn)",
          "rhs_eq_var": [
            "uyp",
            "yhln",
            "yhptn",
            "yhtn"
          ]
        }
      },
      {
        "name": "zdivgr",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of real dividends, for WPSN eq. (VAR exp.)",
        "description": "ZDIVGR is a weighted average of growth rates of future after-tax\ncorporate profits.  The weights sum to one and decline geometrically\nat a rate based on the infinite maturity of corporate equity and the\naverage historical level of the nominal rate of interest.  The\nequation shown below is the reduced-form representation of this\nexpectational computation based on a small-scale VAR model.",
        "standard_equation": {
          "eviews_equation": "zdivgr  - zdivgr_aerr =\n           y_zdivgr(1)\n          + y_zdivgr(2)*picnia\n          + y_zdivgr(3)*picnia(-1)\n          + y_zdivgr(4)*picnia(-2)\n          + y_zdivgr(5)*picnia(-3)\n          + y_zdivgr(6)*rff\n          + y_zdivgr(7)*rff(-1)\n          + y_zdivgr(8)*rff(-2)\n          + y_zdivgr(9)*rff(-3)\n          + y_zdivgr(10)*rtr\n          + y_zdivgr(11)*ptr\n          + y_zdivgr(12)*xgap\n          + y_zdivgr(13)*xgap(-1)\n          + y_zdivgr(14)*xgap(-2)\n          + y_zdivgr(15)*xgap(-3)\n          + y_zdivgr(16)*hgynid\n          + y_zdivgr(17)*hgynid(-1)\n          + y_zdivgr(18)*hgynid(-2)\n          + y_zdivgr(19)*hgynid(-3)\n          + y_zdivgr(20)*hxbt",
          "python_equation": "zdivgr  - zdivgr_aerr =\n           y_zdivgr_1\n          + y_zdivgr_2*picnia\n          + y_zdivgr_3*picnia(-1)\n          + y_zdivgr_4*picnia(-2)\n          + y_zdivgr_5*picnia(-3)\n          + y_zdivgr_6*rff\n          + y_zdivgr_7*rff(-1)\n          + y_zdivgr_8*rff(-2)\n          + y_zdivgr_9*rff(-3)\n          + y_zdivgr_10*rtr\n          + y_zdivgr_11*ptr\n          + y_zdivgr_12*xgap\n          + y_zdivgr_13*xgap(-1)\n          + y_zdivgr_14*xgap(-2)\n          + y_zdivgr_15*xgap(-3)\n          + y_zdivgr_16*hgynid\n          + y_zdivgr_17*hgynid(-1)\n          + y_zdivgr_18*hgynid(-2)\n          + y_zdivgr_19*hgynid(-3)\n          + y_zdivgr_20*hxbt",
          "coeff": [
            {
              "cf_name": "y_zdivgr(1)",
              "cf_value": 1.453758371220758e-14,
              "t_stat": 1.660474870568601
            },
            {
              "cf_name": "y_zdivgr(2)",
              "cf_value": -0.03432097699759745,
              "t_stat": -48724985328778.53,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zdivgr(3)",
              "cf_value": 0.01503760188801399,
              "t_stat": 19407913877046.83,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zdivgr(4)",
              "cf_value": 0.008139233986467266,
              "t_stat": 10530569232428.41,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zdivgr(5)",
              "cf_value": 0.02806260424571279,
              "t_stat": 39277370309054.5,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zdivgr(6)",
              "cf_value": -0.1147631155931414,
              "t_stat": -93729833655062.27,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zdivgr(7)",
              "cf_value": 0.02378759550862853,
              "t_stat": 14094280489317.41,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zdivgr(8)",
              "cf_value": -0.08000091281298219,
              "t_stat": -47711759787397.93,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zdivgr(9)",
              "cf_value": 0.05291584088244318,
              "t_stat": 42478727222167.15,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zdivgr(10)",
              "cf_value": 0.1180605920154127,
              "t_stat": 44174069683861.81
            },
            {
              "cf_name": "y_zdivgr(11)",
              "cf_value": -0.0169184631226911,
              "t_stat": -7073915781260.909
            },
            {
              "cf_name": "y_zdivgr(12)",
              "cf_value": -0.3193168668820861,
              "t_stat": -190994496428330,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zdivgr(13)",
              "cf_value": 0.1900611332314869,
              "t_stat": 65928707749384.32,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zdivgr(14)",
              "cf_value": 0.05865254915210798,
              "t_stat": 20436466465038.53,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zdivgr(15)",
              "cf_value": 0.05204047323627287,
              "t_stat": 29132806255196.96,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zdivgr(16)",
              "cf_value": 0.01513617207696648,
              "t_stat": 297104460008889,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zdivgr(17)",
              "cf_value": 0.002907781394121129,
              "t_stat": 57072723370390.99,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zdivgr(18)",
              "cf_value": 0.001820586788429011,
              "t_stat": 36160120274873.61,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zdivgr(19)",
              "cf_value": -0.000832768187365904,
              "t_stat": -17736610879362.07,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zdivgr(20)",
              "cf_value": 0.9809682279278705,
              "t_stat": 481143671129519.6
            }
          ],
          "rhs_eq_var": [
            "hgynid",
            "hxbt",
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZDIVGR is a weighted average of growth rates of future after-tax\ncorporate profits.  The weights sum to one and decline geometrically\nat a rate based on the infinite maturity of corporate equity and the\naverage historical level of the nominal rate of interest.",
          "eviews_equation": "zdivgr - zdivgr_aerr = y_zdivgr(1) * hgynid(1)\n                     + y_zdivgr(2) * zdivgr(1)",
          "python_equation": "zdivgr - zdivgr_aerr = y_zdivgr_1 * hgynid(1)\n                     + y_zdivgr_2 * zdivgr(1)",
          "coeff": [
            {
              "cf_name": "y_zdivgr(1)",
              "cf_value": 0.009757264257434617
            },
            {
              "cf_name": "y_zdivgr(2)",
              "cf_value": 0.9902427357425654
            }
          ],
          "rhs_eq_var": [
            "hgynid",
            "zdivgr"
          ]
        }
      },
      {
        "name": "zebfi",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of business output EBFI (VAR exp.)",
        "description": "The weighted average growth rate of expected future output for\nBFI, ZEBFI, is computed from forecasts of the small-scale VAR\nmodel used in the estimation of the equipment (EBFI) PAC equation.  The\nforward weights are those implied by the estimated PAC\ncoefficients. The equation shown below is the reduced-form\nrepresentation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zebfi  - zebfi_aerr =\n           y_zebfi(1)\n          + y_zebfi(2)*picnia(-1)\n          + y_zebfi(3)*picnia(-2)\n          + y_zebfi(4)*picnia(-3)\n          + y_zebfi(5)*picnia(-4)\n          + y_zebfi(6)*rff(-1)\n          + y_zebfi(7)*rff(-2)\n          + y_zebfi(8)*rff(-3)\n          + y_zebfi(9)*rff(-4)\n          + y_zebfi(10)*rtr(-1)\n          + y_zebfi(11)*ptr(-1)\n          + y_zebfi(12)*xgap(-1)\n          + y_zebfi(13)*xgap(-2)\n          + y_zebfi(14)*xgap(-3)\n          + y_zebfi(15)*xgap(-4)\n          + y_zebfi(16)*dlog(qebfi(-1))\n          + y_zebfi(17)*dlog(qebfi(-2))\n          + y_zebfi(18)*dlog(qebfi(-3))\n          + y_zebfi(19)*dlog(qebfi(-4))\n          + y_zebfi(20)*hxbt(-1)/400\n          + y_zebfi(21)*hgpbfir(-1)/400",
          "python_equation": "zebfi  - zebfi_aerr =\n           y_zebfi_1\n          + y_zebfi_2*picnia(-1)\n          + y_zebfi_3*picnia(-2)\n          + y_zebfi_4*picnia(-3)\n          + y_zebfi_5*picnia(-4)\n          + y_zebfi_6*rff(-1)\n          + y_zebfi_7*rff(-2)\n          + y_zebfi_8*rff(-3)\n          + y_zebfi_9*rff(-4)\n          + y_zebfi_10*rtr(-1)\n          + y_zebfi_11*ptr(-1)\n          + y_zebfi_12*xgap(-1)\n          + y_zebfi_13*xgap(-2)\n          + y_zebfi_14*xgap(-3)\n          + y_zebfi_15*xgap(-4)\n          + y_zebfi_16*(log(qebfi(-1)) - log(qebfi(-2)))\n          + y_zebfi_17*(log(qebfi(-2)) - log(qebfi(-3)))\n          + y_zebfi_18*(log(qebfi(-3)) - log(qebfi(-4)))\n          + y_zebfi_19*(log(qebfi(-4)) - log(qebfi(-5)))\n          + y_zebfi_20*hxbt(-1)/400\n          + y_zebfi_21*hgpbfir(-1)/400",
          "coeff": [
            {
              "cf_name": "y_zebfi(1)",
              "cf_value": -1.836241195103586e-16,
              "t_stat": -7.690076218323741
            },
            {
              "cf_name": "y_zebfi(2)",
              "cf_value": -0.0004311442119548698,
              "t_stat": -320206848445540.6
            },
            {
              "cf_name": "y_zebfi(3)",
              "cf_value": -0.0005071417360301063,
              "t_stat": -353077628504199.2
            },
            {
              "cf_name": "y_zebfi(4)",
              "cf_value": -0.00003881819160880394,
              "t_stat": -26256646603762.47
            },
            {
              "cf_name": "y_zebfi(5)",
              "cf_value": 0.0001679875754395107,
              "t_stat": 115277170083979.5
            },
            {
              "cf_name": "y_zebfi(6)",
              "cf_value": -0.0009752514829426216,
              "t_stat": -390592430755039
            },
            {
              "cf_name": "y_zebfi(7)",
              "cf_value": 0.0004172696850180997,
              "t_stat": 129716164513429.8
            },
            {
              "cf_name": "y_zebfi(8)",
              "cf_value": 0.000009804022481480237,
              "t_stat": 3144326760867.87
            },
            {
              "cf_name": "y_zebfi(9)",
              "cf_value": 0.0004025448938499502,
              "t_stat": 171769141640141
            },
            {
              "cf_name": "y_zebfi(10)",
              "cf_value": 0.0001456328815931833,
              "t_stat": 23432782253918.05
            },
            {
              "cf_name": "y_zebfi(11)",
              "cf_value": 0.0008091165641542618,
              "t_stat": 155152147190294.5
            },
            {
              "cf_name": "y_zebfi(12)",
              "cf_value": 0.0006914817407124366,
              "t_stat": 216118443781045.9
            },
            {
              "cf_name": "y_zebfi(13)",
              "cf_value": -0.001524629901125206,
              "t_stat": -284178282543195.7
            },
            {
              "cf_name": "y_zebfi(14)",
              "cf_value": 0.0001821021224146923,
              "t_stat": 33669345477756.99
            },
            {
              "cf_name": "y_zebfi(15)",
              "cf_value": 0.0001709602428972692,
              "t_stat": 51628647230980.14
            },
            {
              "cf_name": "y_zebfi(16)",
              "cf_value": 0.01429456576547675,
              "t_stat": 190798984072385.3
            },
            {
              "cf_name": "y_zebfi(17)",
              "cf_value": 0.01004233676573099,
              "t_stat": 135460773436413.1
            },
            {
              "cf_name": "y_zebfi(18)",
              "cf_value": 0.005011839434648968,
              "t_stat": 74374706769186.19
            },
            {
              "cf_name": "y_zebfi(19)",
              "cf_value": 0.003887436951496095,
              "t_stat": 58285988898562.91
            },
            {
              "cf_name": "y_zebfi(20)",
              "cf_value": 0.1422818153960116,
              "t_stat": 67782170710475.25
            },
            {
              "cf_name": "y_zebfi(21)",
              "cf_value": -0.1422818153960531,
              "t_stat": -29921689340197.61
            }
          ],
          "rhs_eq_var": [
            "hgpbfir",
            "hxbt",
            "picnia",
            "ptr",
            "qebfi",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZEBFI is a weighted average of future growth rates of business output.\nThe pattern of the weights is a function of the PAC adjustment\ncoefficients in the estimated equipment investment (EPD) equation.\nThe sum of the weights equals one minus the sum of the coefficients on\nlagged growth of actual investment in the EPD equation.",
          "eviews_equation": "zebfi - zebfi_aerr =\n           y_zebfi(1) * d( log(xb), 0, 1 )\n         + y_zebfi(2) * d( log(xb(1)), 0, 1 )\n         + y_zebfi(3) * d( log(xb(2)), 0, 1 )\n         + y_zebfi(4) * zebfi(1)\n         + y_zebfi(5) * zebfi(2)\n         + y_zebfi(6) * zebfi(3)",
          "python_equation": "zebfi - zebfi_aerr =\n           y_zebfi_1 * ( log(xb) - ( log(xb(-1))))\n         + y_zebfi_2 * ( log(xb(1)) - ( log(xb)))\n         + y_zebfi_3 * ( log(xb(2)) - ( log(xb(1))))\n         + y_zebfi_4 * zebfi(1)\n         + y_zebfi_5 * zebfi(2)\n         + y_zebfi_6 * zebfi(3)",
          "coeff": [
            {
              "cf_name": "y_zebfi(1)",
              "cf_value": 0.06074976222164443
            },
            {
              "cf_name": "y_zebfi(2)",
              "cf_value": -0.0301184063377007
            },
            {
              "cf_name": "y_zebfi(3)",
              "cf_value": -0.01727992769482984
            },
            {
              "cf_name": "y_zebfi(4)",
              "cf_value": 1.419709462067156
            },
            {
              "cf_name": "y_zebfi(5)",
              "cf_value": -0.2113338089461142
            },
            {
              "cf_name": "y_zebfi(6)",
              "cf_value": -0.2844443675645073
            }
          ],
          "rhs_eq_var": [
            "xb",
            "zebfi"
          ]
        }
      },
      {
        "name": "zecd",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of target durable consumption, for ECD eq. (VAR exp.)",
        "description": "The weighted average growth rate of expected future target\nspending on consumer durables, ZECD, is computed from forecasts of the\nsmall-scale VAR model used in the estimation of the consumer durables\n(ECD) PAC equation.  The forward weights are those implied by the\nestimated PAC coefficients. The equation shown below is the\nreduced-form representation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zecd  - zecd_aerr =\n           y_zecd(1)*picnia(-1)\n          + y_zecd(2)*picnia(-2)\n          + y_zecd(3)*picnia(-3)\n          + y_zecd(4)*picnia(-4)\n          + y_zecd(5)*rff(-1)\n          + y_zecd(6)*rff(-2)\n          + y_zecd(7)*rff(-3)\n          + y_zecd(8)*rff(-4)\n          + y_zecd(9)*xgap2(-1)\n          + y_zecd(10)*xgap2(-2)\n          + y_zecd(11)*xgap2(-3)\n          + y_zecd(12)*xgap2(-4)\n          + y_zecd(13)*ptr(-1)\n          + y_zecd(14)*rtr(-1)\n          + y_zecd(15)*yhgap(-1)\n          + y_zecd(16)*yhgap(-2)\n          + y_zecd(17)*yhgap(-3)\n          + y_zecd(18)*yhgap(-4)\n          + y_zecd(19)*yhtgap(-1)\n          + y_zecd(20)*yhtgap(-2)\n          + y_zecd(21)*yhtgap(-3)\n          + y_zecd(22)*yhtgap(-4)\n          + y_zecd(23)*yhpgap(-1)\n          + y_zecd(24)*yhpgap(-2)\n          + y_zecd(25)*yhpgap(-3)\n          + y_zecd(26)*yhpgap(-4)\n          + y_zecd(27)*hggdpt(-1)/400\n          + y_zecd(28)*hgpcdr(-1)/400\n          + y_zecd(29)*dlog(qecd(-1))\n          + y_zecd(30)*dlog(qecd(-2))\n          + y_zecd(31)*dlog(qecd(-3))\n          + y_zecd(32)*dlog(qecd(-4))",
          "python_equation": "zecd  - zecd_aerr =\n           y_zecd_1*picnia(-1)\n          + y_zecd_2*picnia(-2)\n          + y_zecd_3*picnia(-3)\n          + y_zecd_4*picnia(-4)\n          + y_zecd_5*rff(-1)\n          + y_zecd_6*rff(-2)\n          + y_zecd_7*rff(-3)\n          + y_zecd_8*rff(-4)\n          + y_zecd_9*xgap2(-1)\n          + y_zecd_10*xgap2(-2)\n          + y_zecd_11*xgap2(-3)\n          + y_zecd_12*xgap2(-4)\n          + y_zecd_13*ptr(-1)\n          + y_zecd_14*rtr(-1)\n          + y_zecd_15*yhgap(-1)\n          + y_zecd_16*yhgap(-2)\n          + y_zecd_17*yhgap(-3)\n          + y_zecd_18*yhgap(-4)\n          + y_zecd_19*yhtgap(-1)\n          + y_zecd_20*yhtgap(-2)\n          + y_zecd_21*yhtgap(-3)\n          + y_zecd_22*yhtgap(-4)\n          + y_zecd_23*yhpgap(-1)\n          + y_zecd_24*yhpgap(-2)\n          + y_zecd_25*yhpgap(-3)\n          + y_zecd_26*yhpgap(-4)\n          + y_zecd_27*hggdpt(-1)/400\n          + y_zecd_28*hgpcdr(-1)/400\n          + y_zecd_29*(log(qecd(-1)) - log(qecd(-2)))\n          + y_zecd_30*(log(qecd(-2)) - log(qecd(-3)))\n          + y_zecd_31*(log(qecd(-3)) - log(qecd(-4)))\n          + y_zecd_32*(log(qecd(-4)) - log(qecd(-5)))",
          "coeff": [
            {
              "cf_name": "y_zecd(1)",
              "cf_value": -0.0004244330449108246,
              "t_stat": -76483653849891.19,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zecd(2)",
              "cf_value": -0.000566112732916264,
              "t_stat": -94838186067618.23,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zecd(3)",
              "cf_value": -0.0004278354154853733,
              "t_stat": -72212503875948.88,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zecd(4)",
              "cf_value": 0.000004275450618659433,
              "t_stat": 771270288949.849,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zecd(5)",
              "cf_value": -0.001333637468405136,
              "t_stat": -138987252349557.1,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zecd(6)",
              "cf_value": 0.001785102754320539,
              "t_stat": 125725623069420.9,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zecd(7)",
              "cf_value": -0.0002714744059753036,
              "t_stat": -17222628523270.1,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zecd(8)",
              "cf_value": 0.0004596118643773856,
              "t_stat": 40071071869676.56,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zecd(9)",
              "cf_value": 0.0004286088490690454,
              "t_stat": 27107892827001.08,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zecd(10)",
              "cf_value": -0.001112480888047013,
              "t_stat": -42134951097191.46,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zecd(11)",
              "cf_value": 0.00003611331309391688,
              "t_stat": 1304160365577.422,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zecd(12)",
              "cf_value": 0.00007975907057934714,
              "t_stat": 4215740180329.646,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zecd(13)",
              "cf_value": 0.001414105742693884,
              "t_stat": 60854825918550.22
            },
            {
              "cf_name": "y_zecd(14)",
              "cf_value": -0.0006396027443177932,
              "t_stat": -28330121768063.43
            },
            {
              "cf_name": "y_zecd(15)",
              "cf_value": -0.0001084142645104688,
              "t_stat": -12149554933672.04,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zecd(16)",
              "cf_value": 0.0002103631242011464,
              "t_stat": 19536743659262.91,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zecd(17)",
              "cf_value": 0.0001780616641343914,
              "t_stat": 16022900609336.77,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zecd(18)",
              "cf_value": 0.0001469127491672944,
              "t_stat": 15427132820762.18,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zecd(19)",
              "cf_value": -0.0001398804267539158,
              "t_stat": -34267046626488.63,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zecd(20)",
              "cf_value": -0.00003380075732963865,
              "t_stat": -7334743944164.851,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zecd(21)",
              "cf_value": 0.0001669757937064113,
              "t_stat": 35373980501884.69,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zecd(22)",
              "cf_value": 0.0001135069368207403,
              "t_stat": 28093678674898.05,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zecd(23)",
              "cf_value": 0.0001241231278850025,
              "t_stat": 20000644123801.06,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zecd(24)",
              "cf_value": -0.0002035919714857632,
              "t_stat": -27182839410765.55,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zecd(25)",
              "cf_value": 0.00005798918819304864,
              "t_stat": 7943716981572.065,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zecd(26)",
              "cf_value": 0.0001142807758711503,
              "t_stat": 18818760701144.66,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zecd(27)",
              "cf_value": 1.020354953788767,
              "t_stat": 132326801278756.1
            },
            {
              "cf_name": "y_zecd(28)",
              "cf_value": -0.752244722798112,
              "t_stat": -193627783552012.3
            },
            {
              "cf_name": "y_zecd(29)",
              "cf_value": 0.030859810575484,
              "t_stat": 38896101935495.72,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zecd(30)",
              "cf_value": 0.0288465643523214,
              "t_stat": 36444930648840.07,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zecd(31)",
              "cf_value": -0.007704793774557718,
              "t_stat": -10699578343323.7,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zecd(32)",
              "cf_value": -0.01236375512939394,
              "t_stat": -18083667017464.91,
              "distributed_lag_group": 7
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "hgpcdr",
            "picnia",
            "ptr",
            "qecd",
            "rff",
            "rtr",
            "xgap2",
            "yhgap",
            "yhpgap",
            "yhtgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZECD is a weighted average of future growth rates of the target\nlevel of investment in consumer durables.  The pattern of the weights\nis a function of the PAC adjustment coefficients in the estimated\nconsumer durables (ECD) equation.  The sum of the weights equals one\nminus the sum of the coefficients on lagged growth of actual investment\nin consumer durables in the ECD equation.",
          "eviews_equation": "zecd - zecd_aerr =\n           y_zecd(1) * d( log(qecd), 0, 1 )\n         + y_zecd(2) * d( log(qecd(1)), 0, 1 )\n         + y_zecd(3) * zecd(1)\n         + y_zecd(4) * zecd(2)",
          "python_equation": "zecd - zecd_aerr =\n           y_zecd_1 * ( log(qecd) - ( log(qecd(-1))))\n         + y_zecd_2 * ( log(qecd(1)) - ( log(qecd)))\n         + y_zecd_3 * zecd(1)\n         + y_zecd_4 * zecd(2)",
          "coeff": [
            {
              "cf_name": "y_zecd(1)",
              "cf_value": 0.17459411013677
            },
            {
              "cf_name": "y_zecd(2)",
              "cf_value": 0.01005960032016498
            },
            {
              "cf_name": "y_zecd(3)",
              "cf_value": 0.7681801340474574
            },
            {
              "cf_name": "y_zecd(4)",
              "cf_value": 0.05761706573196929
            }
          ],
          "rhs_eq_var": [
            "qecd",
            "zecd"
          ]
        }
      },
      {
        "name": "zeco",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of target nondurables and nonhousing services, for ECO eq (VAR",
        "description": "The weighted average growth rate of expected future target\nconsumption, ZECO, is computed from forecasts of the small-scale VAR\nmodel used in the estimation of the consumption (ECO) PAC equation.\nThe forward weights are those implied by the estimated PAC\ncoefficients. The equation shown below is the reduced-form\nrepresentation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zeco  - zeco_aerr =\n           y_zeco(1)*picnia(-1)\n          + y_zeco(2)*picnia(-2)\n          + y_zeco(3)*picnia(-3)\n          + y_zeco(4)*picnia(-4)\n          + y_zeco(5)*rff(-1)\n          + y_zeco(6)*rff(-2)\n          + y_zeco(7)*rff(-3)\n          + y_zeco(8)*rff(-4)\n          + y_zeco(9)*xgap2(-1)\n          + y_zeco(10)*xgap2(-2)\n          + y_zeco(11)*xgap2(-3)\n          + y_zeco(12)*xgap2(-4)\n          + y_zeco(13)*ptr(-1)\n          + y_zeco(14)*rtr(-1)\n          + y_zeco(15)*yhgap(-1)\n          + y_zeco(16)*yhgap(-2)\n          + y_zeco(17)*yhgap(-3)\n          + y_zeco(18)*yhgap(-4)\n          + y_zeco(19)*yhtgap(-1)\n          + y_zeco(20)*yhtgap(-2)\n          + y_zeco(21)*yhtgap(-3)\n          + y_zeco(22)*yhtgap(-4)\n          + y_zeco(23)*yhpgap(-1)\n          + y_zeco(24)*yhpgap(-2)\n          + y_zeco(25)*yhpgap(-3)\n          + y_zeco(26)*yhpgap(-4)\n          + y_zeco(27)*hggdpt(-1)/400\n          + y_zeco(28)*dlog(qeco(-1))\n          + y_zeco(29)*dlog(qeco(-2))\n          + y_zeco(30)*dlog(qeco(-3))\n          + y_zeco(31)*dlog(qeco(-4))",
          "python_equation": "zeco  - zeco_aerr =\n           y_zeco_1*picnia(-1)\n          + y_zeco_2*picnia(-2)\n          + y_zeco_3*picnia(-3)\n          + y_zeco_4*picnia(-4)\n          + y_zeco_5*rff(-1)\n          + y_zeco_6*rff(-2)\n          + y_zeco_7*rff(-3)\n          + y_zeco_8*rff(-4)\n          + y_zeco_9*xgap2(-1)\n          + y_zeco_10*xgap2(-2)\n          + y_zeco_11*xgap2(-3)\n          + y_zeco_12*xgap2(-4)\n          + y_zeco_13*ptr(-1)\n          + y_zeco_14*rtr(-1)\n          + y_zeco_15*yhgap(-1)\n          + y_zeco_16*yhgap(-2)\n          + y_zeco_17*yhgap(-3)\n          + y_zeco_18*yhgap(-4)\n          + y_zeco_19*yhtgap(-1)\n          + y_zeco_20*yhtgap(-2)\n          + y_zeco_21*yhtgap(-3)\n          + y_zeco_22*yhtgap(-4)\n          + y_zeco_23*yhpgap(-1)\n          + y_zeco_24*yhpgap(-2)\n          + y_zeco_25*yhpgap(-3)\n          + y_zeco_26*yhpgap(-4)\n          + y_zeco_27*hggdpt(-1)/400\n          + y_zeco_28*(log(qeco(-1)) - log(qeco(-2)))\n          + y_zeco_29*(log(qeco(-2)) - log(qeco(-3)))\n          + y_zeco_30*(log(qeco(-3)) - log(qeco(-4)))\n          + y_zeco_31*(log(qeco(-4)) - log(qeco(-5)))",
          "coeff": [
            {
              "cf_name": "y_zeco(1)",
              "cf_value": -0.0000752202049495858,
              "t_stat": -49626912295403.81,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeco(2)",
              "cf_value": -0.00007944069331813561,
              "t_stat": -46106883509962.97,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeco(3)",
              "cf_value": -0.00002059316996140204,
              "t_stat": -12423454964908.89,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeco(4)",
              "cf_value": 0.0001004397794984203,
              "t_stat": 67399125271377.72,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeco(5)",
              "cf_value": 0.00002128321856982191,
              "t_stat": 8335535477874.349,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeco(6)",
              "cf_value": 0.00001703531535880844,
              "t_stat": 4779096669368.486,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeco(7)",
              "cf_value": 0.00005501237638104223,
              "t_stat": 15284405623048.26,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeco(8)",
              "cf_value": 0.0000368085672111148,
              "t_stat": 14929479838984.49,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeco(9)",
              "cf_value": -0.0006301710369219651,
              "t_stat": -140925343194848.4,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeco(10)",
              "cf_value": 0.0002738755865138929,
              "t_stat": 39487177099204.14,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeco(11)",
              "cf_value": 0.0001330197561306166,
              "t_stat": 18656041722703.5,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeco(12)",
              "cf_value": -0.00003466191405309875,
              "t_stat": -7149882648393.449,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeco(13)",
              "cf_value": 0.00007481428873071481,
              "t_stat": 14978364966714.62
            },
            {
              "cf_name": "y_zeco(14)",
              "cf_value": -0.0001301394775207934,
              "t_stat": -30205301306840.91
            },
            {
              "cf_name": "y_zeco(15)",
              "cf_value": -0.000574849476125713,
              "t_stat": -207265020466117.4,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeco(16)",
              "cf_value": 0.000315791553755267,
              "t_stat": 88996215754600.11,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeco(17)",
              "cf_value": 0.0003970054362973829,
              "t_stat": 110314620979165.2,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeco(18)",
              "cf_value": 0.00002606365933680952,
              "t_stat": 8719150083625.59,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeco(19)",
              "cf_value": -0.00006065913885267499,
              "t_stat": -56878653788572.08,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeco(20)",
              "cf_value": -0.000005861516974911094,
              "t_stat": -4811581497270.7,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeco(21)",
              "cf_value": 0.00004608692992415466,
              "t_stat": 36247211861987.73,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeco(22)",
              "cf_value": -0.00003675339093791547,
              "t_stat": -34344177066835.96,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeco(23)",
              "cf_value": 0.0002055017720241992,
              "t_stat": 125363250551404.6,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeco(24)",
              "cf_value": -0.0002409377143989024,
              "t_stat": -121445836401119.7,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeco(25)",
              "cf_value": -0.0001318122876593039,
              "t_stat": -69432528942050.39,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeco(26)",
              "cf_value": -0.00008998120362836394,
              "t_stat": -57482353754056.11,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeco(27)",
              "cf_value": 0.4694132786802296,
              "t_stat": 248194456522938.6
            },
            {
              "cf_name": "y_zeco(28)",
              "cf_value": 0.07322397247249939,
              "t_stat": 147980576129697.3,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeco(29)",
              "cf_value": 0.02932374759217591,
              "t_stat": 56997268767217.48,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeco(30)",
              "cf_value": 0.00714849213690236,
              "t_stat": 14168349526675.16,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeco(31)",
              "cf_value": 0.00907784707291976,
              "t_stat": 23236249717367.88,
              "distributed_lag_group": 7
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "picnia",
            "ptr",
            "qeco",
            "rff",
            "rtr",
            "xgap2",
            "yhgap",
            "yhpgap",
            "yhtgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZECO is a weighted average of future growth rates of the target\nlevel of consumption.  The pattern of the weights is a function\nof the PAC adjustment coefficients in the estimated consumption (ECO)\nequation.  The sum of the weights equals one minus the sum of the\ncoefficients on lagged growth of actual consumption in the ECO\nequation.",
          "eviews_equation": "zeco - zeco_aerr =\n            y_zeco(1) * d( log(qec/pcor), 0, 1 )\n          + y_zeco(2) * d( log(qec(1)/pcor(1)), 0, 1 )\n          + y_zeco(3) * zeco(1)\n          + y_zeco(4) * zeco(2)",
          "python_equation": "zeco - zeco_aerr =\n            y_zeco_1 * ( log(qec/pcor) - ( log(qec(-1)/pcor(-1))))\n          + y_zeco_2 * ( log(qec(1)/pcor(1)) - ( log(qec/pcor)))\n          + y_zeco_3 * zeco(1)\n          + y_zeco_4 * zeco(2)",
          "coeff": [
            {
              "cf_name": "y_zeco(1)",
              "cf_value": 0.1626713350753838
            },
            {
              "cf_name": "y_zeco(2)",
              "cf_value": -0.06433730696063324
            },
            {
              "cf_name": "y_zeco(3)",
              "cf_value": 1.228323403283527
            },
            {
              "cf_name": "y_zeco(4)",
              "cf_value": -0.3955048806282838
            }
          ],
          "rhs_eq_var": [
            "pcor",
            "qec",
            "zeco"
          ]
        }
      },
      {
        "name": "zeh",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of target residential investment, for EH eq. (VAR exp.)",
        "description": "The weighted average growth rate of expected future target housing\ninvestment, ZEH, is computed from forecasts of the small-scale VAR\nmodel used in the estimation of the housing (EH) PAC equation.  The\nforward weights are those implied by the estimated PAC\ncoefficients. The equation shown below is the reduced-form\nrepresentation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zeh  - zeh_aerr =\n           y_zeh(1)*picnia(-1)\n          + y_zeh(2)*picnia(-2)\n          + y_zeh(3)*picnia(-3)\n          + y_zeh(4)*picnia(-4)\n          + y_zeh(5)*rff(-1)\n          + y_zeh(6)*rff(-2)\n          + y_zeh(7)*rff(-3)\n          + y_zeh(8)*rff(-4)\n          + y_zeh(9)*xgap2(-1)\n          + y_zeh(10)*xgap2(-2)\n          + y_zeh(11)*xgap2(-3)\n          + y_zeh(12)*xgap2(-4)\n          + y_zeh(13)*ptr(-1)\n          + y_zeh(14)*rtr(-1)\n          + y_zeh(15)*yhgap(-1)\n          + y_zeh(16)*yhgap(-2)\n          + y_zeh(17)*yhgap(-3)\n          + y_zeh(18)*yhgap(-4)\n          + y_zeh(19)*yhtgap(-1)\n          + y_zeh(20)*yhtgap(-2)\n          + y_zeh(21)*yhtgap(-3)\n          + y_zeh(22)*yhtgap(-4)\n          + y_zeh(23)*yhpgap(-1)\n          + y_zeh(24)*yhpgap(-2)\n          + y_zeh(25)*yhpgap(-3)\n          + y_zeh(26)*yhpgap(-4)\n          + y_zeh(27)*hggdpt(-1)/400\n          + y_zeh(28)*dlog(qeh(-1))\n          + y_zeh(29)*dlog(qeh(-2))\n          + y_zeh(30)*dlog(qeh(-3))\n          + y_zeh(31)*dlog(qeh(-4))",
          "python_equation": "zeh  - zeh_aerr =\n           y_zeh_1*picnia(-1)\n          + y_zeh_2*picnia(-2)\n          + y_zeh_3*picnia(-3)\n          + y_zeh_4*picnia(-4)\n          + y_zeh_5*rff(-1)\n          + y_zeh_6*rff(-2)\n          + y_zeh_7*rff(-3)\n          + y_zeh_8*rff(-4)\n          + y_zeh_9*xgap2(-1)\n          + y_zeh_10*xgap2(-2)\n          + y_zeh_11*xgap2(-3)\n          + y_zeh_12*xgap2(-4)\n          + y_zeh_13*ptr(-1)\n          + y_zeh_14*rtr(-1)\n          + y_zeh_15*yhgap(-1)\n          + y_zeh_16*yhgap(-2)\n          + y_zeh_17*yhgap(-3)\n          + y_zeh_18*yhgap(-4)\n          + y_zeh_19*yhtgap(-1)\n          + y_zeh_20*yhtgap(-2)\n          + y_zeh_21*yhtgap(-3)\n          + y_zeh_22*yhtgap(-4)\n          + y_zeh_23*yhpgap(-1)\n          + y_zeh_24*yhpgap(-2)\n          + y_zeh_25*yhpgap(-3)\n          + y_zeh_26*yhpgap(-4)\n          + y_zeh_27*hggdpt(-1)/400\n          + y_zeh_28*(log(qeh(-1)) - log(qeh(-2)))\n          + y_zeh_29*(log(qeh(-2)) - log(qeh(-3)))\n          + y_zeh_30*(log(qeh(-3)) - log(qeh(-4)))\n          + y_zeh_31*(log(qeh(-4)) - log(qeh(-5)))",
          "coeff": [
            {
              "cf_name": "y_zeh(1)",
              "cf_value": -0.00007825906447294479,
              "t_stat": -95611657279976.2,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeh(2)",
              "cf_value": -0.00005221776500989767,
              "t_stat": -58649418819027.06,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeh(3)",
              "cf_value": -0.0000511617748264036,
              "t_stat": -59003989735032.55,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeh(4)",
              "cf_value": 0.00001061188019850692,
              "t_stat": 13579924105850.76,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zeh(5)",
              "cf_value": 0.0001524702142702607,
              "t_stat": 111916524988684.8,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeh(6)",
              "cf_value": 0.0001154619164109844,
              "t_stat": 63056120562777.48,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeh(7)",
              "cf_value": 0.0000694775905299206,
              "t_stat": 37219316432843.25,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeh(8)",
              "cf_value": 0.000006915284271997218,
              "t_stat": 5078571951135.108,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zeh(9)",
              "cf_value": 0.0005016959759548423,
              "t_stat": 221698024529408.8,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeh(10)",
              "cf_value": -0.0005314894632374061,
              "t_stat": -130006118137890.2,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeh(11)",
              "cf_value": -0.0001527167228830226,
              "t_stat": -35809595669001.72,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeh(12)",
              "cf_value": 0.00004422297252718166,
              "t_stat": 15336771672963.09,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zeh(13)",
              "cf_value": 0.0001710267241107452,
              "t_stat": 60358923307459.16
            },
            {
              "cf_name": "y_zeh(14)",
              "cf_value": -0.0003443250054832286,
              "t_stat": -127538174889467.4
            },
            {
              "cf_name": "y_zeh(15)",
              "cf_value": 0.00005547462567554765,
              "t_stat": 40682268174235.35,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeh(16)",
              "cf_value": 0.00004078231691046518,
              "t_stat": 25574858129104.23,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeh(17)",
              "cf_value": -0.00003078619404779462,
              "t_stat": -18546822097638.74,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeh(18)",
              "cf_value": -0.000004584642539780123,
              "t_stat": -3216031243086.713,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zeh(19)",
              "cf_value": 0.000007136415206693365,
              "t_stat": 11570933553992.94,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeh(20)",
              "cf_value": 0.00001470739436481251,
              "t_stat": 21649068595181.82,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeh(21)",
              "cf_value": 0.00003830847423082347,
              "t_stat": 53692428195525.96,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeh(22)",
              "cf_value": 0.00003271967551086854,
              "t_stat": 52600670574971.56,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zeh(23)",
              "cf_value": -0.00006992854917184709,
              "t_stat": -71538350135352.48,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeh(24)",
              "cf_value": 4.550096611877513e-7,
              "t_stat": 407126944126.876,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeh(25)",
              "cf_value": 0.00005504613762415508,
              "t_stat": 50716694166119.3,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeh(26)",
              "cf_value": 0.00002864192627076078,
              "t_stat": 31875642669627.08,
              "distributed_lag_group": 6
            },
            {
              "cf_name": "y_zeh(27)",
              "cf_value": 0.4277729262319505,
              "t_stat": 394684640489598
            },
            {
              "cf_name": "y_zeh(28)",
              "cf_value": 0.004266303023854793,
              "t_stat": 84994630633063.64,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeh(29)",
              "cf_value": -0.001472171716551593,
              "t_stat": -27836563257150.64,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeh(30)",
              "cf_value": -0.003348261838736116,
              "t_stat": -68019626420579.15,
              "distributed_lag_group": 7
            },
            {
              "cf_name": "y_zeh(31)",
              "cf_value": -0.004008022551322911,
              "t_stat": -87072809126637.45,
              "distributed_lag_group": 7
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "picnia",
            "ptr",
            "qeh",
            "rff",
            "rtr",
            "xgap2",
            "yhgap",
            "yhpgap",
            "yhtgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZEH is a weighted average of future growth rates of the target\nlevel of housing investment.  The pattern of the weights is a function\nof the PAC adjustment coefficients in the estimated housing (EH)\nequation.  The sum of the weights equals one minus the sum of the\ncoefficients on lagged growth of actual housing investment in the EH\nequation.",
          "eviews_equation": "zeh - zeh_aerr =\n            y_zeh(1) * d( log(qeh), 0, 1 )\n          + y_zeh(2) * d( log(qeh(1)), 0, 1 )\n          + y_zeh(3) * d( log(qeh(2)), 0, 1 )\n          + y_zeh(4) * zeh(1)\n          + y_zeh(5) * zeh(2)\n          + y_zeh(6) * zeh(3)",
          "python_equation": "zeh - zeh_aerr =\n            y_zeh_1 * ( log(qeh) - ( log(qeh(-1))))\n          + y_zeh_2 * ( log(qeh(1)) - ( log(qeh)))\n          + y_zeh_3 * ( log(qeh(2)) - ( log(qeh(1))))\n          + y_zeh_4 * zeh(1)\n          + y_zeh_5 * zeh(2)\n          + y_zeh_6 * zeh(3)",
          "coeff": [
            {
              "cf_name": "y_zeh(1)",
              "cf_value": 0.02014882514643192
            },
            {
              "cf_name": "y_zeh(2)",
              "cf_value": -0.007094184828575167
            },
            {
              "cf_name": "y_zeh(3)",
              "cf_value": -0.003907725104706547
            },
            {
              "cf_name": "y_zeh(4)",
              "cf_value": 1.330476111084459
            },
            {
              "cf_name": "y_zeh(5)",
              "cf_value": -0.1581461797752957
            },
            {
              "cf_name": "y_zeh(6)",
              "cf_value": -0.1939430749091865
            }
          ],
          "rhs_eq_var": [
            "qeh",
            "zeh"
          ]
        }
      },
      {
        "name": "zgap05",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected output gap, for RG5 eq. (VAR exp.)",
        "description": "ZGAP05 is a weighted average of expected future output gaps.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a five-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zgap05  - zgap05_aerr =\n           y_zgap05(1)\n          + y_zgap05(2)*picnia\n          + y_zgap05(3)*picnia(-1)\n          + y_zgap05(4)*picnia(-2)\n          + y_zgap05(5)*picnia(-3)\n          + y_zgap05(6)*rff\n          + y_zgap05(7)*rff(-1)\n          + y_zgap05(8)*rff(-2)\n          + y_zgap05(9)*rff(-3)\n          + y_zgap05(10)*rtr\n          + y_zgap05(11)*ptr\n          + y_zgap05(12)*xgap\n          + y_zgap05(13)*xgap(-1)\n          + y_zgap05(14)*xgap(-2)\n          + y_zgap05(15)*xgap(-3)",
          "python_equation": "zgap05  - zgap05_aerr =\n           y_zgap05_1\n          + y_zgap05_2*picnia\n          + y_zgap05_3*picnia(-1)\n          + y_zgap05_4*picnia(-2)\n          + y_zgap05_5*picnia(-3)\n          + y_zgap05_6*rff\n          + y_zgap05_7*rff(-1)\n          + y_zgap05_8*rff(-2)\n          + y_zgap05_9*rff(-3)\n          + y_zgap05_10*rtr\n          + y_zgap05_11*ptr\n          + y_zgap05_12*xgap\n          + y_zgap05_13*xgap(-1)\n          + y_zgap05_14*xgap(-2)\n          + y_zgap05_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zgap05(1)",
              "cf_value": 1.680034256141885e-14,
              "t_stat": 3.13238676508743
            },
            {
              "cf_name": "y_zgap05(2)",
              "cf_value": -0.135018393340065,
              "t_stat": -225537547137231.8,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap05(3)",
              "cf_value": -0.033843245261391,
              "t_stat": -51409221123854.58,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap05(4)",
              "cf_value": -0.0391222647986449,
              "t_stat": -59642088369866.18,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap05(5)",
              "cf_value": 0.0173522186659534,
              "t_stat": 28803538440394.08,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap05(6)",
              "cf_value": -0.3753303057576422,
              "t_stat": -362667964211570,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap05(7)",
              "cf_value": 0.09700115982970414,
              "t_stat": 68277017487194.92,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap05(8)",
              "cf_value": 0.0739366214990041,
              "t_stat": 51881216769234.5,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap05(9)",
              "cf_value": 0.02583604947764563,
              "t_stat": 24784720021749.41,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap05(10)",
              "cf_value": 0.1785564749514165,
              "t_stat": 80685294984955.11
            },
            {
              "cf_name": "y_zgap05(11)",
              "cf_value": 0.190631684734112,
              "t_stat": 95594785391953.77
            },
            {
              "cf_name": "y_zgap05(12)",
              "cf_value": 0.8244238037691352,
              "t_stat": 661081190909772.5,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap05(13)",
              "cf_value": -0.2862444942364248,
              "t_stat": -131153166179950.7,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap05(14)",
              "cf_value": -0.06697780461567028,
              "t_stat": -30929337421280.53,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap05(15)",
              "cf_value": -0.08505399389084824,
              "t_stat": -64599583381168.84,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZGAP05 is a weighted average of future output gaps.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a five-year bond.",
          "eviews_equation": "zgap05 - zgap05_aerr =\n              y_zgap05(1) * xgap\n            + y_zgap05(2) * zgap05(1)",
          "python_equation": "zgap05 - zgap05_aerr =\n              y_zgap05_1 * xgap\n            + y_zgap05_2 * zgap05(1)",
          "coeff": [
            {
              "cf_name": "y_zgap05(1)",
              "cf_value": 0.05479365264340726
            },
            {
              "cf_name": "y_zgap05(2)",
              "cf_value": 0.9452063473565927
            }
          ],
          "rhs_eq_var": [
            "xgap",
            "zgap05"
          ]
        }
      },
      {
        "name": "zgap10",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected output gap, for RG10 eq. (VAR exp.)",
        "description": "ZGAP10 is a weighted average of expected future output gaps.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a ten-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zgap10  - zgap10_aerr =\n           y_zgap10(1)\n          + y_zgap10(2)*picnia\n          + y_zgap10(3)*picnia(-1)\n          + y_zgap10(4)*picnia(-2)\n          + y_zgap10(5)*picnia(-3)\n          + y_zgap10(6)*rff\n          + y_zgap10(7)*rff(-1)\n          + y_zgap10(8)*rff(-2)\n          + y_zgap10(9)*rff(-3)\n          + y_zgap10(10)*rtr\n          + y_zgap10(11)*ptr\n          + y_zgap10(12)*xgap\n          + y_zgap10(13)*xgap(-1)\n          + y_zgap10(14)*xgap(-2)\n          + y_zgap10(15)*xgap(-3)",
          "python_equation": "zgap10  - zgap10_aerr =\n           y_zgap10_1\n          + y_zgap10_2*picnia\n          + y_zgap10_3*picnia(-1)\n          + y_zgap10_4*picnia(-2)\n          + y_zgap10_5*picnia(-3)\n          + y_zgap10_6*rff\n          + y_zgap10_7*rff(-1)\n          + y_zgap10_8*rff(-2)\n          + y_zgap10_9*rff(-3)\n          + y_zgap10_10*rtr\n          + y_zgap10_11*ptr\n          + y_zgap10_12*xgap\n          + y_zgap10_13*xgap(-1)\n          + y_zgap10_14*xgap(-2)\n          + y_zgap10_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zgap10(1)",
              "cf_value": -1.72233727697999e-15,
              "t_stat": -0.6735526902562512
            },
            {
              "cf_name": "y_zgap10(2)",
              "cf_value": -0.07186017182762353,
              "t_stat": -251773663431233.2,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap10(3)",
              "cf_value": -0.0175779452476843,
              "t_stat": -56005832980788.28,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap10(4)",
              "cf_value": -0.02011214475127172,
              "t_stat": -64310719784657.65,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap10(5)",
              "cf_value": 0.00932019093665923,
              "t_stat": 32449781092749.76,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap10(6)",
              "cf_value": -0.1947856648478703,
              "t_stat": -394774129508043.8,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap10(7)",
              "cf_value": 0.05145463389633801,
              "t_stat": 75965821356972.6,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap10(8)",
              "cf_value": 0.03639872748995771,
              "t_stat": 53571386022511.3,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap10(9)",
              "cf_value": 0.01608667022522785,
              "t_stat": 32368323008614.7,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap10(10)",
              "cf_value": 0.09084563323655222,
              "t_stat": 86103137071094.52
            },
            {
              "cf_name": "y_zgap10(11)",
              "cf_value": 0.1002300708898616,
              "t_stat": 105422493648269.6
            },
            {
              "cf_name": "y_zgap10(12)",
              "cf_value": 0.4164381390044698,
              "t_stat": 700407690042432.4,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap10(13)",
              "cf_value": -0.1384702815508384,
              "t_stat": -133074346871721.2,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap10(14)",
              "cf_value": -0.03509009429541885,
              "t_stat": -33987590282750.88,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap10(15)",
              "cf_value": -0.04485907444527642,
              "t_stat": -71463033091275.98,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZGAP10 is a weighted average of future output gaps.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a ten-year bond.",
          "eviews_equation": "zgap10 - zgap10_aerr =\n              y_zgap10(1) * xgap\n            + y_zgap10(2) * zgap10(1)",
          "python_equation": "zgap10 - zgap10_aerr =\n              y_zgap10_1 * xgap\n            + y_zgap10_2 * zgap10(1)",
          "coeff": [
            {
              "cf_name": "y_zgap10(1)",
              "cf_value": 0.03007455810944507
            },
            {
              "cf_name": "y_zgap10(2)",
              "cf_value": 0.969925441890555
            }
          ],
          "rhs_eq_var": [
            "xgap",
            "zgap10"
          ]
        }
      },
      {
        "name": "zgap30",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected output gap, for RG30 eq. (VAR exp.)",
        "description": "ZGAP30 is a weighted average of expected future output gaps.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a thirty-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zgap30  - zgap30_aerr =\n           y_zgap30(1)\n          + y_zgap30(2)*picnia\n          + y_zgap30(3)*picnia(-1)\n          + y_zgap30(4)*picnia(-2)\n          + y_zgap30(5)*picnia(-3)\n          + y_zgap30(6)*rff\n          + y_zgap30(7)*rff(-1)\n          + y_zgap30(8)*rff(-2)\n          + y_zgap30(9)*rff(-3)\n          + y_zgap30(10)*rtr\n          + y_zgap30(11)*ptr\n          + y_zgap30(12)*xgap\n          + y_zgap30(13)*xgap(-1)\n          + y_zgap30(14)*xgap(-2)\n          + y_zgap30(15)*xgap(-3)",
          "python_equation": "zgap30  - zgap30_aerr =\n           y_zgap30_1\n          + y_zgap30_2*picnia\n          + y_zgap30_3*picnia(-1)\n          + y_zgap30_4*picnia(-2)\n          + y_zgap30_5*picnia(-3)\n          + y_zgap30_6*rff\n          + y_zgap30_7*rff(-1)\n          + y_zgap30_8*rff(-2)\n          + y_zgap30_9*rff(-3)\n          + y_zgap30_10*rtr\n          + y_zgap30_11*ptr\n          + y_zgap30_12*xgap\n          + y_zgap30_13*xgap(-1)\n          + y_zgap30_14*xgap(-2)\n          + y_zgap30_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zgap30(1)",
              "cf_value": 1.233586304082598e-14,
              "t_stat": 6.624030172169992
            },
            {
              "cf_name": "y_zgap30(2)",
              "cf_value": -0.03828909910973519,
              "t_stat": -184202951672628.2,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap30(3)",
              "cf_value": -0.009397163294017394,
              "t_stat": -41111310060487.69,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap30(4)",
              "cf_value": -0.01076603951015025,
              "t_stat": -47269427534806.69,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap30(5)",
              "cf_value": 0.004952700162140002,
              "t_stat": 23677093405447.68,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgap30(6)",
              "cf_value": -0.1039011522662461,
              "t_stat": -289142176347015.3,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap30(7)",
              "cf_value": 0.02741531710257839,
              "t_stat": 55575887669694.18,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap30(8)",
              "cf_value": 0.01963869374286508,
              "t_stat": 39687950156534.94,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap30(9)",
              "cf_value": 0.008399118041939092,
              "t_stat": 23205296103812.97,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgap30(10)",
              "cf_value": 0.04844802337909579,
              "t_stat": 63050766479994.02
            },
            {
              "cf_name": "y_zgap30(11)",
              "cf_value": 0.05349960175170328,
              "t_stat": 77265422817041
            },
            {
              "cf_name": "y_zgap30(12)",
              "cf_value": 0.2233011674563412,
              "t_stat": 515692471754453.6,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap30(13)",
              "cf_value": -0.07470857907468761,
              "t_stat": -98584271974539.05,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap30(14)",
              "cf_value": -0.0187522007846854,
              "t_stat": -24939484512109.39,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgap30(15)",
              "cf_value": -0.02392742740702374,
              "t_stat": -52339134006941.06,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZGAP30 is a weighted average of future output gaps.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a thirty-year bond.",
          "eviews_equation": "zgap30 - zgap30_aerr =\n              y_zgap30(1) * xgap\n            + y_zgap30(2) * zgap30(1)",
          "python_equation": "zgap30 - zgap30_aerr =\n              y_zgap30_1 * xgap\n            + y_zgap30_2 * zgap30(1)",
          "coeff": [
            {
              "cf_name": "y_zgap30(1)",
              "cf_value": 0.01410658898201937
            },
            {
              "cf_name": "y_zgap30(2)",
              "cf_value": 0.9858934110179807
            }
          ],
          "rhs_eq_var": [
            "xgap",
            "zgap30"
          ]
        }
      },
      {
        "name": "zgapc2",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected output gap, for ECD eq. (VAR exp.)",
        "description": "The weighted average of expected future output gaps, ZGAPC2, is\ncomputed from forecasts of the small-scale VAR model used in the\nestimation of the consumer durables (ECD) PAC equation.  The forward\nweights are those implied by the estimated PAC coefficients. The\nequation shown below is the reduced-form representation of this\nexpectational computation.",
        "standard_equation": {
          "eviews_equation": "zgapc2  - zgapc2_aerr =\n           y_zgapc2(1)*picnia(-1)\n          + y_zgapc2(2)*picnia(-2)\n          + y_zgapc2(3)*picnia(-3)\n          + y_zgapc2(4)*picnia(-4)\n          + y_zgapc2(5)*rff(-1)\n          + y_zgapc2(6)*rff(-2)\n          + y_zgapc2(7)*rff(-3)\n          + y_zgapc2(8)*rff(-4)\n          + y_zgapc2(9)*xgap2(-1)\n          + y_zgapc2(10)*xgap2(-2)\n          + y_zgapc2(11)*xgap2(-3)\n          + y_zgapc2(12)*xgap2(-4)\n          + y_zgapc2(13)*ptr(-1)\n          + y_zgapc2(14)*rtr(-1)",
          "python_equation": "zgapc2  - zgapc2_aerr =\n           y_zgapc2_1*picnia(-1)\n          + y_zgapc2_2*picnia(-2)\n          + y_zgapc2_3*picnia(-3)\n          + y_zgapc2_4*picnia(-4)\n          + y_zgapc2_5*rff(-1)\n          + y_zgapc2_6*rff(-2)\n          + y_zgapc2_7*rff(-3)\n          + y_zgapc2_8*rff(-4)\n          + y_zgapc2_9*xgap2(-1)\n          + y_zgapc2_10*xgap2(-2)\n          + y_zgapc2_11*xgap2(-3)\n          + y_zgapc2_12*xgap2(-4)\n          + y_zgapc2_13*ptr(-1)\n          + y_zgapc2_14*rtr(-1)",
          "coeff": [
            {
              "cf_name": "y_zgapc2(1)",
              "cf_value": -0.01418483319860699,
              "t_stat": -183511281610292.6,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgapc2(2)",
              "cf_value": -0.00438957847118337,
              "t_stat": -51995058875822.93,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgapc2(3)",
              "cf_value": -0.006089864990632572,
              "t_stat": -72174310903146.3,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgapc2(4)",
              "cf_value": 0.001274535866759684,
              "t_stat": 16499742111984.5,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zgapc2(5)",
              "cf_value": -0.0426889990257948,
              "t_stat": -324669628130673.6,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgapc2(6)",
              "cf_value": 0.007759946050458921,
              "t_stat": 42862336182312.45,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgapc2(7)",
              "cf_value": 0.01912856687923288,
              "t_stat": 105347903177845.2,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgapc2(8)",
              "cf_value": -0.002207952775923244,
              "t_stat": -16602950151871.78,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zgapc2(9)",
              "cf_value": 0.1943845369683129,
              "t_stat": 886746637602129.1,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgapc2(10)",
              "cf_value": -0.07640072342643053,
              "t_stat": -199113358767933.1,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgapc2(11)",
              "cf_value": -0.01132460234847898,
              "t_stat": -29753158106850.01,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgapc2(12)",
              "cf_value": -0.01555183396619014,
              "t_stat": -67658699891014.55,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zgapc2(13)",
              "cf_value": 0.02338974079366426,
              "t_stat": 104699003743847.8
            },
            {
              "cf_name": "y_zgapc2(14)",
              "cf_value": 0.01800843887202016,
              "t_stat": 165510326897816.2
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap2"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZGAPC2 is a weighted average of future output gaps.  The pattern\nof the weights is a function of the PAC adjustment coefficients in the\nestimated consumer durables (ECD) equation.",
          "eviews_equation": "zgapc2 - zgapc2_aerr =\n              y_zgapc2(1) * xgap2\n            + y_zgapc2(2) * zgapc2(1)\n            + y_zgapc2(3) * zgapc2(2)",
          "python_equation": "zgapc2 - zgapc2_aerr =\n              y_zgapc2_1 * xgap2\n            + y_zgapc2_2 * zgapc2(1)\n            + y_zgapc2_3 * zgapc2(2)",
          "coeff": [
            {
              "cf_name": "y_zgapc2(1)",
              "cf_value": 0.02720175689759672
            },
            {
              "cf_name": "y_zgapc2(2)",
              "cf_value": 0.7681801340474574
            },
            {
              "cf_name": "y_zgapc2(3)",
              "cf_value": 0.05761706573196929
            }
          ],
          "rhs_eq_var": [
            "xgap2",
            "zgapc2"
          ]
        }
      },
      {
        "name": "zlhp",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected growth rate of target aggregate hours (VAR exp.)",
        "description": "The weighted average growth rate of expected future target\nhours, ZLHP, is computed from forecasts of the small-scale VAR\nmodel used in the estimation of the hours (LHP) PAC equation.\nThe forward weights are those implied by the estimated PAC\ncoefficients. The equation shown below is the reduced-form\nrepresentation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zlhp  - zlhp_aerr =\n           y_zlhp(1)*picnia(-1)\n          + y_zlhp(2)*picnia(-2)\n          + y_zlhp(3)*picnia(-3)\n          + y_zlhp(4)*picnia(-4)\n          + y_zlhp(5)*rff(-1)\n          + y_zlhp(6)*rff(-2)\n          + y_zlhp(7)*rff(-3)\n          + y_zlhp(8)*rff(-4)\n          + y_zlhp(9)*rtr(-1)\n          + y_zlhp(10)*ptr(-1)\n          + y_zlhp(11)*xgap(-1)\n          + y_zlhp(12)*xgap(-2)\n          + y_zlhp(13)*xgap(-3)\n          + y_zlhp(14)*xgap(-4)\n          + y_zlhp(15)*(dlog(xbo(-1))-dlog(lprdt(-1)))\n          + y_zlhp(16)*(hlept(-1)+hqlww(-1))/400",
          "python_equation": "zlhp  - zlhp_aerr =\n           y_zlhp_1*picnia(-1)\n          + y_zlhp_2*picnia(-2)\n          + y_zlhp_3*picnia(-3)\n          + y_zlhp_4*picnia(-4)\n          + y_zlhp_5*rff(-1)\n          + y_zlhp_6*rff(-2)\n          + y_zlhp_7*rff(-3)\n          + y_zlhp_8*rff(-4)\n          + y_zlhp_9*rtr(-1)\n          + y_zlhp_10*ptr(-1)\n          + y_zlhp_11*xgap(-1)\n          + y_zlhp_12*xgap(-2)\n          + y_zlhp_13*xgap(-3)\n          + y_zlhp_14*xgap(-4)\n          + y_zlhp_15*((log(xbo(-1)) - log(xbo(-2)))-(log(lprdt(-1)) - log(lprdt(-2))))\n          + y_zlhp_16*(hlept(-1)+hqlww(-1))/400",
          "coeff": [
            {
              "cf_name": "y_zlhp(1)",
              "cf_value": -0.0002023213774340967,
              "t_stat": -13852183262242.01,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zlhp(2)",
              "cf_value": -0.0000654709155555966,
              "t_stat": -4113974099414.071,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zlhp(3)",
              "cf_value": -0.0001720246830139474,
              "t_stat": -10811709366629.95,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zlhp(4)",
              "cf_value": 0.0000313937564958239,
              "t_stat": 2133535272458.823,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zlhp(5)",
              "cf_value": -0.001047476022547437,
              "t_stat": -41025999500683.03,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zlhp(6)",
              "cf_value": 0.0002598839064585707,
              "t_stat": 7538625027151.906,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zlhp(7)",
              "cf_value": 0.0005079095801600575,
              "t_stat": 14763615974640.51,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zlhp(8)",
              "cf_value": -0.0000419862687487686,
              "t_stat": -1663985914805.097,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zlhp(9)",
              "cf_value": 0.0003216688046775128,
              "t_stat": 11401215516722.34
            },
            {
              "cf_name": "y_zlhp(10)",
              "cf_value": 0.0004084232195080358,
              "t_stat": 9184882988091.533
            },
            {
              "cf_name": "y_zlhp(11)",
              "cf_value": -0.005754964729358652,
              "t_stat": -33237678485053.67,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zlhp(12)",
              "cf_value": 0.005816827692544119,
              "t_stat": 32225542986977.03,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zlhp(13)",
              "cf_value": -0.0002034859294983795,
              "t_stat": -3883443611180.43,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zlhp(14)",
              "cf_value": -0.0002715434817101584,
              "t_stat": -8536288099493.929,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zlhp(15)",
              "cf_value": 0.6857946901749924,
              "t_stat": 40540039103487.41
            },
            {
              "cf_name": "y_zlhp(16)",
              "cf_value": 0.1113240674326222,
              "t_stat": 3130854335557.618
            }
          ],
          "rhs_eq_var": [
            "hlept",
            "hqlww",
            "lprdt",
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xbo",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZLHP is a weighted average of future growth rates of the target\nlevel of hours.  The pattern of the weights is a function of the PAC\nadjustment coefficients in the estimated hours (LHP) equation.  The\nsum of the weights equals one minus the sum of the coefficients on\nlagged growth of actual hours in the LHP equation.",
          "eviews_equation": "zlhp - zlhp_aerr =\n            y_zlhp(1) * d( log(qlhp), 0, 1 )\n          + y_zlhp(2) * d( log(qlhp(1)), 0, 1 )\n          + y_zlhp(3) * zlhp(1)\n          + y_zlhp(4) * zlhp(2)",
          "python_equation": "zlhp - zlhp_aerr =\n            y_zlhp_1 * ( log(qlhp) - ( log(qlhp(-1))))\n          + y_zlhp_2 * ( log(qlhp(1)) - ( log(qlhp)))\n          + y_zlhp_3 * zlhp(1)\n          + y_zlhp_4 * zlhp(2)",
          "coeff": [
            {
              "cf_name": "y_zlhp(1)",
              "cf_value": 0.2121303706720161
            },
            {
              "cf_name": "y_zlhp(2)",
              "cf_value": -0.04133299713432281
            },
            {
              "cf_name": "y_zlhp(3)",
              "cf_value": 0.9805787292172398
            },
            {
              "cf_name": "y_zlhp(4)",
              "cf_value": -0.1948471451936957
            }
          ],
          "rhs_eq_var": [
            "qlhp",
            "zlhp"
          ]
        }
      },
      {
        "name": "zpi10",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected cons. price infl., for RCCH, RRMET, and YHPNTN eqs. (10-yr mat.) (VAR exp.)",
        "description": "ZPI10 is a weighted average of future PCE price inflation.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a ten-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zpi10  - zpi10_aerr =\n           y_zpi10(1)*picnia(-1)\n          + y_zpi10(2)*picnia(-2)\n          + y_zpi10(3)*picnia(-3)\n          + y_zpi10(4)*picnia(-4)\n          + y_zpi10(5)*rff(-1)\n          + y_zpi10(6)*rff(-2)\n          + y_zpi10(7)*rff(-3)\n          + y_zpi10(8)*rff(-4)\n          + y_zpi10(9)*rtr(-1)\n          + y_zpi10(10)*ptr(-1)\n          + y_zpi10(11)*xgap(-1)\n          + y_zpi10(12)*xgap(-2)\n          + y_zpi10(13)*xgap(-3)\n          + y_zpi10(14)*xgap(-4)",
          "python_equation": "zpi10  - zpi10_aerr =\n           y_zpi10_1*picnia(-1)\n          + y_zpi10_2*picnia(-2)\n          + y_zpi10_3*picnia(-3)\n          + y_zpi10_4*picnia(-4)\n          + y_zpi10_5*rff(-1)\n          + y_zpi10_6*rff(-2)\n          + y_zpi10_7*rff(-3)\n          + y_zpi10_8*rff(-4)\n          + y_zpi10_9*rtr(-1)\n          + y_zpi10_10*ptr(-1)\n          + y_zpi10_11*xgap(-1)\n          + y_zpi10_12*xgap(-2)\n          + y_zpi10_13*xgap(-3)\n          + y_zpi10_14*xgap(-4)",
          "coeff": [
            {
              "cf_name": "y_zpi10(1)",
              "cf_value": 0.04357427172865281,
              "t_stat": 25581022077846.05,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi10(2)",
              "cf_value": 0.01313050267242623,
              "t_stat": 7018258649786.388,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi10(3)",
              "cf_value": 0.01553540483390203,
              "t_stat": 8308495386989.58,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi10(4)",
              "cf_value": 0.001463442508125493,
              "t_stat": 855683684257.623,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi10(5)",
              "cf_value": -0.1039822705900788,
              "t_stat": -35596944123395.03,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi10(6)",
              "cf_value": -0.01432543074446008,
              "t_stat": -3550052775245.763,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi10(7)",
              "cf_value": -0.02962517842600198,
              "t_stat": -7310687451558.709,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi10(8)",
              "cf_value": -0.007038183618428771,
              "t_stat": -2388398287173.612,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi10(9)",
              "cf_value": 0.154971063378944,
              "t_stat": 64809640708192.54
            },
            {
              "cf_name": "y_zpi10(10)",
              "cf_value": 0.9262963782569013,
              "t_stat": 189546297693701.4
            },
            {
              "cf_name": "y_zpi10(11)",
              "cf_value": 0.06032284838878826,
              "t_stat": 17009212814890.9,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi10(12)",
              "cf_value": -0.01019384116585764,
              "t_stat": -1641397658677.163,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi10(13)",
              "cf_value": 0.02546215714985389,
              "t_stat": 4133493689133.451,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi10(14)",
              "cf_value": 0.02470109220233158,
              "t_stat": 6598174923072.22,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZPI10 a weighted average of future PCE price inflation.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a ten-year bond.",
          "eviews_equation": "zpi10 - zpi10_aerr =\n             y_zpi10(1) * picnia\n           + y_zpi10(2) * zpi10(1)",
          "python_equation": "zpi10 - zpi10_aerr =\n             y_zpi10_1 * picnia\n           + y_zpi10_2 * zpi10(1)",
          "coeff": [
            {
              "cf_name": "y_zpi10(1)",
              "cf_value": 0.03007455810944507
            },
            {
              "cf_name": "y_zpi10(2)",
              "cf_value": 0.969925441890555
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "zpi10"
          ]
        }
      },
      {
        "name": "zpi10f",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected cons. price infl., for FPXR eq. (10-yr mat.) (VAR exp.)",
        "standard_equation": {
          "eviews_equation": "zpi10f-zpi10f_aerr = zpi10",
          "python_equation": "zpi10f-zpi10f_aerr = zpi10",
          "rhs_eq_var": "zpi10"
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "",
          "eviews_equation": "zpi10f - zpi10f_aerr =\n             y_zpi10f(1) * picnia\n           + y_zpi10f(2) * zpi10f(1)",
          "python_equation": "zpi10f - zpi10f_aerr =\n             y_zpi10f_1 * picnia\n           + y_zpi10f_2 * zpi10f(1)",
          "coeff": [
            {
              "cf_name": "y_zpi10f(1)",
              "cf_value": 0.03007455810944507
            },
            {
              "cf_name": "y_zpi10f(2)",
              "cf_value": 0.969925441890555
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "zpi10f"
          ]
        }
      },
      {
        "name": "zpi5",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected cons. price infl., for RCCD eq. (5-yr mat.) (VAR exp.)",
        "description": "ZPI5 is a weighted average of future PCE price inflation.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a five-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zpi5  - zpi5_aerr =\n           y_zpi5(1)*picnia(-1)\n          + y_zpi5(2)*picnia(-2)\n          + y_zpi5(3)*picnia(-3)\n          + y_zpi5(4)*picnia(-4)\n          + y_zpi5(5)*rff(-1)\n          + y_zpi5(6)*rff(-2)\n          + y_zpi5(7)*rff(-3)\n          + y_zpi5(8)*rff(-4)\n          + y_zpi5(9)*rtr(-1)\n          + y_zpi5(10)*ptr(-1)\n          + y_zpi5(11)*xgap(-1)\n          + y_zpi5(12)*xgap(-2)\n          + y_zpi5(13)*xgap(-3)\n          + y_zpi5(14)*xgap(-4)",
          "python_equation": "zpi5  - zpi5_aerr =\n           y_zpi5_1*picnia(-1)\n          + y_zpi5_2*picnia(-2)\n          + y_zpi5_3*picnia(-3)\n          + y_zpi5_4*picnia(-4)\n          + y_zpi5_5*rff(-1)\n          + y_zpi5_6*rff(-2)\n          + y_zpi5_7*rff(-3)\n          + y_zpi5_8*rff(-4)\n          + y_zpi5_9*rtr(-1)\n          + y_zpi5_10*ptr(-1)\n          + y_zpi5_11*xgap(-1)\n          + y_zpi5_12*xgap(-2)\n          + y_zpi5_13*xgap(-3)\n          + y_zpi5_14*xgap(-4)",
          "coeff": [
            {
              "cf_name": "y_zpi5(1)",
              "cf_value": 0.08178762749631197,
              "t_stat": 74344487059693.84,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi5(2)",
              "cf_value": 0.02218684188675673,
              "t_stat": 18361870048742.15,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi5(3)",
              "cf_value": 0.02501945218256163,
              "t_stat": 20718151682702.81,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi5(4)",
              "cf_value": -0.00009007062448078559,
              "t_stat": -81544404058.8857,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpi5(5)",
              "cf_value": -0.1456765471759016,
              "t_stat": -77217629199387.48,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi5(6)",
              "cf_value": -0.03113773606787808,
              "t_stat": -11947789347514.41,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi5(7)",
              "cf_value": -0.02949319295743922,
              "t_stat": -11269183185568.2,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi5(8)",
              "cf_value": -0.0275798582145864,
              "t_stat": -14491441607625.02,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpi5(9)",
              "cf_value": 0.2338873344157305,
              "t_stat": 151449941153792.1
            },
            {
              "cf_name": "y_zpi5(10)",
              "cf_value": 0.8710961490588724,
              "t_stat": 275997302660806.2
            },
            {
              "cf_name": "y_zpi5(11)",
              "cf_value": 0.174192252057006,
              "t_stat": 76050944579879.58,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi5(12)",
              "cf_value": -0.07184023126885179,
              "t_stat": -17910886129947.65,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi5(13)",
              "cf_value": 0.04066371951581198,
              "t_stat": 10221216553467.47,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpi5(14)",
              "cf_value": 0.04494462398507848,
              "t_stat": 18589119674318.56,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZPI5 a weighted average of future PCE price inflation.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a five-year bond.",
          "eviews_equation": "zpi5 - zpi5_aerr =\n            y_zpi5(1) * picnia\n          + y_zpi5(2) * zpi5(1)",
          "python_equation": "zpi5 - zpi5_aerr =\n            y_zpi5_1 * picnia\n          + y_zpi5_2 * zpi5(1)",
          "coeff": [
            {
              "cf_name": "y_zpi5(1)",
              "cf_value": 0.05479365264340726
            },
            {
              "cf_name": "y_zpi5(2)",
              "cf_value": 0.9452063473565927
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "zpi5"
          ]
        }
      },
      {
        "name": "zpib5",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected output price infl., for RPD eq. (5-yr mat.) (VAR exp.)",
        "description": "ZPI5 is a weighted average of future business sector price\ninflation.  The weights sum to one and decline geometrically at a rate\nbased on the average duration of a five-year bond.  The equation shown\nbelow is the reduced-form representation of this expectational\ncomputation based on a small-scale VAR model.",
        "standard_equation": {
          "eviews_equation": "zpib5  - zpib5_aerr =\n           y_zpib5(1)\n          + y_zpib5(2)*picnia(-1)\n          + y_zpib5(3)*picnia(-2)\n          + y_zpib5(4)*picnia(-3)\n          + y_zpib5(5)*picnia(-4)\n          + y_zpib5(6)*rff(-1)\n          + y_zpib5(7)*rff(-2)\n          + y_zpib5(8)*rff(-3)\n          + y_zpib5(9)*rff(-4)\n          + y_zpib5(10)*rtr(-1)\n          + y_zpib5(11)*ptr(-1)\n          + y_zpib5(12)*xgap(-1)\n          + y_zpib5(13)*xgap(-2)\n          + y_zpib5(14)*xgap(-3)\n          + y_zpib5(15)*xgap(-4)\n          + y_zpib5(16)*400*dlog(pxb(-1))\n          + y_zpib5(17)*400*dlog(pxb(-2))\n          + y_zpib5(18)*400*dlog(pxb(-3))\n          + y_zpib5(19)*400*dlog(pxb(-4))",
          "python_equation": "zpib5  - zpib5_aerr =\n           y_zpib5_1\n          + y_zpib5_2*picnia(-1)\n          + y_zpib5_3*picnia(-2)\n          + y_zpib5_4*picnia(-3)\n          + y_zpib5_5*picnia(-4)\n          + y_zpib5_6*rff(-1)\n          + y_zpib5_7*rff(-2)\n          + y_zpib5_8*rff(-3)\n          + y_zpib5_9*rff(-4)\n          + y_zpib5_10*rtr(-1)\n          + y_zpib5_11*ptr(-1)\n          + y_zpib5_12*xgap(-1)\n          + y_zpib5_13*xgap(-2)\n          + y_zpib5_14*xgap(-3)\n          + y_zpib5_15*xgap(-4)\n          + y_zpib5_16*400*(log(pxb(-1)) - log(pxb(-2)))\n          + y_zpib5_17*400*(log(pxb(-2)) - log(pxb(-3)))\n          + y_zpib5_18*400*(log(pxb(-3)) - log(pxb(-4)))\n          + y_zpib5_19*400*(log(pxb(-4)) - log(pxb(-5)))",
          "coeff": [
            {
              "cf_name": "y_zpib5(1)",
              "cf_value": -1.26476978296206e-13,
              "t_stat": -7.683403574672241
            },
            {
              "cf_name": "y_zpib5(2)",
              "cf_value": 0.09034003814843485,
              "t_stat": 34392274456529.41,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpib5(3)",
              "cf_value": 0.03168080238087264,
              "t_stat": 11162726930000.75,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpib5(4)",
              "cf_value": 0.02770787918164321,
              "t_stat": 9958273727502.344,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpib5(5)",
              "cf_value": -0.01510178193123456,
              "t_stat": -5515639366297.929,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpib5(6)",
              "cf_value": -0.1969518961104264,
              "t_stat": -62604508571114.16,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpib5(7)",
              "cf_value": -0.05959604539330121,
              "t_stat": -13635517988663.41,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpib5(8)",
              "cf_value": -0.04862163727886338,
              "t_stat": -11137165658609.11,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpib5(9)",
              "cf_value": -0.03073950807678016,
              "t_stat": -9690751648350.959,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpib5(10)",
              "cf_value": 0.335909086859382,
              "t_stat": 49264303130607.26
            },
            {
              "cf_name": "y_zpib5(11)",
              "cf_value": 0.7000747567151794,
              "t_stat": 115459764873131.9
            },
            {
              "cf_name": "y_zpib5(12)",
              "cf_value": 0.1468903171096267,
              "t_stat": 37946443497785.82,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpib5(13)",
              "cf_value": -0.03885798005146663,
              "t_stat": -5725835529903.006,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpib5(14)",
              "cf_value": 0.05539395398596192,
              "t_stat": 8379743264899.978,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpib5(15)",
              "cf_value": 0.04005203158941733,
              "t_stat": 10042742832237.08,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpib5(16)",
              "cf_value": 0.07826113766639138,
              "t_stat": 24933113266351.02,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zpib5(17)",
              "cf_value": 0.03750285709064176,
              "t_stat": 11547360724411.54,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zpib5(18)",
              "cf_value": 0.01611932032188939,
              "t_stat": 5165441240342.243,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zpib5(19)",
              "cf_value": 0.0334149904260995,
              "t_stat": 11927548801603.49,
              "distributed_lag_group": 4
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "pxb",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZPI5 a weighted average of future business sector price inflation.\nThe weights sum to one and decline geometrically at a rate based on\nthe average duration of a five-year bond.",
          "eviews_equation": "zpib5 - zpib5_aerr =\n             y_zpib5(1) * 400 * d( log(pxb), 0, 1 )\n           + y_zpib5(2) * zpib5(1)",
          "python_equation": "zpib5 - zpib5_aerr =\n             y_zpib5_1 * 400 * ( log(pxb) - ( log(pxb(-1))))\n           + y_zpib5_2 * zpib5(1)",
          "coeff": [
            {
              "cf_name": "y_zpib5(1)",
              "cf_value": 0.05479365264340726
            },
            {
              "cf_name": "y_zpib5(2)",
              "cf_value": 0.9452063473565927
            }
          ],
          "rhs_eq_var": [
            "pxb",
            "zpib5"
          ]
        }
      },
      {
        "name": "zpic30",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected cons. price infl., for REQ eq. (30-yr mat.) (VAR exp.)",
        "description": "ZPIC30 is a weighted average of future PCE price inflation.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a thirty-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zpic30  - zpic30_aerr =\n           y_zpic30(1)\n          + y_zpic30(2)*picnia\n          + y_zpic30(3)*picnia(-1)\n          + y_zpic30(4)*picnia(-2)\n          + y_zpic30(5)*picnia(-3)\n          + y_zpic30(6)*rff\n          + y_zpic30(7)*rff(-1)\n          + y_zpic30(8)*rff(-2)\n          + y_zpic30(9)*rff(-3)\n          + y_zpic30(10)*rtr\n          + y_zpic30(11)*ptr\n          + y_zpic30(12)*xgap\n          + y_zpic30(13)*xgap(-1)\n          + y_zpic30(14)*xgap(-2)\n          + y_zpic30(15)*xgap(-3)",
          "python_equation": "zpic30  - zpic30_aerr =\n           y_zpic30_1\n          + y_zpic30_2*picnia\n          + y_zpic30_3*picnia(-1)\n          + y_zpic30_4*picnia(-2)\n          + y_zpic30_5*picnia(-3)\n          + y_zpic30_6*rff\n          + y_zpic30_7*rff(-1)\n          + y_zpic30_8*rff(-2)\n          + y_zpic30_9*rff(-3)\n          + y_zpic30_10*rtr\n          + y_zpic30_11*ptr\n          + y_zpic30_12*xgap\n          + y_zpic30_13*xgap(-1)\n          + y_zpic30_14*xgap(-2)\n          + y_zpic30_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zpic30(1)",
              "cf_value": 1.044280285832078e-13,
              "t_stat": 8.828724269558528
            },
            {
              "cf_name": "y_zpic30(2)",
              "cf_value": 0.04015650846972114,
              "t_stat": 30416237654149.4
            },
            {
              "cf_name": "y_zpic30(3)",
              "cf_value": 0.006934744993613762,
              "t_stat": 4776647021764.445
            },
            {
              "cf_name": "y_zpic30(4)",
              "cf_value": 0.008188906123754724,
              "t_stat": 5660807375569.69
            },
            {
              "cf_name": "y_zpic30(5)",
              "cf_value": 0.0007885180169860036,
              "t_stat": 593507324804.0675
            },
            {
              "cf_name": "y_zpic30(6)",
              "cf_value": -0.05503875125078834,
              "t_stat": -24115027675954.86
            },
            {
              "cf_name": "y_zpic30(7)",
              "cf_value": -0.007557417372706724,
              "t_stat": -2412096360020.614
            },
            {
              "cf_name": "y_zpic30(8)",
              "cf_value": -0.015808419274298,
              "t_stat": -5029937955937.705
            },
            {
              "cf_name": "y_zpic30(9)",
              "cf_value": -0.00357920111984304,
              "t_stat": -1556924824600.783
            },
            {
              "cf_name": "y_zpic30(10)",
              "cf_value": 0.08198378901761255,
              "t_stat": 16798496169736.65
            },
            {
              "cf_name": "y_zpic30(11)",
              "cf_value": 0.943931322395943,
              "t_stat": 214636286092698.4
            },
            {
              "cf_name": "y_zpic30(12)",
              "cf_value": 0.03119549195915805,
              "t_stat": 11342786247061.99
            },
            {
              "cf_name": "y_zpic30(13)",
              "cf_value": -0.004756369295027224,
              "t_stat": -988190865805.5089
            },
            {
              "cf_name": "y_zpic30(14)",
              "cf_value": 0.01348922660681493,
              "t_stat": 2824557302251.415
            },
            {
              "cf_name": "y_zpic30(15)",
              "cf_value": 0.01299481953814399,
              "t_stat": 4475369411695.433
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZPIC30 a weighted average of future PCE price inflation.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a thirty-year bond.",
          "eviews_equation": "zpic30 - zpic30_aerr =\n              y_zpic30(1) * picnia\n            + y_zpic30(2) * zpic30(1)",
          "python_equation": "zpic30 - zpic30_aerr =\n              y_zpic30_1 * picnia\n            + y_zpic30_2 * zpic30(1)",
          "coeff": [
            {
              "cf_name": "y_zpic30(1)",
              "cf_value": 0.01410658898201937
            },
            {
              "cf_name": "y_zpic30(2)",
              "cf_value": 0.9858934110179807
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "zpic30"
          ]
        }
      },
      {
        "name": "zpic58",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected 4-qtr consumer price inflation (8 qtrs. in the future) (VAR exp.)",
        "description": "ZPIC58 is the expected four-quarter rate of PCE price inflation\nmeasured eight quarters in the future.  The equation shown below is\nthe reduced-form representation of this expectational computation\nbased on the core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zpic58  - zpic58_aerr =\n           y_zpic58(1)*picnia\n          + y_zpic58(2)*picnia(-1)\n          + y_zpic58(3)*picnia(-2)\n          + y_zpic58(4)*picnia(-3)\n          + y_zpic58(5)*rff\n          + y_zpic58(6)*rff(-1)\n          + y_zpic58(7)*rff(-2)\n          + y_zpic58(8)*rff(-3)\n          + y_zpic58(9)*rtr\n          + y_zpic58(10)*ptr\n          + y_zpic58(11)*xgap\n          + y_zpic58(12)*xgap(-1)\n          + y_zpic58(13)*xgap(-2)\n          + y_zpic58(14)*xgap(-3)",
          "python_equation": "zpic58  - zpic58_aerr =\n           y_zpic58_1*picnia\n          + y_zpic58_2*picnia(-1)\n          + y_zpic58_3*picnia(-2)\n          + y_zpic58_4*picnia(-3)\n          + y_zpic58_5*rff\n          + y_zpic58_6*rff(-1)\n          + y_zpic58_7*rff(-2)\n          + y_zpic58_8*rff(-3)\n          + y_zpic58_9*rtr\n          + y_zpic58_10*ptr\n          + y_zpic58_11*xgap\n          + y_zpic58_12*xgap(-1)\n          + y_zpic58_13*xgap(-2)\n          + y_zpic58_14*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zpic58(1)",
              "cf_value": 0.3593365920920064,
              "t_stat": 314355563406393,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpic58(2)",
              "cf_value": 0.05403868424326922,
              "t_stat": 43024631474895.63,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpic58(3)",
              "cf_value": 0.06039898003529536,
              "t_stat": 48215412127386.94,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpic58(4)",
              "cf_value": -0.01698560834120338,
              "t_stat": -14803313924485.12,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zpic58(5)",
              "cf_value": 0.05517476076748708,
              "t_stat": 28156843778881.76,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpic58(6)",
              "cf_value": -0.1153492438678267,
              "t_stat": -42578442816375.41,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpic58(7)",
              "cf_value": -0.004952391392669846,
              "t_stat": -1820346076968.111,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpic58(8)",
              "cf_value": -0.1104437552716417,
              "t_stat": -55829099087420.48,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zpic58(9)",
              "cf_value": 0.1755706297646033,
              "t_stat": 109427301097439.8
            },
            {
              "cf_name": "y_zpic58(10)",
              "cf_value": 0.5432113519706085,
              "t_stat": 166146844821212.5
            },
            {
              "cf_name": "y_zpic58(11)",
              "cf_value": 0.1617613655842677,
              "t_stat": 67946735569054.18,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpic58(12)",
              "cf_value": -0.1753961497534604,
              "t_stat": -42079000636876.04,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpic58(13)",
              "cf_value": 0.08374788806947354,
              "t_stat": 20266222352301,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zpic58(14)",
              "cf_value": 0.1284899640287538,
              "t_stat": 51128459683956.72,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZPIC58 is the expected four-quarter rate of PCE price inflation\nmeasured eight quarters in the future.",
          "eviews_equation": "zpic58 - zpic58_aerr = pic4(8)",
          "python_equation": "zpic58 - zpic58_aerr = pic4(8)",
          "rhs_eq_var": "pic4"
        }
      },
      {
        "name": "zpicxfe",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected value of picxfe in the next quarter (VAR exp.)",
        "description": "The equation shown below for the expectation of core PCE price\ninflation one quarter in the future is the reduced-form representation\nof this expectation in the small linear model used to jointly\nestimate the PICXFE and PIECI equations.",
        "standard_equation": {
          "eviews_equation": "zpicxfe-zpicxfe_aerr =  ( y_zpicxfe(1) *  picxfe(-1) +  y_zpicxfe(2) *  picxfe(-2) +  y_zpicxfe(3) *  picxfe(-3) +  y_zpicxfe(4) *  picxfe(-4))\n                 +  ( y_zpicxfe(5) *  pieci(-1) +  y_zpicxfe(6) *  pieci(-2) +  y_zpicxfe(7) *  pieci(-3) +  y_zpicxfe(8) *  pieci(-4))\n                 +  ( y_zpicxfe(9) *  rff(-1) +  y_zpicxfe(10) *  rff(-2) +  y_zpicxfe(11) *  rff(-3) +  y_zpicxfe(12) *  rff(-4))\n                 +  ( y_zpicxfe(13) *  xgap2(-1) +  y_zpicxfe(14) *  xgap2(-2) +  y_zpicxfe(15) *  xgap2(-3) +  y_zpicxfe(16) *  xgap2(-4))\n                 + y_zpicxfe(17) * rtr(-1)\n                 + y_zpicxfe(18) * ptr(-1)\n                 + y_zpicxfe(19) * log(qpcnia(-1)/pcnia(-1))\n                 + y_zpicxfe(20) * log(qpl(-1)/pl(-1))\n                 + y_zpicxfe(21) * (hlprdt(-1) - 400*huqpct(-1))\n                 +  ( y_zpicxfe(22) * (lur(-1) - lurnat(-1)) +  y_zpicxfe(23) * (lur(-2) - lurnat(-2)))",
          "python_equation": "zpicxfe-zpicxfe_aerr =  ( y_zpicxfe_1 *  picxfe(-1) +  y_zpicxfe_2 *  picxfe(-2) +  y_zpicxfe_3 *  picxfe(-3) +  y_zpicxfe_4 *  picxfe(-4))\n                 +  ( y_zpicxfe_5 *  pieci(-1) +  y_zpicxfe_6 *  pieci(-2) +  y_zpicxfe_7 *  pieci(-3) +  y_zpicxfe_8 *  pieci(-4))\n                 +  ( y_zpicxfe_9 *  rff(-1) +  y_zpicxfe_10 *  rff(-2) +  y_zpicxfe_11 *  rff(-3) +  y_zpicxfe_12 *  rff(-4))\n                 +  ( y_zpicxfe_13 *  xgap2(-1) +  y_zpicxfe_14 *  xgap2(-2) +  y_zpicxfe_15 *  xgap2(-3) +  y_zpicxfe_16 *  xgap2(-4))\n                 + y_zpicxfe_17 * rtr(-1)\n                 + y_zpicxfe_18 * ptr(-1)\n                 + y_zpicxfe_19 * log(qpcnia(-1)/pcnia(-1))\n                 + y_zpicxfe_20 * log(qpl(-1)/pl(-1))\n                 + y_zpicxfe_21 * (hlprdt(-1) - 400*huqpct(-1))\n                 +  ( y_zpicxfe_22 * (lur(-1) - lurnat(-1)) +  y_zpicxfe_23 * (lur(-2) - lurnat(-2)))",
          "coeff": [
            {
              "cf_name": "y_zpicxfe(1)",
              "cf_value": 0.380818884672
            },
            {
              "cf_name": "y_zpicxfe(2)",
              "cf_value": 0.00113182715476
            },
            {
              "cf_name": "y_zpicxfe(3)",
              "cf_value": 0.00146351917605
            },
            {
              "cf_name": "y_zpicxfe(4)",
              "cf_value": 0.00225729733693
            },
            {
              "cf_name": "y_zpicxfe(5)",
              "cf_value": 0.0460967342223
            },
            {
              "cf_name": "y_zpicxfe(6)",
              "cf_value": 0.0338772671906
            },
            {
              "cf_name": "y_zpicxfe(7)",
              "cf_value": 0.0228924215171
            },
            {
              "cf_name": "y_zpicxfe(8)",
              "cf_value": 0.0112105032823
            },
            {
              "cf_name": "y_zpicxfe(9)",
              "cf_value": -0.0140156100481
            },
            {
              "cf_name": "y_zpicxfe(10)",
              "cf_value": 0.0011222896601
            },
            {
              "cf_name": "y_zpicxfe(11)",
              "cf_value": 0.00760121840982
            },
            {
              "cf_name": "y_zpicxfe(12)",
              "cf_value": -0.00299260406007
            },
            {
              "cf_name": "y_zpicxfe(13)",
              "cf_value": 0.0470383710002
            },
            {
              "cf_name": "y_zpicxfe(14)",
              "cf_value": -0.0278318348119
            },
            {
              "cf_name": "y_zpicxfe(15)",
              "cf_value": -0.00506170904133
            },
            {
              "cf_name": "y_zpicxfe(16)",
              "cf_value": -0.00225028901719
            },
            {
              "cf_name": "y_zpicxfe(17)",
              "cf_value": 0.00828470603822
            },
            {
              "cf_name": "y_zpicxfe(18)",
              "cf_value": 0.500251545448
            },
            {
              "cf_name": "y_zpicxfe(19)",
              "cf_value": 11.937795061
            },
            {
              "cf_name": "y_zpicxfe(20)",
              "cf_value": 0.0000684395376806
            },
            {
              "cf_name": "y_zpicxfe(21)",
              "cf_value": -0.114076926212
            },
            {
              "cf_name": "y_zpicxfe(22)",
              "cf_value": -0.00383816812034
            },
            {
              "cf_name": "y_zpicxfe(23)",
              "cf_value": -0.000695300677346
            }
          ],
          "rhs_eq_var": [
            "hlprdt",
            "huqpct",
            "lur",
            "lurnat",
            "pcnia",
            "picxfe",
            "pieci",
            "pl",
            "ptr",
            "qpcnia",
            "qpl",
            "rff",
            "rtr",
            "xgap2"
          ]
        },
        "mce_equation": {
          "mce_group": "mcwp",
          "mce_description": "",
          "eviews_equation": "zpicxfe - zpicxfe_aerr = picxfe(1)",
          "python_equation": "zpicxfe - zpicxfe_aerr = picxfe(1)",
          "rhs_eq_var": "picxfe"
        }
      },
      {
        "name": "zpieci",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected value of pieci in the next quarter (VAR exp.)",
        "description": "The equation shown below for the expectation of the rate of growth\nof ECI hourly compensation one quarter in the future is the\nreduced-form representation of this expectation in the small linear\nmodel used to jointly estimate the PICXFE and PIECI equations.",
        "standard_equation": {
          "eviews_equation": "zpieci-zpieci_aerr =  ( y_zpieci(1) *  picxfe(-1) +  y_zpieci(2) *  picxfe(-2) +  y_zpieci(3) *  picxfe(-3) +  y_zpieci(4) *  picxfe(-4))\n                 +  ( y_zpieci(5) *  pieci(-1) +  y_zpieci(6) *  pieci(-2) +  y_zpieci(7) *  pieci(-3) +  y_zpieci(8) *  pieci(-4))\n                 +  ( y_zpieci(9) *  rff(-1) +  y_zpieci(10) *  rff(-2) +  y_zpieci(11) *  rff(-3) +  y_zpieci(12) *  rff(-4))\n                 +  ( y_zpieci(13) *  xgap2(-1) +  y_zpieci(14) *  xgap2(-2) +  y_zpieci(15) *  xgap2(-3) +  y_zpieci(16) *  xgap2(-4))\n                 + y_zpieci(17) * rtr(-1)\n                 + y_zpieci(18) * ptr(-1)\n                 + y_zpieci(19) * log(qpcnia(-1)/pcnia(-1))\n                 + y_zpieci(20) * log(qpl(-1)/pl(-1))\n                 + y_zpieci(21) * (hlprdt(-1) - 400*huqpct(-1))\n                 +  ( y_zpieci(22) * (lur(-1) - lurnat(-1)) +  y_zpieci(23) * (lur(-2) - lurnat(-2)))",
          "python_equation": "zpieci-zpieci_aerr =  ( y_zpieci_1 *  picxfe(-1) +  y_zpieci_2 *  picxfe(-2) +  y_zpieci_3 *  picxfe(-3) +  y_zpieci_4 *  picxfe(-4))\n                 +  ( y_zpieci_5 *  pieci(-1) +  y_zpieci_6 *  pieci(-2) +  y_zpieci_7 *  pieci(-3) +  y_zpieci_8 *  pieci(-4))\n                 +  ( y_zpieci_9 *  rff(-1) +  y_zpieci_10 *  rff(-2) +  y_zpieci_11 *  rff(-3) +  y_zpieci_12 *  rff(-4))\n                 +  ( y_zpieci_13 *  xgap2(-1) +  y_zpieci_14 *  xgap2(-2) +  y_zpieci_15 *  xgap2(-3) +  y_zpieci_16 *  xgap2(-4))\n                 + y_zpieci_17 * rtr(-1)\n                 + y_zpieci_18 * ptr(-1)\n                 + y_zpieci_19 * log(qpcnia(-1)/pcnia(-1))\n                 + y_zpieci_20 * log(qpl(-1)/pl(-1))\n                 + y_zpieci_21 * (hlprdt(-1) - 400*huqpct(-1))\n                 +  ( y_zpieci_22 * (lur(-1) - lurnat(-1)) +  y_zpieci_23 * (lur(-2) - lurnat(-2)))",
          "coeff": [
            {
              "cf_name": "y_zpieci(1)",
              "cf_value": -0.026022539351
            },
            {
              "cf_name": "y_zpieci(2)",
              "cf_value": 0.00320414216918
            },
            {
              "cf_name": "y_zpieci(3)",
              "cf_value": 0.00402676215955
            },
            {
              "cf_name": "y_zpieci(4)",
              "cf_value": 0.00650489050087
            },
            {
              "cf_name": "y_zpieci(5)",
              "cf_value": 0.202430424141
            },
            {
              "cf_name": "y_zpieci(6)",
              "cf_value": 0.196252633802
            },
            {
              "cf_name": "y_zpieci(7)",
              "cf_value": 0.195837958296
            },
            {
              "cf_name": "y_zpieci(8)",
              "cf_value": 0.0246831983934
            },
            {
              "cf_name": "y_zpieci(9)",
              "cf_value": -0.0328787076454
            },
            {
              "cf_name": "y_zpieci(10)",
              "cf_value": 0.00135903909754
            },
            {
              "cf_name": "y_zpieci(11)",
              "cf_value": 0.0229838005541
            },
            {
              "cf_name": "y_zpieci(12)",
              "cf_value": -0.00862383586105
            },
            {
              "cf_name": "y_zpieci(13)",
              "cf_value": 0.148708914616
            },
            {
              "cf_name": "y_zpieci(14)",
              "cf_value": -0.0777266665551
            },
            {
              "cf_name": "y_zpieci(15)",
              "cf_value": -0.0137748704693
            },
            {
              "cf_name": "y_zpieci(16)",
              "cf_value": -0.00648469451174
            },
            {
              "cf_name": "y_zpieci(17)",
              "cf_value": 0.0171597038548
            },
            {
              "cf_name": "y_zpieci(18)",
              "cf_value": 0.393082529889
            },
            {
              "cf_name": "y_zpieci(19)",
              "cf_value": -4.49541220961
            },
            {
              "cf_name": "y_zpieci(20)",
              "cf_value": 0.000154587412169
            },
            {
              "cf_name": "y_zpieci(21)",
              "cf_value": 0.380795785368
            },
            {
              "cf_name": "y_zpieci(22)",
              "cf_value": -0.0172443115476
            },
            {
              "cf_name": "y_zpieci(23)",
              "cf_value": -0.00416159167724
            }
          ],
          "rhs_eq_var": [
            "hlprdt",
            "huqpct",
            "lur",
            "lurnat",
            "pcnia",
            "picxfe",
            "pieci",
            "pl",
            "ptr",
            "qpcnia",
            "qpl",
            "rff",
            "rtr",
            "xgap2"
          ]
        },
        "mce_equation": {
          "mce_group": "mcwp",
          "mce_description": "",
          "eviews_equation": "zpieci - zpieci_aerr = pieci(1)",
          "python_equation": "zpieci - zpieci_aerr = pieci(1)",
          "rhs_eq_var": "pieci"
        }
      },
      {
        "name": "zrff10",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected federal funds rate, for RG10 eq. (10-yr mat.) (VAR exp.)",
        "description": "ZRFF10 is a weighted average of future federal funds rates.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a ten-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zrff10  - zrff10_aerr =\n           y_zrff10(1)\n          + y_zrff10(2)*picnia\n          + y_zrff10(3)*picnia(-1)\n          + y_zrff10(4)*picnia(-2)\n          + y_zrff10(5)*picnia(-3)\n          + y_zrff10(6)*rff\n          + y_zrff10(7)*rff(-1)\n          + y_zrff10(8)*rff(-2)\n          + y_zrff10(9)*rff(-3)\n          + y_zrff10(10)*rtr\n          + y_zrff10(11)*ptr\n          + y_zrff10(12)*xgap\n          + y_zrff10(13)*xgap(-1)\n          + y_zrff10(14)*xgap(-2)\n          + y_zrff10(15)*xgap(-3)",
          "python_equation": "zrff10  - zrff10_aerr =\n           y_zrff10_1\n          + y_zrff10_2*picnia\n          + y_zrff10_3*picnia(-1)\n          + y_zrff10_4*picnia(-2)\n          + y_zrff10_5*picnia(-3)\n          + y_zrff10_6*rff\n          + y_zrff10_7*rff(-1)\n          + y_zrff10_8*rff(-2)\n          + y_zrff10_9*rff(-3)\n          + y_zrff10_10*rtr\n          + y_zrff10_11*ptr\n          + y_zrff10_12*xgap\n          + y_zrff10_13*xgap(-1)\n          + y_zrff10_14*xgap(-2)\n          + y_zrff10_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zrff10(1)",
              "cf_value": 2.378638428839734e-13,
              "t_stat": 10.0046048739543
            },
            {
              "cf_name": "y_zrff10(2)",
              "cf_value": 0.0001217535546263044,
              "t_stat": 45879833533.6565,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff10(3)",
              "cf_value": -0.00917622608986857,
              "t_stat": -3144469562487.966,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff10(4)",
              "cf_value": -0.01586120496103595,
              "t_stat": -5454805851857.53,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff10(5)",
              "cf_value": -0.01154696442869298,
              "t_stat": -4323872965813.665,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff10(6)",
              "cf_value": 0.2209177910482749,
              "t_stat": 48154903939923.56,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff10(7)",
              "cf_value": -0.01580133905291904,
              "t_stat": -2509029534494.984,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff10(8)",
              "cf_value": 0.1303085244646027,
              "t_stat": 20627074886671.23,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff10(9)",
              "cf_value": -0.06613814788532775,
              "t_stat": -14312786911213.06,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff10(10)",
              "cf_value": 0.7307131714250785,
              "t_stat": 74486915458169.02
            },
            {
              "cf_name": "y_zrff10(11)",
              "cf_value": 0.0364626419250845,
              "t_stat": 4124786896497.413
            },
            {
              "cf_name": "y_zrff10(12)",
              "cf_value": 0.3614091512807817,
              "t_stat": 65375901428112.96,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff10(13)",
              "cf_value": -0.273261010083981,
              "t_stat": -28244479360773.31,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff10(14)",
              "cf_value": -0.03776285146860941,
              "t_stat": -3933858692151.283,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff10(15)",
              "cf_value": -0.007077405433229054,
              "t_stat": -1212616148716.853,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZRFF10 is a weighted average of future federal funds rates.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a ten-year bond.",
          "eviews_equation": "zrff10 - zrff10_aerr =\n              y_zrff10(1) * rff\n            + y_zrff10(2) * zrff10(1)",
          "python_equation": "zrff10 - zrff10_aerr =\n              y_zrff10_1 * rff\n            + y_zrff10_2 * zrff10(1)",
          "coeff": [
            {
              "cf_name": "y_zrff10(1)",
              "cf_value": 0.03007455810944507
            },
            {
              "cf_name": "y_zrff10(2)",
              "cf_value": 0.969925441890555
            }
          ],
          "rhs_eq_var": [
            "rff",
            "zrff10"
          ]
        }
      },
      {
        "name": "zrff30",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected federal funds rate, for RG30 eq. (30-yr mat.) (VAR exp.)",
        "description": "ZRFF30 is a weighted average of future federal funds rates.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a thirty-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zrff30  - zrff30_aerr =\n           y_zrff30(1)\n          + y_zrff30(2)*picnia\n          + y_zrff30(3)*picnia(-1)\n          + y_zrff30(4)*picnia(-2)\n          + y_zrff30(5)*picnia(-3)\n          + y_zrff30(6)*rff\n          + y_zrff30(7)*rff(-1)\n          + y_zrff30(8)*rff(-2)\n          + y_zrff30(9)*rff(-3)\n          + y_zrff30(10)*rtr\n          + y_zrff30(11)*ptr\n          + y_zrff30(12)*xgap\n          + y_zrff30(13)*xgap(-1)\n          + y_zrff30(14)*xgap(-2)\n          + y_zrff30(15)*xgap(-3)",
          "python_equation": "zrff30  - zrff30_aerr =\n           y_zrff30_1\n          + y_zrff30_2*picnia\n          + y_zrff30_3*picnia(-1)\n          + y_zrff30_4*picnia(-2)\n          + y_zrff30_5*picnia(-3)\n          + y_zrff30_6*rff\n          + y_zrff30_7*rff(-1)\n          + y_zrff30_8*rff(-2)\n          + y_zrff30_9*rff(-3)\n          + y_zrff30_10*rtr\n          + y_zrff30_11*ptr\n          + y_zrff30_12*xgap\n          + y_zrff30_13*xgap(-1)\n          + y_zrff30_14*xgap(-2)\n          + y_zrff30_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zrff30(1)",
              "cf_value": 1.711459357335906e-13,
              "t_stat": 12.13061728310166
            },
            {
              "cf_name": "y_zrff30(2)",
              "cf_value": 0.0001806188860987932,
              "t_stat": 114695966239.8541,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff30(3)",
              "cf_value": -0.004921864186060088,
              "t_stat": -2842220163545.645,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff30(4)",
              "cf_value": -0.0085101379490877,
              "t_stat": -4932016505433.256,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff30(5)",
              "cf_value": -0.006220981183951381,
              "t_stat": -3925624781624.022,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff30(6)",
              "cf_value": 0.11864291327276,
              "t_stat": 43580923786319.01,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff30(7)",
              "cf_value": -0.008553403609128176,
              "t_stat": -2288735721356.686,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff30(8)",
              "cf_value": 0.06994575055112089,
              "t_stat": 18658251966985.94,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff30(9)",
              "cf_value": -0.03560722072285206,
              "t_stat": -12985391687353.47,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff30(10)",
              "cf_value": 0.8555719605078006,
              "t_stat": 146971930365859.7
            },
            {
              "cf_name": "y_zrff30(11)",
              "cf_value": 0.01947236443310801,
              "t_stat": 3712076118807.208
            },
            {
              "cf_name": "y_zrff30(12)",
              "cf_value": 0.1938808633160732,
              "t_stat": 59101471032241.39,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff30(13)",
              "cf_value": -0.146844106705379,
              "t_stat": -25577448962069.83,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff30(14)",
              "cf_value": -0.02021989944869175,
              "t_stat": -3549586528896.472,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff30(15)",
              "cf_value": -0.003727736282464759,
              "t_stat": -1076314655672.266,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZRFF30 is a weighted average of future federal funds rates.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a thirty-year bond.",
          "eviews_equation": "zrff30 - zrff30_aerr =\n              y_zrff30(1) * rff\n            + y_zrff30(2) * zrff30(1)",
          "python_equation": "zrff30 - zrff30_aerr =\n              y_zrff30_1 * rff\n            + y_zrff30_2 * zrff30(1)",
          "coeff": [
            {
              "cf_name": "y_zrff30(1)",
              "cf_value": 0.01410658898201937
            },
            {
              "cf_name": "y_zrff30(2)",
              "cf_value": 0.9858934110179807
            }
          ],
          "rhs_eq_var": [
            "rff",
            "zrff30"
          ]
        }
      },
      {
        "name": "zrff5",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected federal funds rate, for RG5 eq. (5-yr mat.) (VAR exp.)",
        "description": "ZRFF5 is a weighted average of future federal funds rates.  The\nweights sum to one and decline geometrically at a rate based on the\naverage duration of a five-year bond.  The equation shown below is the\nreduced-form representation of this expectational computation based on\nthe core part of the expectations VAR.",
        "standard_equation": {
          "eviews_equation": "zrff5  - zrff5_aerr =\n           y_zrff5(1)\n          + y_zrff5(2)*picnia\n          + y_zrff5(3)*picnia(-1)\n          + y_zrff5(4)*picnia(-2)\n          + y_zrff5(5)*picnia(-3)\n          + y_zrff5(6)*rff\n          + y_zrff5(7)*rff(-1)\n          + y_zrff5(8)*rff(-2)\n          + y_zrff5(9)*rff(-3)\n          + y_zrff5(10)*rtr\n          + y_zrff5(11)*ptr\n          + y_zrff5(12)*xgap\n          + y_zrff5(13)*xgap(-1)\n          + y_zrff5(14)*xgap(-2)\n          + y_zrff5(15)*xgap(-3)",
          "python_equation": "zrff5  - zrff5_aerr =\n           y_zrff5_1\n          + y_zrff5_2*picnia\n          + y_zrff5_3*picnia(-1)\n          + y_zrff5_4*picnia(-2)\n          + y_zrff5_5*picnia(-3)\n          + y_zrff5_6*rff\n          + y_zrff5_7*rff(-1)\n          + y_zrff5_8*rff(-2)\n          + y_zrff5_9*rff(-3)\n          + y_zrff5_10*rtr\n          + y_zrff5_11*ptr\n          + y_zrff5_12*xgap\n          + y_zrff5_13*xgap(-1)\n          + y_zrff5_14*xgap(-2)\n          + y_zrff5_15*xgap(-3)",
          "coeff": [
            {
              "cf_name": "y_zrff5(1)",
              "cf_value": 2.601031452674343e-13,
              "t_stat": 12.01114484734328
            },
            {
              "cf_name": "y_zrff5(2)",
              "cf_value": 0.006240324440737379,
              "t_stat": 2581752724956.416,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff5(3)",
              "cf_value": -0.0131975418361076,
              "t_stat": -4965278667311.086,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff5(4)",
              "cf_value": -0.02478131515494538,
              "t_stat": -9356959758970.871,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff5(5)",
              "cf_value": -0.01906124455815977,
              "t_stat": -7836527137227.13,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zrff5(6)",
              "cf_value": 0.356356038809717,
              "t_stat": 85282759002598.02,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff5(7)",
              "cf_value": -0.02968927450559823,
              "t_stat": -5175815146235.343,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff5(8)",
              "cf_value": 0.2137924427116254,
              "t_stat": 37155615321045.85,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff5(9)",
              "cf_value": -0.1108065994879449,
              "t_stat": -26327225550822.67,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zrff5(10)",
              "cf_value": 0.57034739247192,
              "t_stat": 63832198886307.72
            },
            {
              "cf_name": "y_zrff5(11)",
              "cf_value": 0.05079977710860725,
              "t_stat": 6309318921722.545
            },
            {
              "cf_name": "y_zrff5(12)",
              "cf_value": 0.6152802763768458,
              "t_stat": 122196517406655.4,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff5(13)",
              "cf_value": -0.4530320275590888,
              "t_stat": -51410532313874.57,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff5(14)",
              "cf_value": -0.05887447593039786,
              "t_stat": -6733615592667.352,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zrff5(15)",
              "cf_value": -0.00911820553312758,
              "t_stat": -1715244123732.347,
              "distributed_lag_group": 3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcap",
          "mce_description": "ZRFF5 is a weighted average of future federal funds rates.  The weights\nsum to one and decline geometrically at a rate based on the average\nduration of a five-year bond.",
          "eviews_equation": "zrff5 - zrff5_aerr =\n             y_zrff5(1) * rff\n           + y_zrff5(2) * zrff5(1)",
          "python_equation": "zrff5 - zrff5_aerr =\n             y_zrff5_1 * rff\n           + y_zrff5_2 * zrff5(1)",
          "coeff": [
            {
              "cf_name": "y_zrff5(1)",
              "cf_value": 0.05479365264340726
            },
            {
              "cf_name": "y_zrff5(2)",
              "cf_value": 0.9452063473565927
            }
          ],
          "rhs_eq_var": [
            "rff",
            "zrff5"
          ]
        }
      },
      {
        "name": "zyh",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected level of real after-tax household income, for QEC eq. (VAR exp.)",
        "description": "Permanent household income (ZYH) is the scaled discounted stream of\nfuture household income (YH).  The discount factor is 25 percent per\nyear.  The scaling factor is chosen so that ZYH and YH have the same\nvalue when YH is expected to grow steadily at 3 percent per year.  The\nequation shown below is the reduced-form representation of this\nexpectational computation based on a small-scale VAR used in the\nestimation of the main consumption (ECO) equation.",
        "standard_equation": {
          "eviews_equation": "log(zyh)  - zyh_aerr =\n           y_zyh(1)*picnia\n          + y_zyh(2)*picnia(-1)\n          + y_zyh(3)*picnia(-2)\n          + y_zyh(4)*picnia(-3)\n          + y_zyh(5)*rff\n          + y_zyh(6)*rff(-1)\n          + y_zyh(7)*rff(-2)\n          + y_zyh(8)*rff(-3)\n          + y_zyh(9)*xgap2\n          + y_zyh(10)*xgap2(-1)\n          + y_zyh(11)*xgap2(-2)\n          + y_zyh(12)*xgap2(-3)\n          + y_zyh(13)*ptr\n          + y_zyh(14)*rtr\n          + y_zyh(15)*yhgap\n          + y_zyh(16)*yhgap(-1)\n          + y_zyh(17)*yhgap(-2)\n          + y_zyh(18)*yhgap(-3)\n          + y_zyh(19)*log(zyhst*xgdpt)",
          "python_equation": "log(zyh)  - zyh_aerr =\n           y_zyh_1*picnia\n          + y_zyh_2*picnia(-1)\n          + y_zyh_3*picnia(-2)\n          + y_zyh_4*picnia(-3)\n          + y_zyh_5*rff\n          + y_zyh_6*rff(-1)\n          + y_zyh_7*rff(-2)\n          + y_zyh_8*rff(-3)\n          + y_zyh_9*xgap2\n          + y_zyh_10*xgap2(-1)\n          + y_zyh_11*xgap2(-2)\n          + y_zyh_12*xgap2(-3)\n          + y_zyh_13*ptr\n          + y_zyh_14*rtr\n          + y_zyh_15*yhgap\n          + y_zyh_16*yhgap(-1)\n          + y_zyh_17*yhgap(-2)\n          + y_zyh_18*yhgap(-3)\n          + y_zyh_19*log(zyhst*xgdpt)",
          "coeff": [
            {
              "cf_name": "y_zyh(1)",
              "cf_value": 0.00008403034216398837,
              "t_stat": 22228592995.87179,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyh(2)",
              "cf_value": 0.0007023129900742578,
              "t_stat": 171749146427.1288,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyh(3)",
              "cf_value": 0.0005988312485600414,
              "t_stat": 147650023247.4493,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyh(4)",
              "cf_value": 0.00046906873529373,
              "t_stat": 128696297011.0143,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyh(5)",
              "cf_value": -0.002112400975583133,
              "t_stat": -338096800649.436,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyh(6)",
              "cf_value": 0.0001656602252725924,
              "t_stat": 19689351286.89098,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyh(7)",
              "cf_value": -0.0007780393043584456,
              "t_stat": -92192707618.087,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyh(8)",
              "cf_value": 0.0002906813774138189,
              "t_stat": 46524377073.11857,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyh(9)",
              "cf_value": 0.0009057626374626405,
              "t_stat": 87516652223.01416,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyh(10)",
              "cf_value": 0.002687425542518095,
              "t_stat": 145806158800.7431,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyh(11)",
              "cf_value": 0.0006823597205465298,
              "t_stat": 36890460397.93328,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyh(12)",
              "cf_value": -0.001256388702977828,
              "t_stat": -108457723401.9895,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyh(13)",
              "cf_value": -0.001854243316194259,
              "t_stat": -150057050145.0096
            },
            {
              "cf_name": "y_zyh(14)",
              "cf_value": 0.002434098677388386,
              "t_stat": 176351782948.9832
            },
            {
              "cf_name": "y_zyh(15)",
              "cf_value": 0.004161665385029935,
              "t_stat": 741576935763.8336,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyh(16)",
              "cf_value": 0.0007501557850814375,
              "t_stat": 103332138761.8787,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyh(17)",
              "cf_value": -0.0001921235465779609,
              "t_stat": -26129922025.6898,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyh(18)",
              "cf_value": -0.0003602829076187046,
              "t_stat": -62678401277.76989,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyh(19)",
              "cf_value": 0.9999999999999565,
              "t_stat": 280285385735409.3
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap2",
            "xgdpt",
            "yhgap",
            "zyhst"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "Permanent household income (ZYH) is the scaled discounted stream of\nfuture household income (YH).  The discount factor is 25 percent per\nyear.  The scaling factor is chosen so that ZYH and YH have the same\nvalue when YH is expected to grow steadily at 3 percent per year.",
          "eviews_equation": "zyh - zyh_aerr = (1 - (y_zyh(1)^.25)*exp(y_zyh(2))) * yh\n               + (y_zyh(1)^.25) * zyh(1)",
          "python_equation": "zyh - zyh_aerr = (1 - (y_zyh_1**.25)*exp(y_zyh_2)) * yh\n               + (y_zyh_1**.25) * zyh(1)",
          "coeff": [
            {
              "cf_name": "y_zyh(1)",
              "cf_value": 0.75
            },
            {
              "cf_name": "y_zyh(2)",
              "cf_value": 0.0075
            }
          ],
          "rhs_eq_var": [
            "yh",
            "zyh"
          ]
        }
      },
      {
        "name": "zyhp",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected level of real after-tax property income, for QEC eq. (VAR exp.)",
        "description": "Permanent household property income (ZYHP) is the scaled discounted\nstream of future household property income (YHP).  The discount factor\nis 25 percent per year.  The scaling factor is chosen so that ZYHP and\nYHP have the same value when YHP is expected to grow steadily at 3\npercent per year.  The equation shown below is the reduced-form\nrepresentation of this expectational computation based on a\nsmall-scale VAR used in the estimation of the main consumption (ECO)\nequation.",
        "standard_equation": {
          "eviews_equation": "log(zyhp)  - zyhp_aerr =\n           y_zyhp(1)*picnia\n          + y_zyhp(2)*picnia(-1)\n          + y_zyhp(3)*picnia(-2)\n          + y_zyhp(4)*picnia(-3)\n          + y_zyhp(5)*rff\n          + y_zyhp(6)*rff(-1)\n          + y_zyhp(7)*rff(-2)\n          + y_zyhp(8)*rff(-3)\n          + y_zyhp(9)*xgap2\n          + y_zyhp(10)*xgap2(-1)\n          + y_zyhp(11)*xgap2(-2)\n          + y_zyhp(12)*xgap2(-3)\n          + y_zyhp(13)*ptr\n          + y_zyhp(14)*rtr\n          + y_zyhp(15)*yhgap\n          + y_zyhp(16)*yhgap(-1)\n          + y_zyhp(17)*yhgap(-2)\n          + y_zyhp(18)*yhgap(-3)\n          + y_zyhp(19)*yhpgap\n          + y_zyhp(20)*yhpgap(-1)\n          + y_zyhp(21)*yhpgap(-2)\n          + y_zyhp(22)*yhpgap(-3)\n          + y_zyhp(23)*log(zyhpst*zyhst*xgdpt)",
          "python_equation": "log(zyhp)  - zyhp_aerr =\n           y_zyhp_1*picnia\n          + y_zyhp_2*picnia(-1)\n          + y_zyhp_3*picnia(-2)\n          + y_zyhp_4*picnia(-3)\n          + y_zyhp_5*rff\n          + y_zyhp_6*rff(-1)\n          + y_zyhp_7*rff(-2)\n          + y_zyhp_8*rff(-3)\n          + y_zyhp_9*xgap2\n          + y_zyhp_10*xgap2(-1)\n          + y_zyhp_11*xgap2(-2)\n          + y_zyhp_12*xgap2(-3)\n          + y_zyhp_13*ptr\n          + y_zyhp_14*rtr\n          + y_zyhp_15*yhgap\n          + y_zyhp_16*yhgap(-1)\n          + y_zyhp_17*yhgap(-2)\n          + y_zyhp_18*yhgap(-3)\n          + y_zyhp_19*yhpgap\n          + y_zyhp_20*yhpgap(-1)\n          + y_zyhp_21*yhpgap(-2)\n          + y_zyhp_22*yhpgap(-3)\n          + y_zyhp_23*log(zyhpst*zyhst*xgdpt)",
          "coeff": [
            {
              "cf_name": "y_zyhp(1)",
              "cf_value": 0.0008637359958914742,
              "t_stat": 176759242667.1153,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyhp(2)",
              "cf_value": 0.001043993924986531,
              "t_stat": 194221002560.117,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyhp(3)",
              "cf_value": 0.0009412688975392932,
              "t_stat": 176315993412.9136,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyhp(4)",
              "cf_value": 0.000458916642717137,
              "t_stat": 98672686399.5925,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyhp(5)",
              "cf_value": -0.001544432205587824,
              "t_stat": -190609060543.2005,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyhp(6)",
              "cf_value": -0.0006407725735247019,
              "t_stat": -58198540998.1202,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyhp(7)",
              "cf_value": -0.000877216982815245,
              "t_stat": -79961151544.35294,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyhp(8)",
              "cf_value": -0.00004075028532698682,
              "t_stat": -5092370987.662168,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyhp(9)",
              "cf_value": -0.002036934910319444,
              "t_stat": -146846274003.2379,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyhp(10)",
              "cf_value": 0.003079022876028106,
              "t_stat": 126243468762.4614,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyhp(11)",
              "cf_value": 0.001533670579319286,
              "t_stat": 61395970703.02214,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyhp(12)",
              "cf_value": -0.0009794433698078087,
              "t_stat": -60186410380.56396,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyhp(13)",
              "cf_value": -0.003307915461364551,
              "t_stat": -183774665668.8534
            },
            {
              "cf_name": "y_zyhp(14)",
              "cf_value": 0.003103172047474443,
              "t_stat": 166602195390.427
            },
            {
              "cf_name": "y_zyhp(15)",
              "cf_value": 0.004220697583687526,
              "t_stat": 512590658042.1738,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyhp(16)",
              "cf_value": 0.0001307621492671122,
              "t_stat": 13488794342.88011,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyhp(17)",
              "cf_value": 0.00005342070875074808,
              "t_stat": 5347720784.801171,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyhp(18)",
              "cf_value": -0.0008349442433696925,
              "t_stat": -96475698819.03139,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyhp(19)",
              "cf_value": 0.002251478648554251,
              "t_stat": 418035984786.2835,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyhp(20)",
              "cf_value": 0.0002014050026037725,
              "t_stat": 30752461214.03916,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyhp(21)",
              "cf_value": -0.0004274985452560566,
              "t_stat": -64389054561.96906,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyhp(22)",
              "cf_value": -0.0002520786346265581,
              "t_stat": -47895252852.33196,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyhp(23)",
              "cf_value": 0.9999999999999468,
              "t_stat": 186145509558884.1
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap2",
            "xgdpt",
            "yhgap",
            "yhpgap",
            "zyhpst",
            "zyhst"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "Permanent household property income (ZYHP) is the scaled discounted\nstream of future household property income (YHP).  The discount factor\nis 25 percent per year.  The scaling factor is chosen so that ZYHP and\nYHP have the same value when YHP is expected to grow steadily at 3\npercent per year.",
          "eviews_equation": "zyhp - zyhp_aerr = (1 - (y_zyhp(1)^.25)*exp(y_zyhp(2))) * yhp\n                 + (y_zyhp(1)^.25) * zyhp(1)",
          "python_equation": "zyhp - zyhp_aerr = (1 - (y_zyhp_1**.25)*exp(y_zyhp_2)) * yhp\n                 + (y_zyhp_1**.25) * zyhp(1)",
          "coeff": [
            {
              "cf_name": "y_zyhp(1)",
              "cf_value": 0.75
            },
            {
              "cf_name": "y_zyhp(2)",
              "cf_value": 0.0075
            }
          ],
          "rhs_eq_var": [
            "yhp",
            "zyhp"
          ]
        }
      },
      {
        "name": "zyhpst",
        "equation_type": "Behavioral",
        "sector": "Expectations",
        "definition": "Expected trend share of property income in household income",
        "standard_equation": {
          "eviews_equation": "log(zyhpst)-zyhpst_aerr = log(zyhpst(-1)) + y_zyhpst(1)*yhpgap(-1)/100",
          "python_equation": "log(zyhpst)-zyhpst_aerr = log(zyhpst(-1)) + y_zyhpst_1*yhpgap(-1)/100",
          "coeff": {
            "cf_name": "y_zyhpst(1)",
            "cf_value": 0.05
          },
          "rhs_eq_var": [
            "yhpgap",
            "zyhpst"
          ]
        }
      },
      {
        "name": "zyhst",
        "equation_type": "Behavioral",
        "sector": "Expectations",
        "definition": "Expected trend ratio of household income to GDP",
        "standard_equation": {
          "eviews_equation": "log(zyhst) - zyhst_aerr = log(zyhst(-1)) + y_zyhst(1)*yhgap(-1)/100",
          "python_equation": "log(zyhst) - zyhst_aerr = log(zyhst(-1)) + y_zyhst_1*yhgap(-1)/100",
          "coeff": {
            "cf_name": "y_zyhst(1)",
            "cf_value": 0.05
          },
          "rhs_eq_var": [
            "yhgap",
            "zyhst"
          ]
        }
      },
      {
        "name": "zyht",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected level of real transfer income, for QEC eq. (VAR exp.)",
        "description": "Permanent household transfer income (ZYHT) is the scaled discounted\nstream of future household transfer income (YHT).  The discount factor\nis 25 percent per year.  The scaling factor is chosen so that ZYHT and\nYHT have the same value when YHT is expected to grow steadily at 3\npercent per year.  The equation shown below is the reduced-form\nrepresentation of this expectational computation based on a\nsmall-scale VAR used in the estimation of the main consumption (ECO)\nequation.",
        "standard_equation": {
          "eviews_equation": "log(zyht)  - zyht_aerr =\n           y_zyht(1)*picnia\n          + y_zyht(2)*picnia(-1)\n          + y_zyht(3)*picnia(-2)\n          + y_zyht(4)*picnia(-3)\n          + y_zyht(5)*rff\n          + y_zyht(6)*rff(-1)\n          + y_zyht(7)*rff(-2)\n          + y_zyht(8)*rff(-3)\n          + y_zyht(9)*xgap2\n          + y_zyht(10)*xgap2(-1)\n          + y_zyht(11)*xgap2(-2)\n          + y_zyht(12)*xgap2(-3)\n          + y_zyht(13)*ptr\n          + y_zyht(14)*rtr\n          + y_zyht(15)*yhgap\n          + y_zyht(16)*yhgap(-1)\n          + y_zyht(17)*yhgap(-2)\n          + y_zyht(18)*yhgap(-3)\n          + y_zyht(19)*yhtgap\n          + y_zyht(20)*yhtgap(-1)\n          + y_zyht(21)*yhtgap(-2)\n          + y_zyht(22)*yhtgap(-3)\n          + y_zyht(23)*log(zyhtst*zyhst*xgdpt)",
          "python_equation": "log(zyht)  - zyht_aerr =\n           y_zyht_1*picnia\n          + y_zyht_2*picnia(-1)\n          + y_zyht_3*picnia(-2)\n          + y_zyht_4*picnia(-3)\n          + y_zyht_5*rff\n          + y_zyht_6*rff(-1)\n          + y_zyht_7*rff(-2)\n          + y_zyht_8*rff(-3)\n          + y_zyht_9*xgap2\n          + y_zyht_10*xgap2(-1)\n          + y_zyht_11*xgap2(-2)\n          + y_zyht_12*xgap2(-3)\n          + y_zyht_13*ptr\n          + y_zyht_14*rtr\n          + y_zyht_15*yhgap\n          + y_zyht_16*yhgap(-1)\n          + y_zyht_17*yhgap(-2)\n          + y_zyht_18*yhgap(-3)\n          + y_zyht_19*yhtgap\n          + y_zyht_20*yhtgap(-1)\n          + y_zyht_21*yhtgap(-2)\n          + y_zyht_22*yhtgap(-3)\n          + y_zyht_23*log(zyhtst*zyhst*xgdpt)",
          "coeff": [
            {
              "cf_name": "y_zyht(1)",
              "cf_value": -0.000334830912493238,
              "t_stat": -186889252825.3672,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyht(2)",
              "cf_value": 0.0004734682680155963,
              "t_stat": 244116308495.7178,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyht(3)",
              "cf_value": 0.0002798072585528634,
              "t_stat": 148379043550.5535,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyht(4)",
              "cf_value": 0.000327960879431146,
              "t_stat": 194885547468.8871,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zyht(5)",
              "cf_value": -0.002500279763979537,
              "t_stat": -856253769611.016,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyht(6)",
              "cf_value": 0.0008855681526303969,
              "t_stat": 221499844558.7588,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyht(7)",
              "cf_value": -0.001214881268111102,
              "t_stat": -296649826744.1209,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyht(8)",
              "cf_value": 0.00008524329709881323,
              "t_stat": 28265727840.07639,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zyht(9)",
              "cf_value": 0.002172842548066125,
              "t_stat": 446547213365.2201,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyht(10)",
              "cf_value": 0.00313028920932204,
              "t_stat": 361768248130.0486,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyht(11)",
              "cf_value": 0.002114206871939033,
              "t_stat": 241275737287.2875,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyht(12)",
              "cf_value": 0.0002481445696860439,
              "t_stat": 43351019576.51565,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zyht(13)",
              "cf_value": -0.0007464054935481565,
              "t_stat": -129368288338.9941
            },
            {
              "cf_name": "y_zyht(14)",
              "cf_value": 0.002744349582394016,
              "t_stat": 437547186771.2955
            },
            {
              "cf_name": "y_zyht(15)",
              "cf_value": 0.002708245687651875,
              "t_stat": 1021026403638.385,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyht(16)",
              "cf_value": 0.0006793788749861876,
              "t_stat": 202144863095.1952,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyht(17)",
              "cf_value": 0.0003089861693518611,
              "t_stat": 91243650679.5441,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyht(18)",
              "cf_value": -0.00006935116601571522,
              "t_stat": -25656516512.70337,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zyht(19)",
              "cf_value": 0.001837608113293888,
              "t_stat": 1510643781782.785,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyht(20)",
              "cf_value": 0.0005096499176820247,
              "t_stat": 377431201220.8265,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyht(21)",
              "cf_value": 0.00009470842999385746,
              "t_stat": 68203675737.90664,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyht(22)",
              "cf_value": 0.00024263888389989,
              "t_stat": 213954210320.8321,
              "distributed_lag_group": 5
            },
            {
              "cf_name": "y_zyht(23)",
              "cf_value": 0.9999999999999932,
              "t_stat": 489814668175101.9
            }
          ],
          "rhs_eq_var": [
            "picnia",
            "ptr",
            "rff",
            "rtr",
            "xgap2",
            "xgdpt",
            "yhgap",
            "yhtgap",
            "zyhst",
            "zyhtst"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "Permanent household transfer income (ZYHT) is the scaled discounted\nstream of future household transfer income (YHT).  The discount factor is 25\npercent per year.  The scaling factor is chosen so that ZYHT and YHT\nhave the same value when YHT is expected to grow steadily at 3 percent\nper year.",
          "eviews_equation": "zyht - zyht_aerr = (1 - (y_zyht(1)^.25)*exp(y_zyht(2))) * yht\n                 + (y_zyht(1)^.25) * zyht(1)",
          "python_equation": "zyht - zyht_aerr = (1 - (y_zyht_1**.25)*exp(y_zyht_2)) * yht\n                 + (y_zyht_1**.25) * zyht(1)",
          "coeff": [
            {
              "cf_name": "y_zyht(1)",
              "cf_value": 0.75
            },
            {
              "cf_name": "y_zyht(2)",
              "cf_value": 0.0075
            }
          ],
          "rhs_eq_var": [
            "yht",
            "zyht"
          ]
        }
      },
      {
        "name": "zyhtst",
        "equation_type": "Behavioral",
        "sector": "Expectations",
        "definition": "Expected trend share of transfer income in household income",
        "standard_equation": {
          "eviews_equation": "log(zyhtst) - zyhtst_aerr = log(zyhtst(-1)) + y_zyhtst(1)*yhtgap(-1)/100",
          "python_equation": "log(zyhtst) - zyhtst_aerr = log(zyhtst(-1)) + y_zyhtst_1*yhtgap(-1)/100",
          "coeff": {
            "cf_name": "y_zyhtst(1)",
            "cf_value": 0.05
          },
          "rhs_eq_var": [
            "yhtgap",
            "zyhtst"
          ]
        }
      },
      {
        "name": "zynid",
        "equation_type": "Identity",
        "sector": "Expectations",
        "definition": "Expected rate of growth of target real dividends, for YNIDN eq. (VAR exp.)",
        "description": "The weighted average growth rate of expected future target\ndividends, ZYNID, is computed from forecasts of the small-scale VAR\nmodel used in the estimation of the dividends (YNIDN) PAC equation.\nThe forward weights are those implied by the estimated PAC\ncoefficients. The equation shown below is the reduced-form\nrepresentation of this expectational computation.",
        "standard_equation": {
          "eviews_equation": "zynid  - zynid_aerr =\n           y_zynid(1)\n          + y_zynid(2)*picnia(-1)\n          + y_zynid(3)*picnia(-2)\n          + y_zynid(4)*picnia(-3)\n          + y_zynid(5)*picnia(-4)\n          + y_zynid(6)*rff(-1)\n          + y_zynid(7)*rff(-2)\n          + y_zynid(8)*rff(-3)\n          + y_zynid(9)*rff(-4)\n          + y_zynid(10)*rtr(-1)\n          + y_zynid(11)*ptr(-1)\n          + y_zynid(12)*xgap(-1)\n          + y_zynid(13)*xgap(-2)\n          + y_zynid(14)*xgap(-3)\n          + y_zynid(15)*xgap(-4)\n          + y_zynid(16)*dlog(qynidn(-1)/pxb(-1))\n          + y_zynid(17)*dlog(qynidn(-2)/pxb(-2))\n          + y_zynid(18)*dlog(qynidn(-3)/pxb(-3))\n          + y_zynid(19)*dlog(qynidn(-4)/pxb(-4))\n          + y_zynid(20)*hggdpt(-1)/400",
          "python_equation": "zynid  - zynid_aerr =\n           y_zynid_1\n          + y_zynid_2*picnia(-1)\n          + y_zynid_3*picnia(-2)\n          + y_zynid_4*picnia(-3)\n          + y_zynid_5*picnia(-4)\n          + y_zynid_6*rff(-1)\n          + y_zynid_7*rff(-2)\n          + y_zynid_8*rff(-3)\n          + y_zynid_9*rff(-4)\n          + y_zynid_10*rtr(-1)\n          + y_zynid_11*ptr(-1)\n          + y_zynid_12*xgap(-1)\n          + y_zynid_13*xgap(-2)\n          + y_zynid_14*xgap(-3)\n          + y_zynid_15*xgap(-4)\n          + y_zynid_16*(log(qynidn(-1)/pxb(-1)) - log(qynidn(-2)/pxb(-2)))\n          + y_zynid_17*(log(qynidn(-2)/pxb(-2)) - log(qynidn(-3)/pxb(-3)))\n          + y_zynid_18*(log(qynidn(-3)/pxb(-3)) - log(qynidn(-4)/pxb(-4)))\n          + y_zynid_19*(log(qynidn(-4)/pxb(-4)) - log(qynidn(-5)/pxb(-5)))\n          + y_zynid_20*hggdpt(-1)/400",
          "coeff": [
            {
              "cf_name": "y_zynid(1)",
              "cf_value": 5.206855405139395e-16,
              "t_stat": 6.910409679400109
            },
            {
              "cf_name": "y_zynid(2)",
              "cf_value": -0.0001020778460719867,
              "t_stat": -16324675405560.2,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zynid(3)",
              "cf_value": 0.0003486952052516843,
              "t_stat": 50597633415391.51,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zynid(4)",
              "cf_value": 0.0002522503063284875,
              "t_stat": 36602172286855.37,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zynid(5)",
              "cf_value": 0.0002059799369104374,
              "t_stat": 32390215654063.7,
              "distributed_lag_group": 1
            },
            {
              "cf_name": "y_zynid(6)",
              "cf_value": 0.000352649102886596,
              "t_stat": 32289576061401.55,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zynid(7)",
              "cf_value": -0.0009117152893301089,
              "t_stat": -60894219193875.62,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zynid(8)",
              "cf_value": -0.0008332522818027586,
              "t_stat": -56221827467044.33,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zynid(9)",
              "cf_value": 0.0002220282051739009,
              "t_stat": 20053045663459.08,
              "distributed_lag_group": 2
            },
            {
              "cf_name": "y_zynid(10)",
              "cf_value": 0.001170290263072301,
              "t_stat": 48662776893950.1
            },
            {
              "cf_name": "y_zynid(11)",
              "cf_value": -0.0007048476024184937,
              "t_stat": -33097352629009.33
            },
            {
              "cf_name": "y_zynid(12)",
              "cf_value": -0.005098524468651768,
              "t_stat": -357763676285484.2,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zynid(13)",
              "cf_value": 0.001661127416240023,
              "t_stat": 66521848340990.95,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zynid(14)",
              "cf_value": 0.0006345562668170024,
              "t_stat": 25467720383802.31,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zynid(15)",
              "cf_value": 0.001396819940195254,
              "t_stat": 91797417233513.73,
              "distributed_lag_group": 3
            },
            {
              "cf_name": "y_zynid(16)",
              "cf_value": 0.002519112167658877,
              "t_stat": 15015917472916.73,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zynid(17)",
              "cf_value": 0.01551673287897806,
              "t_stat": 91396756750307.81,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zynid(18)",
              "cf_value": 0.01239948969603592,
              "t_stat": 74540679843370.55,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zynid(19)",
              "cf_value": -0.006974010098893951,
              "t_stat": -44118991147928.6,
              "distributed_lag_group": 4
            },
            {
              "cf_name": "y_zynid(20)",
              "cf_value": 1.186101463663362,
              "t_stat": 172844532426645.2
            }
          ],
          "rhs_eq_var": [
            "hggdpt",
            "picnia",
            "ptr",
            "pxb",
            "qynidn",
            "rff",
            "rtr",
            "xgap"
          ]
        },
        "mce_equation": {
          "mce_group": "mcother",
          "mce_description": "ZYNID is a weighted average of future growth rates of the target\nlevel of dividends.  The pattern of the weights is a function\nof the PAC adjustment coefficients in the estimated dividend (YNIDN)\nequation.  The sum of the weights equals one minus the sum of the\ncoefficients on lagged growth of actual dividends in the YNIDN\nequation.",
          "eviews_equation": "zynid - zynid_aerr =\n             y_zynid(1) * d( log((qynidn / pxb)), 0, 1 )\n           + y_zynid(2) * d( log(qynidn(1) / pxb(1)), 0, 1 )\n           + y_zynid(3) * zynid(1)\n           + y_zynid(4) * zynid(2)",
          "python_equation": "zynid - zynid_aerr =\n             y_zynid_1 * ( log((qynidn / pxb)) - ( log((qynidn(-1) / pxb(-1)))))\n           + y_zynid_2 * ( log(qynidn(1) / pxb(1)) - ( log(qynidn / pxb)))\n           + y_zynid_3 * zynid(1)\n           + y_zynid_4 * zynid(2)",
          "coeff": [
            {
              "cf_name": "y_zynid(1)",
              "cf_value": 0.1301243019611751
            },
            {
              "cf_name": "y_zynid(2)",
              "cf_value": 0.02618935076830543
            },
            {
              "cf_name": "y_zynid(3)",
              "cf_value": 0.6695043656581022
            },
            {
              "cf_name": "y_zynid(4)",
              "cf_value": 0.2012641018902024
            }
          ],
          "rhs_eq_var": [
            "pxb",
            "qynidn",
            "zynid"
          ]
        }
      }
    ],
    "sector": [
      {
        "name": "Labor Market",
        "description": "This sector contains equations for a variety of labor market\nvariables, including hours worked, private employment in the nonfarm\nbusiness sector, household employment, labor force participation, and\nthe unemployment rate.\n\nA central equation in the sector is the one for total hours, which is\nmodeled using the polynomial adjustment cost (PAC) framework.  Over\ntime, hours error-corrects to an equilibrium level consistent\nwith aggregate output and trend labor productivity.  The latter is\ndefined in a manner consistent with the aggregate production function,\nand thus depends on the optimal capital/output and energy/output\nratios (which in turn are functions of relative factor prices).\n\nAnother key equation is the one for the employment discrepancy\n(LEO), whose variation around a trend is estimated to be procyclical.\nAn identity determines the unemployment rate.\n\nThe historical values of some of the variables in this sector are\nestimated as latent variables in a reduced-form state-space model that\nis documented here and whose code and\ndata are available in the FRB/US supply-side package.  Among these\nlatent variables are the natural rate of unemployment (LURNAT) and the\ntrend levels and drift terms for the labor-force participation rate\n(QLFPR, HQLFPR) and the workweek (QLWW, HQLWW)."
      },
      {
        "name": "Household Expenditures",
        "description": "In FRB/US, optimizing households seek to maximize expected utility\nsubject to lifetime resources.  Because of risk aversion and\nuninsurable income uncertainty, consumption depends on the present\nvalue of expected future income discounted not at the real rate of\ninterest, but at a higher rate that is fixed at 25 percent per annum.\nHeterogeneity across age groups in wealth holdings and the propensity\nto consume makes aggregate desired spending a function of both the\nlevel and composition of expected lifetime resources.  Adjustment\ncosts cause actual spending to deviate from desired spending.\n\nThe household optimization problem has two parts.  The first is the\ncalculation of desired spending in the absence of adjustment costs.\nThe second applies the polynomial adjustment cost (PAC) framework to\nfind the optimal path of actual spending given the desired path.\nExpectations play a role in both optimization steps.\n\nThis general paradigm applies to consumer spending on nondurable\ngoods and non-housing services (actual = ECO, desired = QECO),\ninvestment in durable goods (ECD, QECD), and investment in residential\nstructures (EH, QEH).  The equation for ECO also allows for the\npresence of some rule-of-thumb or liquidity constrained households\nwhose consumption moves in proportion to their income.  The desired\nlevel of spending on each of the two categories of investment depends\non a real rental rate in addition to lifetime resources.  A final and\nrelatively minor consumption category, consumption of housing services\n(ECH), is modeled as a simple reduced form.\n\nThe modeling of desired consumption centers on variable QEC, which\nis the desired level of spending associated with consumption of\nnondurable goods and services plus the service flow from the stock of\ndurables (EC).  QEC is measured historically as the fitted values of a\nregression of EC on constructed measures of discounted future income\nand Flow of Funds estimates of the net stock of tangible assets held\nby the household sector.  The FRB/US equation for QEC is this\nregression equation with QEC substituted for EC as its dependent\nvariable."
      },
      {
        "name": "Aggregate Output Identities",
        "description": "Some of the channels through which movements in real GDP are\ntransmitted elsewhere in the model go through XGDO and XBO,\nwhich are estimates respectively of real GDP and real business output, each adjusted for\nmeasurement error.\n\nThe key production sector in FRB/US is business output.  Potential output (XBT) of this sector is modeled with a\ntwo-factor Cobb-Douglas production function, whose inputs are\npotential quality-adjusted labor hours and capital services.  Trend multifactor productivity captures a standard Solow\nresidual.  XBT is linked to potential GDP (XGDPT) through a sequence\nof identities that can be described most easily in terms of the\nrelationships between various measures of the percentage gap between\nactual and potential output -- the output gap.\n\nThe lack of cyclical variation in non-business output also\nunderlies the relationship between the actual levels, adjusted for\nmeasurement error, of real GDP (XGDO) and business output (XBO).  Specifically, the\nelasticities of XBO and XGO with respect to XGDP are the inverse of\ntheir average nominal historical ratios to GDP, when potential GDP is\nheld fixed, and 1.0 when actual and potential GDP move together.\n\nMany of the variables that are used to calculate the two measures\nof potential output (XGPOT and XBT) are modeled as stochastic\nprocesses that permit both (log) level and growth rate shocks.  As a\nresult, the trend rate of growth of such a variable differs from and\nis generally smoother than the growth rate of its trend level.\nBecause the same holds true by construction for the two measures of\naggregate potential output, FRB/US contains separate variables for\neach trend level and each trend growth rate: XBT and\nHXBT; and XGDPT and HGGDPT.\n\nThe historical values of some of the key variables that enter the\nconstruction of potential output are estimated as latent variables in\na reduced-form state-space model that is\ndocumented &lt;a href=\"latent_note.pdf\"&gt;here&lt;/a&gt; and whose code and data\nare available in the FRB/US supply-side package.  Among these latent\nvariables are the potential levels of GDP and business sector output, as well as\npotential business sector employment (LEPPOT), the natural rate of unemployment\n(LURNAT) and the trend components of the labor-force participation\nrate (QLFPR) and the workweek (QLWW).  The historical values of the\nmeasures of real GDP and real business output that are adjusted for measurement error (XGDO and XBO) also come from the state-space model."
      },
      {
        "name": "Foreign Activity",
        "description": "Key measures of foreign activity are determined in a small-scale\nreduced-form forecasting model.  The system contains four primary\nequations: an estimated \"IS\" curve, in which the level of foreign\noutput gap is a function of the real short-term interest rate abroad;\nan estimated foreign inflation equation in which inflation\nexpectations are expressed as a weighted average of past and\ntarget inflation; an imposed monetary policy reaction function that\ndetermines the foreign short-term rate of interest; and an estimated\nyield curve equation in which the foreign bond rate depends on the\nforiegn short-term rate and the foreign output gap.  Coefficient\nrestrictions are imposed to ensure long-run stability.\n\nThe real exchange rate is determined via an open interest parity\ncondition based on real bond rates, augmented with a term to capture\ncountry risk.\n\nAdditional identities use exogenous conversion factors to\ntranslate many of the foreign variables between different country\ncoverages (G10 vs G39) and different aggregation weights."
      },
      {
        "name": "Foreign Trade",
        "description": "The core of the foreign trade sector is a pair of error-correction\nequations for the volumes of exports and nonoil imports.  An\nerror-correction equation for domestic crude energy consumption, in\nconjunction with the exogenous domestic supply of crude energy,\ndetermines the volume of oil imports.  In addition, the sector\ncontains a variety of identities and quasi-identities for aggregate\nreal and nominal exports and imports, U.S. net foreign investment\nincome, the current account balance, and the net foreign asset\nposition of the United States."
      },
      {
        "name": "Government",
        "description": "Identities.  Much of sector consists of identities that: (1)\nrelate nominal purchases (consumption and investment expenditures),\ntransfers, and grants to associated constant-dollar variables and\nprice indexes; (2) link tax receipts to tax rates and tax bases; and\n(3) compute the budget surplus and stock of debt.\n\nEstimated equations.  Error-correction equations link\nspending on various types of purchases to trend spending in these\ncategories.  Other estimated equations account for cyclical\nfluctuations in transfer payments and tax rates.\n\nPersonal income tax-rate reaction functions.  The sector\nincludes three options for setting the personal income tax rate of\nthe federal government.  The choice of an option is determined by\nwhich switch variable -- DFPSRP, DFPDBT, DFPEX -- is set to one.\nActivation of DFPSRP causes the tax rates to adjust so that the ratio\nof the federal government's surplus to GDP gradually stabilizes at a specified\nvalue.  Activitation of DFPDBT causes the adjustments to stabilize the\nratios of government debt to GDP at specified values.  No adjustments\ntake place when DFPEX is activated, making this a suitable choice only\nin the short run.  The switches are exogenous variables whose values\ncan change over the course of a simulation."
      },
      {
        "name": "Business Expenditures",
        "description": "The equation for investment is based partly on the\nframework of optimization subject to adjustment costs and partly on an\nad hoc accelerator effect of output growth on investment growth.  The\nlatter may capture the effects of cash flow on the ability of\nliquidity-constrained firms to finance investment projects.\n\nIn the optimization part of each equation, the level of investment\nthat would be desired in the absence of adjustment costs is defined in\ntwo steps.  In the first, the target capital-output ratio is a\nfunction of the user cost associated with that type of capital.  In\nthe second, the target investment-output ratio is formed as the\nproduct of the target capital-output ratio and the sum of the\ncapital-specific rate of depreciation and the rate of growth of\npotential output.  This is the rate of investment necessary to hold\nthe capital-output ratio at its optimal level.\n\nThe target for the individual capital-output ratio is derived\njointly from a nested aggregate production function. At the highest\nlevel, the production function is Cobb-Douglas with two factors of\nproduction -- quality-adjusted hours and an aggregate capital\nservices bundle. The capital services bundle is measured as the\nchain-weighted aggregate of the flow of capital services from each\ntype of capital stock.  Within the capital-services bundle, the\ntargets for the individual categories are assumed to have a unit\nelasticity with respect to the user cost of capital, as in a\nCobb-Douglas production function.  The framework deviates from the\nstandard Cobb-Douglas specification, however, in allowing the\nlong-run capital services shares to vary over time.\n\nIn the optimization framework, the polynomial adjustment cost (PAC)\napproach determines the actual path of investment.  In this approach,\ninvestment responds to the lagged gap between actual and target\ninvestment, expected future growth in target investment, and lagged\ngrowth in actual investment.\n\nInventories\n\nThe stock of inventories is modeled with a simple error-correction\nequation in which the equilibrium ratio of inventories to final sales\nis a random walk with negative drift."
      },
      {
        "name": "Wages and Prices",
        "description": "Main Equations\n\n At the center of price-wage sector is a pair of equations for core\nPCE price inflation (PICXFE) and the rate of change of the ECI measure\nof hourly compensation (PIECI).  The equations are estimated\nsimultaneously.  The form of each equation is based on a variant of\nthe New Keynesian Phillips Curve (NKPC) derived by Cogley and\nSbordonne (2008) for the case in which the subset of prices or wages\nthat is not optimally reset each period is indexed to either past or\ntrend inflation.\n\n(1) &amp;Pi;t = Et-1[&amp;Pi;t+1\n       + &amp;kappa;&amp;mu;t] + &amp;epsilon;t\n\n(2) &amp;Pi;t &amp;equiv; &amp;pi;t -\n       &amp;gamma;&amp;pi;^t - (1-&amp;gamma;)&amp;pi;*t\n\n(3) &amp;pi;^t  &amp;equiv; &amp;sum;(i=1,n)&amp;pi;t-i /n\n\n Equation 1 is the basic NKPC expressed in terms of the composite\nvariable &amp;Pi;, which is defined in equation 2 as the difference\nbetween actual price or wage inflation (&amp;pi;) and a weighted average\nof past (&amp;pi;^) and trend (&amp;pi;*) price or wage inflation.\nExpectations are formed on the basis of \"t-1\" information,\n&amp;beta;(=.98) is the discount factor, and &amp;mu; is the markup gap.\n\nPast inflation (equation 3) is measured using a single lag (n=1)\nin the price NKPC and a four-quarter average (n=4) in the wage NKPC.\nFor prices, trend inflation is measured using survey data on\nexpectations of ten-year consumer price inflation (PTR).  Trend wage\ninflation equals the sum of trend price inflation and the trend rate\nof increase of labor productivity, less an estimate of the trend rate\nof change of the relative price of consumption.\n\n The detrended level of the log labor share in the nonfarm business\nsector is a key part of both the price and wage markup gaps.  The\nconsumption price markup gap is approximately equal to a weighted\naverage of the detrended labor share, the relative price of nonoil\nimports, and a few additional but minor terms, all measured in logs.\nThe wage markup gap -- in theory, the difference between the marginal\nrate of substitution and the real wage -- is expressed as a function\nof the detrended labor share and the unemployment gap (LUR-LURNAT).\nThis structural dependence of wage inflation on the unemployment gap\nleads to a dependence of price inflation on the unemployment gap\nthrough expected price inflation.\n\n The structure of the PICXFE and PIECI equations, along with\nvarious related equations and identities, ensures that the sector has\na long-run equilibrium in which the labor share of income is constant\n(given by the inverse of PWSTAR).  Historically, PWSTAR has a trend\nthat is estimated using a one-sided variant of the HP filter.  The\nlong-run equilibrium conditions associated with a given value of\nPWSTAR are embedded in the definitions of a set of desired or target\nprice and wage levels: QPXG, QPL, QPXP, and QPCNIA.  UQPCT, which is\nthe trend in the ratio of the price of consumption (PCNIA) to the\nprice of final sales (PXP), also enters this structure.  In a long-run\nequilibrium, actual inflation will equal trend inflation, where the\nlatter is usually specified to converge to the rate of inflation\ndesired by policymakers.\n\nMore information on the estimation of the price-wage NKPC\nequations is available here.\n\nPrice Disaggregation\n\n The prices of most non-consumption components of GDP are\ndetermined in two stages. The first stage consists of the equation for\nPIPXNC, which is the rate of price inflation for an aggregate of\nbusiness fixed investment, residential investment, non-labor\ngovernment purchases, and exports.  The main determinant of PIPXNC is\nthe rate of growth of consumption prices including food and energy\n(PICNIA), adjusted for an estimate of the trend in PIPXNC-PICNIA.  In\nthe second stage, PIPXNC is disaggregated into nine component prices\nusing a set of equations of the form,\n\n(4) &amp;Delta;log(Pi/PXP) = Ci +\n    &amp;Delta;log(PXNC/PXP) + DPADJ\n\n where Pi is a component price, PXNC is the price level\nassociated with PIPXNC, and DPADJ is a correction factor that accounts\nfor the fact that the set of equations given by (4) yields an inexact\ndecomposition of PNXC each quarter.  The equation also includes the\naggregate consumption and non-consumption price, PXP, as a scaling\nvariable and a constant.  The coded equation for each Pi\nsets the constant to zero, but in most simulation applications the\nequivalent of a non-zero intercept is included via an add factor whose\nvalue is based on that equation's average historical error.  The prices\ndetermined in this system are PHR, PBFIR, PEGFR, PEGSR and PXR.\n\nOther Prices\n\n The fundamental energy price is the average per barrel price of\nimported oil, POIL. The price index for nonoil imports, PMO, depends on a weighted average of the exchange-rate adjusted foreign CPI and the price index\nfor nonfarm business output. The rest of the sector consists of a large number of identities\nfor such variables as the GDP price index (PGDP)."
      },
      {
        "name": "Expectations",
        "description": "This sector contains the identities that are used for expectational\nvariables when the assumption of \"VAR\" expectations is employed.  The\nform of each identity is determined by the structure and parameters of\nthe sub-model that is used to estimate the structural equation in\nwhich the expectation appears.  In most cases, the expectation is for\na weighted sum of a variable over future quarters.  The exceptions are\nin the wage-price block (ZPICXFE, ZPIECI), where expectations are for\none period ahead.  In all cases, the VAR expectation is expressed as a\nlinear function of an observable information set.  Two types of\nparameters determine the coefficient values in the typical\nexpectations equation: discounting weights that specify the horizon of\neach expectation and coefficients of the VAR system used to generate\nforecasts that proxy for expectations in the estimation sub-model.\n\nIn the VAR-expectations formulas, the information set includes a\ncore set of macro variables: actual consumer price inflation (PICNIA)\nand the value expected to prevail in the long run (PTR); the actual\nfederal funds rate (RFF) and the value expected to prevail in the\nlong run (RTR); and the output gap (XGAP).  (By definition, the latter\nis assumed to be zero in the long run.)  The structure of the core VAR\nmodel is such that interest rate and inflation expectations converge\nto long-run expectations as the forecast horizon lengthens.  The\nlong-run expectations are modeled as random walks in the core VAR.\nFor many expectational variables, the information set also includes\none or more sector-specific variables.  Expectations in financial\nequations assume that current-period data are in the information set,\nwhile those in nonfinancial equations assume that only lagged data are\nin the information set.\n\nFor expectations appearing in PAC equations, the discounting\nweights depend on a general discount factor (.98 per quarter) and on\nthe estimated adjustment cost parameters as given by the PAC\nequation's error-correction coefficient and coefficients on lags of\nthe dependent variable.  In most cases, the effective forward horizon\nof these expectations is only a few years.  The sum of the discounting\nweights in PAC expectations is not unity.  For the expectational\ncomponents of long-term interest rates and the required rate of return\non equity, the discounting weights sum to unity and depend on the\nduration of the financial instrument.  For the expectations of\npermanent income appearing in the target level of consumption, the\ndiscouting weights sum to unity and are based on a general discount\nfactor of 25 percent per year.\n\nFor further information,\nsee Var Expectations Basics."
      },
      {
        "name": "MC Expectations",
        "description": "This sector contains the identities that are used for expectational\nvariables when the assumption of model-consisten expectations is\nemployed.  The form of each identity is determined by the structure\nand parameters of the sub-model that is used to estimate the\nstructural equation in which the expectation appears.  In most cases,\nthe expectation is defined as a weighted sum of a variable over future\nquarters.  The exceptions are in the wage-price block (ZPICXFE,\nZPIECI), where expectations are for one period ahead.\n\nDiscounting weights determine the coefficient values in the typical\nexpectations equation.  For expectations appearing in PAC equations,\nthe discounting weights depend on a general discount factor (.98 per\nquarter) and on the estimated adjustment cost parameters as given by\nthe PAC equation's error-correction coefficient and coefficients on\nlags of the dependent variable.  In most cases, the effective forward\nhorizon of these expectations is only a few years.  The sum of the\ndiscounting weights in PAC expectations is not unity.  For the\nexpectational components of long-term interest rates and the required\nrate of return on equity, the discounting weights sum to unity and\ndepend on the duration of the financial instrument.  For the\nexpectations of permanent income appearing in the target level of\nconsumption, the discouting weights sum to unity and are based on a\ngeneral discount factor of 25 percent per year."
      },
      {
        "name": "Nominal Income",
        "description": "Many of the equations in this sector are accounting identities for\nmeasures of nominal income, output, and product.  Some of the\nidentities make use of multiplicative conversion factors, so that the\nfull set of variables that appear in the NIPA identities do not have\nto be included in FRB/US.\n\nThe sector also contains equations for the measures of after-tax\nhousehold income and its primary components -- labor, transfer, and\nproperty -- that are are used in the consumption sector.  Property\nincome is defined more broadly than in the NIPA accounts. It includes\nthe following additional items: imputed income from the stock of\nconsumer durables, less consumer interest payments to business;\ncorporate retained earnings; and inflation losses on the stock of\ngovernment debt.  These modifications to the definition of household\nincome imply that households see through the corporate veil and adjust\ninterest income to exclude that portion which compensates for\ninflation.  (An inflation adjustment to interest earned on corporate\ndebt is not necessary, since an offsetting adjustment would need to be\nmade to the definition of corporate profits.)\n\nThe sector contains estimated equations for dividends, consumer\ninterest payments to business, the net interest and rental income\ncomponent of national income, and the net financial debt of\nnonfinancial corporations."
      },
      {
        "name": "Financial Sector",
        "description": "The financial sector of FRB/US is divided into three blocks of\nequations: equations determining the stance of monetary policy,\ndefined as the value of the federal funds rate; equations for other\ninterest rates based on arbitrage relationships; and equations for\nhousehold wealth, including one that relates the value of the stock\nmarket to real bond yields and expected growth in dividends.\n\nMonetary Policy\n\n In the monetary policy block, there are seven basic options for\nsetting the federal funds rate, including variants of the Taylor rule,\nan estimated policy rule, a pre-determined path for the funds rate\nthat can be defined in either nominal or real terms, and a generalized\npolicy rule that can be used, for example, to target either inflation\nor the price level.  These options are mutually exclusive, although it\nis possible to switch from one option to another in multi-period\nsimulations by varying a group of exogenous \"switches.\"\n\nThe chosen basic policy option can be modified so that the outcome\nfor the federal funds rate is subject to the zero lower bound (ZLB).\nIn addition, the timing of the liftoff of the funds rate from the ZLB\ncan be determined by a version of the threshold criteria that appeared\nin FOMC statements from December 2012 to January 2014.  In this case,\nliftoff is delayed until either the unemployment rate falls below a\nthreshold or the expected inflation rate rises above a threshold.\n\n The choice of a basic option is determined by which of seven\nswitch variables -- DMPEX, DMPRR, DMPTAY, DMPTLR, DMPINTAY, DMPALT,\nand DMPGEN -- is set to one.  Activation of one of the first two\nswitches sets the funds rate to an pre-determined nominal (RFFIX) or\nreal path (RRFIX).  Activation of any of the remaining switches sets\nthe funds rate to the outcome of an equation whose structure\ncorresponds to a given policy rule (eg, RFFTAY, RFFTLR, etc).  The\nRFFRULE equation combines the seven options in a form that yields the\noutcome for the funds rate under the chosen option.\n\nSetting the exogenous variable RFFMIN to zero (or a small positive\nvalue) imposes the ZLB; setting RFFMIN to a large negative number\neliminates the constraint.\n\nWhen the exogenous switch variable DMPTRSH = 1, liftoff from the\nZLB is delayed until either the unemployment rate falls below a\ncritical rate (LURTRSH) or expected inflation rises above a critical\nrate (PITRSH).  Once either threshold is crossed, the policy rate is\ndetermined, with a one-quarter delay and subject to the ZLB, by the\nchosen basic policy option, and it continues to be set according to\nthat policy option irrespective of the subsequent outcomes for\nunemployment and expected inflation.  The implementation of the\nthreshold-based policy relies on four endogenous trigger variables,\nDMPTLUR, DMPTPI, DMPTMAX, and DMPTR.  When either of the thresholds\nhas been crossed, the value of DMPTR becomes 1.0 and remains at that\nvalue in subsequent quarters.\n\nThe final equation in the monetary policy block determines the\nvalue of the effective federal funds rate (RFF) by modifying the\nvalue of RFFRULE for the effects of the thresholds, when they are\nturned on and are binding.\n\nOther Interest Rates\n\nIn the block of equations that determines other interest rates, the\nmost important are those for yields on BBB corporate bonds (RBBB) and\n5-, 10-, and 30-year government bonds (RG5, RG10, RG30).  These\nequations are based on the expectations theory of the term structure,\nwhereby the yield on a long-term bond equals a weighted average of\nexpected rates on short-term assets over the maturity of the long-term\nbond plus a term/risk premium.  The equations employ an approximation\nin which the weighted average is calculated over an infinite horizon\nand the weights decline at a geometric rate that is based on the\nbond's duration.  The latter is calculated as a function of the bond's\nmaturity and the average historical level of nominal interest rates.\n\n (1) Rt(m) =\n(1-w(m))Et[&amp;sum;(i=0,&amp;infin;)w(m)i\nrt+i] + &amp;phi;t(m)\n\n where R(m) is the rate of interest on a bond whose\nmaturity is m quarters, r is the federal funds rate, and\n&amp;phi;(m) is the term/risk premium.  The following formulas\ndefine the value of w(m).\n\n (2) w(m) = (D(m)-1)/D(m)\n (3) D(m) = (1-gm)/(1-g)\n (4) g = 1/(1+(R^).25)\n\n D(m) is the duration of a bond whose maturity is m\nquarters.  R^ is the average nominal rate of interest.\n\n The term/risk premiums &amp;phi;(m) associated with the\nfour bond rates consist of a constant, a serially correlated residual,\nand an element that varies with the output gap (x) expressed as a\npresent value with the same form as the funds rate present value.\n\n (5)\n(1-w(m))Et[&amp;sum;(i=0,&amp;infin;)w(m)i\nxt+i]\n\n The funds rate present value in equation (1) is assigned to a\nvariable whose name starts with the characters ZRFF (eg, ZRFF10) and\nthe output gap present value in equation (5) is assigned to a variable\nwhose name starts ZGAP (eg, ZGAP10).\n\nIn addition to the four main bond rates, the second block of\nequations contains estimated equations for yields on Treasury bills\n(RTB), home mortgages (RME), and new car loans (RCAR).\n\nWealth\n\nThe final block of the sector determines the value of household net\nworth, as measured by the Federal Reserve's Flow-of-Funds accounts.\nHousehold net worth is divided into two components, corporate equity\n(WPSN) and other (WPON).  The former is determined using a\nlinearization of the standard Gordon formula, in which stock prices\ndepend on the level of dividends (proxied by one-half the level of\nafter-tax corporate profits), expected future growth in dividends, the\nreal interest rate (on 30-year government bonds), and an equity\npremium.  The equity premium is a function of the BBB premium and a\nserially correlated error.  The change from one quarter to the next in\nhousehold net worth excluding corporate equity equals the sum of\npersonal savings, net investment in consumer durables, and capital\ngains on houses and other assets."
      }
    ],
    "exogenous_projection": [
      {
        "name": 1,
        "description": "average growth over last 9 quarters applied to most recent value"
      },
      {
        "name": 2,
        "description": "most recent value"
      },
      {
        "name": 3,
        "description": "average of past 5 quarters"
      },
      {
        "name": 4,
        "description": "average growth of the past 16 quarters applied to the adjusted average level of the past 4 quarters (the average level is adjusted using the average growth rate so that the level corresponds to the most recent quarter)"
      },
      {
        "name": 5,
        "description": "most recent first difference"
      },
      {
        "name": 6,
        "description": "most recent growth rate"
      },
      {
        "name": 7,
        "description": "zero"
      },
      {
        "name": 8,
        "description": "Average 4-qtr growth rate multiplied by .8"
      },
      {
        "name": 9,
        "description": "Rho = .9"
      }
    ],
    "stochastic_type": [
      {
        "name": "GV",
        "description": "Government variables"
      },
      {
        "name": "ST",
        "description": "Stochastic trend variables"
      },
      {
        "name": "IS",
        "description": "IS curve variables"
      },
      {
        "name": "RW",
        "description": "Foreign variables (rest of the world)"
      },
      {
        "name": "FN",
        "description": "Financial variables"
      },
      {
        "name": "IN",
        "description": "Income variables"
      },
      {
        "name": "LB",
        "description": "Labor variables"
      },
      {
        "name": "PR",
        "description": "Price variables"
      },
      {
        "name": "OT",
        "description": "Other variables"
      }
    ]
  }
}